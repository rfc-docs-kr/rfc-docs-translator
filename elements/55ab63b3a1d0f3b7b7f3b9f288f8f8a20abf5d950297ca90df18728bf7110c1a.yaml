"hash": |-
  55ab63b3a1d0f3b7b7f3b9f288f8f8a20abf5d950297ca90df18728bf7110c1a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Tutorial: A single sign-on subsystem typically requires a user to
        log in once at the beginning of a session, and then during the
        session transparently grants access by the user to multiple,
        separately protected hosts, applications, or other system
        resources, without further login action by the user (unless, of
        course, the user logs out). Such a subsystem has the advantages of
        being user friendly and enabling authentication to be managed
        consistently across an entire enterprise. Such a subsystem also
        has the disadvantage of requiring all the accessed components to
        depend on the security of the same authentication information.
"fixed": |-
  - Tutorial: A single sign-on subsystem typically requires a user to log in once at the beginning of a session, and then during the session transparently grants access by the user to multiple, separately protected hosts, applications, or other system resources, without further login action by the user (unless, of course, the user logs out). Such a subsystem has the advantages of being user friendly and enabling authentication to be managed consistently across an entire enterprise. Such a subsystem also has the disadvantage of requiring all the accessed components to depend on the security of the same authentication information.
"ko": |-
  - 튜토리얼: SSO(Single Sign-On) 하위 시스템은 일반적으로 사용자가 세션 시작 시 한 번 로그인하도록 요구하며, 세션 중에 별도로 보호되는 여러 호스트, 애플리케이션 또는 기타 시스템 리소스에 대한 액세스 권한을 사용자에게 투명하게 부여합니다. 사용자에 의한 추가 로그인 작업(물론 사용자가 로그아웃하지 않는 한) 이러한 하위 시스템은 사용자 친화적이고 전체 기업에서 인증을 일관되게 관리할 수 있다는 장점이 있습니다. 이러한 하위 시스템에는 액세스되는 모든 구성 요소가 동일한 인증 정보의 보안에 의존해야 한다는 단점도 있습니다.
