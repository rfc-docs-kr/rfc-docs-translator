"hash": |-
  3f43d9387881e1d8bd17da84b88206ce111b8f360dd20216544ffacf264aa8a9
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     This method relies on the fact that if two different responses were
     sent by the origin server during the same second, but both had the
     same Last-Modified time, then at least one of those responses would
     have a Date value equal to its Last-Modified time.  The arbitrary
     60-second limit guards against the possibility that the Date and
     Last-Modified values are generated from different clocks or at
     somewhat different times during the preparation of the response.  An
     implementation MAY use a value larger than 60 seconds, if it is
     believed that 60 seconds is too short.
"fixed": |-
  This method relies on the fact that if two different responses were sent by the origin server during the same second, but both had the same Last-Modified time, then at least one of those responses would have a Date value equal to its Last-Modified time.  The arbitrary 60-second limit guards against the possibility that the Date and Last-Modified values are generated from different clocks or at somewhat different times during the preparation of the response.  An implementation MAY use a value larger than 60 seconds, if it is believed that 60 seconds is too short.
"ko": |-
  이 방법은 동일한 초 동안 원본 서버에서 두 개의 서로 다른 응답을 보냈지만 둘 다 동일한 Last-Modified 시간을 가졌다면 해당 응답 중 적어도 하나는 Last-Modified와 동일한 Date 값을 갖는다는 사실에 의존합니다. 시간. 임의의 60초 제한은 응답을 준비하는 동안 Date 및 Last-Modified 값이 다른 시계 또는 다소 다른 시간에 생성될 가능성을 방지합니다. 60초가 너무 짧다고 판단되는 경우 구현에서는 60초보다 큰 값을 사용할 수 있습니다.
