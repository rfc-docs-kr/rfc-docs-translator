"hash": |-
  ede2ea25908f81163c90b58e266adc98b3b31ad20daef3a7417e81f8c51caca3
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     This command causes the connection specified to be closed.  If the
     connection is not open or the calling process is not authorized to
     use this connection, an error is returned.  Closing connections is
     intended to be a graceful operation in the sense that outstanding
     SENDs will be transmitted (and retransmitted), as flow control
     permits, until all have been serviced.  Thus, it should be acceptable
     to make several SEND calls, followed by a CLOSE, and expect all the
     data to be sent to the destination.  It should also be clear that
     users should continue to RECEIVE on CLOSING connections since the
     remote peer may be trying to transmit the last of its data.  Thus,
     CLOSE means "I have no more to send" but does not mean "I will not
     receive any more."  It may happen (if the user-level protocol is not
     well thought out) that the closing side is unable to get rid of all
     its data before timing out.  In this event, CLOSE turns into ABORT,
     and the closing TCP peer gives up.
"fixed": |-
  This command causes the connection specified to be closed.  If the connection is not open or the calling process is not authorized to use this connection, an error is returned.  Closing connections is intended to be a graceful operation in the sense that outstanding SENDs will be transmitted (and retransmitted), as flow control permits, until all have been serviced.  Thus, it should be acceptable to make several SEND calls, followed by a CLOSE, and expect all the data to be sent to the destination.  It should also be clear that users should continue to RECEIVE on CLOSING connections since the remote peer may be trying to transmit the last of its data.  Thus, CLOSE means "I have no more to send" but does not mean "I will not receive any more."  It may happen (if the user-level protocol is not well thought out) that the closing side is unable to get rid of all its data before timing out.  In this event, CLOSE turns into ABORT, and the closing TCP peer gives up.
"ko": |-
  이 명령을 사용하면 지정된 연결이 닫힙니다. 연결이 열려 있지 않거나 호출 프로세스에 이 연결을 사용할 권한이 없으면 오류가 반환됩니다. 연결 닫기는 모든 서비스가 완료될 때까지 흐름 제어가 허용하는 대로 미해결 SEND가 전송(및 재전송)된다는 점에서 정상적인 작업을 의미합니다. 따라서 SEND를 여러 번 호출한 후 CLOSE를 호출하고 모든 데이터가 대상으로 전송될 것으로 예상하는 것이 허용됩니다. 또한 원격 피어가 마지막 데이터 전송을 시도할 수 있으므로 사용자는 CLOSING 연결에서 RECEIVE를 계속해야 한다는 점을 분명히 해야 합니다. 따라서 CLOSE는 "더 이상 보낼 것이 없다"는 의미이지 "더 이상 받지 않겠다"는 의미는 아닙니다. (사용자 수준 프로토콜을 잘 고려하지 않은 경우) 종료 측이 시간 초과 전에 모든 데이터를 제거하지 못하는 경우가 발생할 수 있습니다. 이 경우 CLOSE는 ABORT로 바뀌고 닫는 TCP 피어는 포기합니다.
