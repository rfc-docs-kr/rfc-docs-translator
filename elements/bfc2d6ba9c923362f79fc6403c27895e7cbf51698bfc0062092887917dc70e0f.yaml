"hash": |-
  bfc2d6ba9c923362f79fc6403c27895e7cbf51698bfc0062092887917dc70e0f
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     One consequence of this flexibility is that the protocol cannot be
     defined in terms of what occurs behind the interface.  Instead, we
     are limited to defining the syntax of communication, the intent of
     received communication, and the expected behavior of recipients.  If
     the communication is considered in isolation, then successful actions
     ought to be reflected in corresponding changes to the observable
     interface provided by servers.  However, since multiple clients might
     act in parallel and perhaps at cross-purposes, we cannot require that
     such changes be observable beyond the scope of a single response.
"fixed": |-
  One consequence of this flexibility is that the protocol cannot be defined in terms of what occurs behind the interface.  Instead, we are limited to defining the syntax of communication, the intent of received communication, and the expected behavior of recipients.  If the communication is considered in isolation, then successful actions ought to be reflected in corresponding changes to the observable interface provided by servers.  However, since multiple clients might act in parallel and perhaps at cross-purposes, we cannot require that such changes be observable beyond the scope of a single response.
"ko": |-
  이러한 유연성의 한 가지 결과는 프로토콜이 인터페이스 뒤에서 발생하는 측면에서 정의될 수 없다는 것입니다. 대신, 우리는 통신 구문, 수신된 통신의 의도 및 수신자의 예상되는 동작을 정의하는 것으로 제한됩니다. 통신이 독립적으로 고려되는 경우 서버에서 제공하는 관찰 가능한 인터페이스에 대한 해당 변경 사항에 성공적인 작업이 반영되어야 합니다. 그러나 여러 클라이언트가 병렬로 작동하고 아마도 교차 목적으로 작동할 수 있으므로 이러한 변경 사항이 단일 응답 범위를 넘어 관찰 가능하도록 요구할 수는 없습니다.
