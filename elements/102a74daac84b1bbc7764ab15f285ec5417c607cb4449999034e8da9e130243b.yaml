"hash": |-
  102a74daac84b1bbc7764ab15f285ec5417c607cb4449999034e8da9e130243b
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Tutorial: For a data structure defined abstractly in ASN.1, BER
        often provides for encoding the structure into an octet string in
        more than one way, so that two separate BER implementations can
        legitimately produce different octet strings for the same ASN.1
        definition. However, some applications require all encodings of a
        structure to be the same, so that encodings can be compared for
        equality. Therefore, DER is used in applications in which unique
        encoding is needed, such as when a digital signature is computed
        on a structure defined by ASN.1.
"fixed": |-
  - Tutorial: For a data structure defined abstractly in ASN.1, BER often provides for encoding the structure into an octet string in more than one way, so that two separate BER implementations can legitimately produce different octet strings for the same ASN.1 definition. However, some applications require all encodings of a structure to be the same, so that encodings can be compared for equality. Therefore, DER is used in applications in which unique encoding is needed, such as when a digital signature is computed on a structure defined by ASN.1.
"ko": |-
  - 튜토리얼: ASN.1에 추상적으로 정의된 데이터 구조의 경우 BER은 구조를 여러 가지 방법으로 옥텟 문자열로 인코딩하는 기능을 제공하므로 두 개의 별도 BER 구현이 동일한 ASN.1 정의에 대해 서로 다른 옥텟 문자열을 합법적으로 생성할 수 있습니다. . 그러나 일부 애플리케이션에서는 인코딩이 동일한지 비교할 수 있도록 구조의 모든 인코딩이 동일해야 합니다. 따라서 DER은 ASN.1에 정의된 구조에서 디지털 서명이 계산되는 경우와 같이 고유한 인코딩이 필요한 애플리케이션에 사용됩니다.
