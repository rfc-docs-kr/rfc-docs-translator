"hash": |-
  284a89b61e7ef8cb0a73584ef1ea94de2e80bd521a8edb0de7f6f169a9e35e77
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     As a typical example, when a peer wants to send a chunk and Merkle
     hash trees are used, it creates a datagram that consists of several
     INTEGRITY messages containing the hashes the receiver needs to verify
     the chunk and the actual chunk itself encoded in a DATA message.
     What are the necessary hashes and the exact rules for encoding them
     into datagrams is specified in Sections 5.3, and 5.4, respectively.
"fixed": |-
  As a typical example, when a peer wants to send a chunk and Merkle hash trees are used, it creates a datagram that consists of several INTEGRITY messages containing the hashes the receiver needs to verify the chunk and the actual chunk itself encoded in a DATA message. What are the necessary hashes and the exact rules for encoding them into datagrams is specified in Sections 5.3, and 5.4, respectively.
"ko": |-
  일반적인 예로, 피어가 청크를 전송하려고 하고 Merkle 해시 트리가 사용되는 경우 수신자가 청크를 확인하는 데 필요한 해시와 DATA 메시지에 인코딩된 실제 청크 자체를 포함하는 여러 INTEGRITY 메시지로 구성된 데이터그램을 생성합니다. . 필요한 해시는 무엇이며 이를 데이터그램으로 인코딩하기 위한 정확한 규칙은 각각 섹션 5.3 및 5.4에 지정되어 있습니다.
