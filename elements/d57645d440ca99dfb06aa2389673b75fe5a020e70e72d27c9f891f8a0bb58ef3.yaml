"hash": |-
  d57645d440ca99dfb06aa2389673b75fe5a020e70e72d27c9f891f8a0bb58ef3
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     One method to avoid resource leakage is for the server to use
     difficult-to-guess, one-time resource URIs.  In this instance, there
     can be only a single access to the underlying resource using the
     given URI.  A downside to this approach is if an attacker uses the
     URI before the client uses the URI, then the client is denied the
     resource.  Other methods would be to adopt a mechanism similar to the
     URLAUTH IMAP extension [RFC4467], where the server sets cryptographic
     checks on URI usage, as well as capabilities for expiration,
     revocation, and so on.  Specifying such a mechanism is beyond the
     scope of this document.
"fixed": |-
  One method to avoid resource leakage is for the server to use difficult-to-guess, one-time resource URIs.  In this instance, there can be only a single access to the underlying resource using the given URI.  A downside to this approach is if an attacker uses the URI before the client uses the URI, then the client is denied the resource.  Other methods would be to adopt a mechanism similar to the URLAUTH IMAP extension [RFC4467], where the server sets cryptographic checks on URI usage, as well as capabilities for expiration, revocation, and so on.  Specifying such a mechanism is beyond the scope of this document.
"ko": |-
  리소스 누출을 방지하는 한 가지 방법은 서버가 추측하기 어려운 일회성 리소스 URI를 사용하는 것입니다. 이 경우 주어진 URI를 사용하여 기본 리소스에 대한 액세스는 단 하나뿐입니다. 이 접근 방식의 단점은 공격자가 클라이언트가 URI를 사용하기 전에 URI를 사용하면 클라이언트가 리소스를 거부한다는 것입니다. 다른 방법은 URLAUTH IMAP 확장[RFC4467]과 유사한 메커니즘을 채택하는 것입니다. 여기서 서버는 URI 사용에 대한 암호화 검사와 만료, 해지 등의 기능을 설정합니다. 이러한 메커니즘을 지정하는 것은 이 문서의 범위를 벗어납니다.
