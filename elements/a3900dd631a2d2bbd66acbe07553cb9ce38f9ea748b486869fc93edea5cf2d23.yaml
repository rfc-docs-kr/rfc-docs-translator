"hash": |-
  a3900dd631a2d2bbd66acbe07553cb9ce38f9ea748b486869fc93edea5cf2d23
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The most robust method, called encrypt-then-authenticate, first
     applies encryption to the data and then applies a MAC to the
     ciphertext.  This method ensures that the integrity and
     confidentiality goals are obtained with ANY pair of encryption and
     MAC functions, provided that the former is secure against chosen
     plaintext attacks and that the MAC is secure against chosen-message
     attacks.  TLS uses another method, called authenticate-then-encrypt,
     in which first a MAC is computed on the plaintext and then the
     concatenation of plaintext and MAC is encrypted.  This method has
     been proven secure for CERTAIN combinations of encryption functions
     and MAC functions, but it is not guaranteed to be secure in general.
"fixed": |-
  The most robust method, called encrypt-then-authenticate, first applies encryption to the data and then applies a MAC to the ciphertext.  This method ensures that the integrity and confidentiality goals are obtained with ANY pair of encryption and MAC functions, provided that the former is secure against chosen plaintext attacks and that the MAC is secure against chosen-message attacks.  TLS uses another method, called authenticate-then-encrypt, in which first a MAC is computed on the plaintext and then the concatenation of plaintext and MAC is encrypted.  This method has been proven secure for CERTAIN combinations of encryption functions and MAC functions, but it is not guaranteed to be secure in general.
"ko": |-
  암호화 후 인증이라는 가장 강력한 방법은 먼저 데이터에 암호화를 적용한 다음 암호문에 MAC를 적용합니다. 이 방법은 전자가 선택된 일반 텍스트 공격에 대해 안전하고 MAC이 선택된 메시지 공격에 대해 안전하다는 전제 하에 모든 암호화 및 MAC 기능 쌍을 사용하여 무결성 및 기밀성 목표를 달성하도록 보장합니다. TLS는 인증 후 암호화라는 또 다른 방법을 사용합니다. 이 방법에서는 먼저 일반 텍스트에서 MAC을 계산한 다음 일반 텍스트와 MAC의 연결을 암호화합니다. 이 방법은 암호화 기능과 MAC 기능의 특정 조합에 대해 안전한 것으로 입증되었지만 일반적으로 안전하다고 보장할 수는 없습니다.
