"hash": |-
  cfbfcdd2713df3dea0a802de4b4bedc8a768618b6a8cbc35711a2a143d27ca0c
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     A TLS client that proposes ECC cipher suites in its ClientHello
     message SHOULD include these extensions.  Servers implementing ECC
     cipher suites MUST support these extensions, and when a client uses
     these extensions, servers MUST NOT negotiate the use of an ECC cipher
     suite unless they can complete the handshake while respecting the
     choice of curves specified by the client.  This eliminates the
     possibility that a negotiated ECC handshake will be subsequently
     aborted due to a client's inability to deal with the server's EC key.
"fixed": |-
  A TLS client that proposes ECC cipher suites in its ClientHello message SHOULD include these extensions.  Servers implementing ECC cipher suites MUST support these extensions, and when a client uses these extensions, servers MUST NOT negotiate the use of an ECC cipher suite unless they can complete the handshake while respecting the choice of curves specified by the client.  This eliminates the possibility that a negotiated ECC handshake will be subsequently aborted due to a client's inability to deal with the server's EC key.
"ko": |-
  ClientHello 메시지에 ECC 암호 그룹을 제안하는 TLS 클라이언트는 이러한 확장을 포함해야 합니다. ECC 암호 모음을 구현하는 서버는 이러한 확장을 지원해야 하며, 클라이언트가 이러한 확장을 사용할 때 서버는 클라이언트가 지정한 곡선 선택을 존중하면서 핸드셰이크를 완료할 수 없다면 ECC 암호 모음의 사용을 협상해서는 안 됩니다. 이렇게 하면 클라이언트가 서버의 EC 키를 처리할 수 없기 때문에 협상된 ECC 핸드셰이크가 이후에 중단될 가능성이 제거됩니다.
