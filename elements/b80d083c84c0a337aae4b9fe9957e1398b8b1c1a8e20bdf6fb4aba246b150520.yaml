"hash": |-
  b80d083c84c0a337aae4b9fe9957e1398b8b1c1a8e20bdf6fb4aba246b150520
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     A URI-reference is typically parsed first into the five URI
     components, in order to determine what components are present and
     whether the reference is relative.  Then, each component is parsed
     for its subparts and their validation.  The ABNF of URI-reference,
     along with the "first-match-wins" disambiguation rule, is sufficient
     to define a validating parser for the generic syntax.  Readers
     familiar with regular expressions should see Appendix B for an
     example of a non-validating URI-reference parser that will take any
     given string and extract the URI components.
"fixed": |-
  A URI-reference is typically parsed first into the five URI components, in order to determine what components are present and whether the reference is relative.  Then, each component is parsed for its subparts and their validation.  The ABNF of URI-reference, along with the "first-match-wins" disambiguation rule, is sufficient to define a validating parser for the generic syntax.  Readers familiar with regular expressions should see Appendix B for an example of a non-validating URI-reference parser that will take any given string and extract the URI components.
"ko": |-
  URI 참조는 일반적으로 어떤 구성 요소가 존재하는지, 참조가 상대적인지 여부를 결정하기 위해 먼저 5개의 URI 구성 요소로 구문 분석됩니다. 그런 다음 각 구성 요소는 해당 하위 부분과 유효성 검사를 위해 구문 분석됩니다. "first-match-wins" 명확성 규칙과 함께 URI 참조의 ABNF는 일반 구문에 대한 유효성 검사 파서를 정의하는 데 충분합니다. 정규식에 익숙한 독자는 주어진 문자열을 가져와 URI 구성 요소를 추출하는 비검증 URI 참조 구문 분석기의 예를 부록 B에서 확인해야 합니다.
