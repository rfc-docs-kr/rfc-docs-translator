"hash": |-
  0f2d6aecc670c9f4fedeab76e2d4f6dc33572b711e22554879348cebdaa0bba9
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     We propose to implement this solution by creating a language for
     console control.  This language, current named DEL, would be used by
     subsystem designers to specify what components are needed in a
     terminal and how the terminal is to respond to inputs from its
     keyboard, Lincoln Wand, etc.  Then, as a part of the initial protocol,
     the remote HOST would send to the local HOST, the source language text
     of the program which controls the console.  This program would have
     been by the subsystem designer in DEL, but will be compiled locally.
"fixed": |-
  We propose to implement this solution by creating a language for console control.  This language, current named DEL, would be used by subsystem designers to specify what components are needed in a terminal and how the terminal is to respond to inputs from its keyboard, Lincoln Wand, etc.  Then, as a part of the initial protocol, the remote HOST would send to the local HOST, the source language text of the program which controls the console.  This program would have been by the subsystem designer in DEL, but will be compiled locally.
"ko": |-
  우리는 콘솔 제어를 위한 언어를 만들어 이 솔루션을 구현할 것을 제안합니다. 현재 DEL로 명명된 이 언어는 하위 시스템 설계자가 터미널에 필요한 구성 요소와 터미널이 키보드, Lincoln Wand 등의 입력에 응답하는 방법을 지정하는 데 사용됩니다. 그런 다음 초기 프로토콜의 일부로, 원격 HOST는 콘솔을 제어하는 ​​프로그램의 소스 언어 텍스트인 로컬 HOST로 보냅니다. 이 프로그램은 DEL의 하위 시스템 디자이너가 만들었지만 로컬로 컴파일됩니다.
