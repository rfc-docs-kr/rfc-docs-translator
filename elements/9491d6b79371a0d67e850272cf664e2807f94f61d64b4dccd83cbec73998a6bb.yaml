"hash": |-
  9491d6b79371a0d67e850272cf664e2807f94f61d64b4dccd83cbec73998a6bb
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     There is a potential interoperability issue for this format.  It was
     named in RFC 2326 but never defined, even if used in examples that
     hint at the syntax.  This format matches the purpose and its syntax
     supports the examples provided.  However, it goes further by allowing
     UTF-8 in the value part; thus, usage of UTF-8 strings may not be
     supported.  However, as individual parameters are not defined, the
     implementing application needs to have out-of-band agreement or using
     feature tag anyway to determine if the endpoint supports the
     parameters.
"fixed": |-
  There is a potential interoperability issue for this format.  It was named in RFC 2326 but never defined, even if used in examples that hint at the syntax.  This format matches the purpose and its syntax supports the examples provided.  However, it goes further by allowing UTF-8 in the value part; thus, usage of UTF-8 strings may not be supported.  However, as individual parameters are not defined, the implementing application needs to have out-of-band agreement or using feature tag anyway to determine if the endpoint supports the parameters.
"ko": |-
  이 형식에는 잠재적인 상호 운용성 문제가 있습니다. RFC 2326에서 이름이 지정되었지만 구문을 암시하는 예제에 사용된 경우에도 정의되지 않았습니다. 이 형식은 목적과 일치하며 해당 구문은 제공된 예제를 지원합니다. 그러나 값 부분에서 UTF-8을 허용함으로써 더 나아갑니다. 따라서 UTF-8 문자열 사용이 지원되지 않을 수 있습니다. 그러나 개별 매개변수가 정의되지 않았으므로 구현 애플리케이션은 엔드포인트가 매개변수를 지원하는지 확인하기 위해 대역 외 합의를 갖거나 기능 태그를 사용해야 합니다.
