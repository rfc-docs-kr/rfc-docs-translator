"hash": |-
  fc2fc16ea82b29a78b84a9c9c4381ad95b4a5ec65ebfbc20c685b769e11d5f72
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The set of messages defined above can be used for live streaming as
     well.  In a pull-based model, a live streaming injector can announce
     the chunks it generates via HAVE messages, and peers can retrieve
     them via REQUEST messages.  Areas that need special attention are
     content authentication and chunk addressing (to achieve an infinite
     stream of chunks).
"fixed": |-
  The set of messages defined above can be used for live streaming as well.  In a pull-based model, a live streaming injector can announce the chunks it generates via HAVE messages, and peers can retrieve them via REQUEST messages.  Areas that need special attention are content authentication and chunk addressing (to achieve an infinite stream of chunks).
"ko": |-
  위에서 정의한 메시지 세트는 라이브 스트리밍에도 사용할 수 있습니다. 풀 기반 모델에서 라이브 스트리밍 인젝터는 HAVE 메시지를 통해 생성한 청크를 알릴 수 있으며 피어는 REQUEST 메시지를 통해 이를 검색할 수 있습니다. 특별한 주의가 필요한 영역은 콘텐츠 인증 및 청크 주소 지정(무한한 청크 스트림 달성)입니다.
