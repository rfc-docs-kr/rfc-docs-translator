"hash": |-
  482fea2d7ff2d6a578c4c4f8504713a6f593ac8ada42b42a0aa66b56d4a7bb54
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     1.  The amount of encrypted data possible in a single invocation is
         2^32-1 blocks of 64 bytes each, because of the size of the block
         counter field in the ChaCha20 block function.  This gives a total
         of 274,877,906,880 bytes, or nearly 256 GB.  This should be
         enough for traffic protocols such as IPsec and TLS, but may be
         too small for file and/or disk encryption.  For such uses, we can
         return to the original design, reduce the nonce to 64 bits, and
         use the integer at position 13 as the top 32 bits of a 64-bit
         block counter, increasing the total message size to over a
         million petabytes (1,180,591,620,717,411,303,360 bytes to be
         exact).
"fixed": |-
  1.  The amount of encrypted data possible in a single invocation is 2^32-1 blocks of 64 bytes each, because of the size of the block counter field in the ChaCha20 block function.  This gives a total of 274,877,906,880 bytes, or nearly 256 GB.  This should be enough for traffic protocols such as IPsec and TLS, but may be too small for file and/or disk encryption.  For such uses, we can return to the original design, reduce the nonce to 64 bits, and use the integer at position 13 as the top 32 bits of a 64-bit block counter, increasing the total message size to over a million petabytes (1,180,591,620,717,411,303,360 bytes to be exact).
"ko": |-
  1. 단일 호출에서 가능한 암호화된 데이터의 양은 ChaCha20 블록 함수의 블록 카운터 필드 크기로 인해 각각 64바이트의 2^32-1 블록입니다. 이는 총 274,877,906,880바이트 또는 거의 256GB를 제공합니다. 이는 IPsec 및 TLS와 같은 트래픽 프로토콜에는 충분하지만 파일 및/또는 디스크 암호화에는 너무 작을 수 있습니다. 이러한 용도로 원래 설계로 돌아가 nonce를 64비트로 줄이고 위치 13의 정수를 64비트 블록 카운터의 상위 32비트로 사용하여 전체 메시지 크기를 백만 페타바이트 이상으로 늘릴 수 있습니다( 정확히는 1,180,591,620,717,411,303,360바이트).
