"hash": |-
  cd6dace4457c639c5f8231bb312edf91918b39d412419558fa8b11e7b15d0d29
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
   *   message and 2**(n/2) to find any two messages with the same
   *   digest, when n is the digest size in bits.  Therefore, this
   *   algorithm can serve as a means of providing a
   *   "fingerprint" for a message.
   *
   * Portability Issues:
   *   SHA-384 and SHA-512 are defined in terms of 64-bit "words",
   *   but if USE_32BIT_ONLY is #defined, this code is implemented in
   *   terms of 32-bit "words".  This code uses <stdint.h> (included
   *   via "sha.h") to define the 64-, 32- and 8-bit unsigned integer
   *   types.  If your C compiler does not support 64-bit unsigned
   *   integers and you do not #define USE_32BIT_ONLY, this code is
   *   not appropriate.
   *
   * Caveats:
   *   SHA-384 and SHA-512 are designed to work with messages less
   *   than 2^128 bits long.  This implementation uses SHA384/512Input()
   *   to hash the bits that are a multiple of the size of an 8-bit
   *   octet, and then optionally uses SHA384/256FinalBits()
   *   to hash the final few bits of the input.
   *
   */
"fixed": |-
  *   message and 2**(n/2) to find any two messages with the same *   digest, when n is the digest size in bits.  Therefore, this *   algorithm can serve as a means of providing a *   "fingerprint" for a message. * * Portability Issues: *   SHA-384 and SHA-512 are defined in terms of 64-bit "words", *   but if USE_32BIT_ONLY is #defined, this code is implemented in *   terms of 32-bit "words".  This code uses <stdint.h> (included *   via "sha.h") to define the 64-, 32- and 8-bit unsigned integer *   types.  If your C compiler does not support 64-bit unsigned *   integers and you do not #define USE_32BIT_ONLY, this code is *   not appropriate. * * Caveats: *   SHA-384 and SHA-512 are designed to work with messages less *   than 2^128 bits long.  This implementation uses SHA384/512Input() *   to hash the bits that are a multiple of the size of an 8-bit *   octet, and then optionally uses SHA384/256FinalBits() *   to hash the final few bits of the input. * */
"ko": |-
  * message 및 2**(n/2) - 동일한 다이제스트가 있는 두 개의 메시지를 * 찾습니다. 여기서 n은 다이제스트 크기(비트)입니다. 따라서 이 * 알고리즘은 메시지에 * "지문"을 제공하는 수단으로 사용될 수 있습니다. * * 이식성 문제: * SHA-384 및 SHA-512는 64비트 "단어"로 정의되지만 * USE_32BIT_ONLY가 #정의된 경우 이 코드는 32비트 "단어"로 * 구현됩니다. 이 코드는 <stdint.h>("sha.h"를 통해 * 포함됨)를 사용하여 64비트, 32비트 및 8비트 부호 없는 정수 * 유형을 정의합니다. C 컴파일러가 64비트 부호 없는 * 정수를 지원하지 않고 USE_32BIT_ONLY를 #define하지 않으면 이 코드는 적합하지 않습니다. * * 주의 사항: * SHA-384 및 SHA-512는 길이가 2^128비트 미만인 * 메시지에서 작동하도록 설계되었습니다. 이 구현에서는 SHA384/512Input() *을 사용하여 8비트 옥텟 크기의 배수인 비트를 해시한 다음 선택적으로 SHA384/256FinalBits() *를 사용하여 입력의 마지막 몇 비트를 해시합니다. * */
