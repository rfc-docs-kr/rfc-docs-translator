"hash": |-
  63ae01b6dc3bcb62e5eadc701a618a8f876e282050e4154b291983b1ed961c01
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     For historical reasons and in order to avoid a profligate consumption
     of reserved port numbers, application protocols that are secured by
     TLS 1.1, TLS 1.0, SSL 3.0, and SSL 2.0 all frequently share the same
     connection port.  For example, the https protocol (HTTP secured by
     SSL or TLS) uses port 443 regardless of which security protocol it is
     using.  Thus, some mechanism must be determined to distinguish and
     negotiate among the various protocols.
"fixed": |-
  For historical reasons and in order to avoid a profligate consumption of reserved port numbers, application protocols that are secured by TLS 1.1, TLS 1.0, SSL 3.0, and SSL 2.0 all frequently share the same connection port.  For example, the https protocol (HTTP secured by SSL or TLS) uses port 443 regardless of which security protocol it is using.  Thus, some mechanism must be determined to distinguish and negotiate among the various protocols.
"ko": |-
  역사적 이유와 예약된 포트 번호의 과도한 사용을 피하기 위해 TLS 1.1, TLS 1.0, SSL 3.0 및 SSL 2.0으로 보호되는 애플리케이션 프로토콜은 모두 동일한 연결 포트를 공유하는 경우가 많습니다. 예를 들어, https 프로토콜(SSL 또는 TLS로 보호되는 HTTP)은 사용 중인 보안 프로토콜에 관계없이 포트 443을 사용합니다. 따라서 다양한 프로토콜을 구별하고 협상하려면 일부 메커니즘을 결정해야 합니다.
