"hash": |-
  277ac5fb7a61de6be22ff7c27081140a5561751f582ef71e2b70fdbdd04b284b
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     RSTs represent a hazard to TCP, especially when completely
     unvalidated.  Fortunately, there are a number of obfuscation
     mechanisms that make it difficult for off-path third parties to forge
     (spoof) valid RSTs, as noted earlier.  We have already shown it is
     easy to learn both endpoint addresses and ports for some protocols,
     notably BGP.  The final obfuscation is the segment sequence number.
"fixed": |-
  RSTs represent a hazard to TCP, especially when completely unvalidated.  Fortunately, there are a number of obfuscation mechanisms that make it difficult for off-path third parties to forge (spoof) valid RSTs, as noted earlier.  We have already shown it is easy to learn both endpoint addresses and ports for some protocols, notably BGP.  The final obfuscation is the segment sequence number.
"ko": |-
  RST는 특히 완전히 검증되지 않은 경우 TCP에 위험을 나타냅니다. 다행히 앞서 언급한 것처럼 경로를 벗어난 제3자가 유효한 RST를 위조(스푸핑)하는 것을 어렵게 만드는 여러 가지 난독화 메커니즘이 있습니다. 우리는 이미 일부 프로토콜, 특히 BGP의 경우 엔드포인트 주소와 포트를 모두 쉽게 배울 수 있다는 것을 보여주었습니다. 최종 난독화는 세그먼트 시퀀스 번호입니다.
