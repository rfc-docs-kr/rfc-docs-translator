"hash": |-
  846132c432d31e15dbf11f8b5982772fc5d4f9361627313e6f35db9ed10a5548
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
           Software should be written to deal with every conceivable
           error, no matter how unlikely; sooner or later a packet will
           come in with that particular combination of errors and
           attributes, and unless the software is prepared, chaos can
           ensue.  In general, it is best to assume that the network is
           filled with malevolent entities that will send in packets
           designed to have the worst possible effect.  This assumption
           will lead to suitable protective design, although the most
           serious problems in the Internet have been caused by
           unenvisaged mechanisms triggered by low-probability events;
"fixed": |-
  - Software should be written to deal with every conceivable error, no matter how unlikely; sooner or later a packet will come in with that particular combination of errors and attributes, and unless the software is prepared, chaos can ensue.  In general, it is best to assume that the network is filled with malevolent entities that will send in packets designed to have the worst possible effect.  This assumption will lead to suitable protective design, although the most serious problems in the Internet have been caused by unenvisaged mechanisms triggered by low-probability events;
"ko": |-
  - 소프트웨어는 아무리 가능성이 낮더라도 발생할 수 있는 모든 오류를 처리하도록 작성되어야 합니다. 조만간 특정 오류와 속성의 조합이 포함된 패킷이 수신될 것이며, 소프트웨어가 준비되지 않으면 혼란이 뒤따를 수 있습니다. 일반적으로 네트워크는 최악의 영향을 미치도록 설계된 패킷을 보내는 악의적인 개체로 가득 차 있다고 가정하는 것이 가장 좋습니다. 이러한 가정은 적절한 보호 설계로 이어질 것입니다. 그러나 인터넷에서 가장 심각한 문제는 확률이 낮은 이벤트로 인해 발생하는 예상치 못한 메커니즘으로 인해 발생했습니다.
