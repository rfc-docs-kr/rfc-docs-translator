"hash": |-
  7ed381bab2d7d6759ca9386a48fee54770ce553aca114cba525e6fd0643d16dc
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     One potential attack on this scheme is for the attacker to collect a
     number of cookies from different addresses and then reuse them to
     attack the server.  The server can defend against this attack by
     changing the Secret value frequently, thus invalidating those
     cookies.  If the server wishes that legitimate clients be able to
     handshake through the transition (e.g., they received a cookie with
     Secret 1 and then sent the second ClientHello after the server has
     changed to Secret 2), the server can have a limited window during
     which it accepts both secrets.  [IKEv2] suggests adding a version
     number to cookies to detect this case.  An alternative approach is
     simply to try verifying with both secrets.
"fixed": |-
  One potential attack on this scheme is for the attacker to collect a number of cookies from different addresses and then reuse them to attack the server.  The server can defend against this attack by changing the Secret value frequently, thus invalidating those cookies.  If the server wishes that legitimate clients be able to handshake through the transition (e.g., they received a cookie with Secret 1 and then sent the second ClientHello after the server has changed to Secret 2), the server can have a limited window during which it accepts both secrets.  [IKEv2] suggests adding a version number to cookies to detect this case.  An alternative approach is simply to try verifying with both secrets.
"ko": |-
  이 체계에 대한 잠재적인 공격 중 하나는 공격자가 여러 주소에서 여러 쿠키를 수집한 다음 이를 재사용하여 서버를 공격하는 것입니다. 서버는 Secret 값을 자주 변경하여 해당 쿠키를 무효화함으로써 이 공격을 방어할 수 있습니다. 서버가 합법적인 클라이언트가 전환을 통해 핸드셰이크할 수 있기를 원하는 경우(예: Secret 1이 포함된 쿠키를 수신한 다음 서버가 Secret 2로 변경된 후 두 번째 ClientHello를 전송함) 서버는 해당 클라이언트가 작동하는 동안 제한된 창을 가질 수 있습니다. 두 비밀을 모두 받아들입니다. [IKEv2]에서는 이 경우를 감지하기 위해 쿠키에 버전 번호를 추가할 것을 제안합니다. 다른 접근 방식은 단순히 두 비밀을 모두 확인하는 것입니다.
