"hash": |-
  86eac9b7f12eae6a1a6205ea0d173b269a6f85ac8a83d3617827c7bc7701c370
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     One of the most common operations on URIs is simple comparison:
     determining whether two URIs are equivalent without using the URIs to
     access their respective resource(s).  A comparison is performed every
     time a response cache is accessed, a browser checks its history to
     color a link, or an XML parser processes tags within a namespace.
     Extensive normalization prior to comparison of URIs is often used by
     spiders and indexing engines to prune a search space or to reduce
     duplication of request actions and response storage.
"fixed": |-
  One of the most common operations on URIs is simple comparison: determining whether two URIs are equivalent without using the URIs to access their respective resource(s).  A comparison is performed every time a response cache is accessed, a browser checks its history to color a link, or an XML parser processes tags within a namespace. Extensive normalization prior to comparison of URIs is often used by spiders and indexing engines to prune a search space or to reduce duplication of request actions and response storage.
"ko": |-
  URI에 대한 가장 일반적인 작업 중 하나는 단순 비교입니다. 즉, 해당 리소스에 액세스하기 위해 URI를 사용하지 않고 두 URI가 동일한지 확인하는 것입니다. 응답 캐시에 액세스할 때마다 비교가 수행되고, 브라우저는 기록을 확인하여 링크 색상을 지정하거나, XML 파서가 네임스페이스 내의 태그를 처리합니다. URI 비교 전 광범위한 정규화는 검색 공간을 정리하거나 요청 작업 및 응답 저장의 중복을 줄이기 위해 스파이더 및 인덱싱 엔진에서 자주 사용됩니다.
