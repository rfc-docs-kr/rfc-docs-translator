"hash": |-
  cc02f128ccf08bb78b475859a2a0a74353616c4a0bd75c6c1bebc055a5e6f533
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In general, note that the hash function is used in a hash tree, which
     makes it more complex to create collisions.  In particular, if
     attackers manage to find a collision for a hash, it can replace just
     one chunk, so the impact is limited.  If fixed-size chunks are used,
     the collision even has to be of the same size as the original chunk.
     For hashes higher up in the hash tree, a collision must be a
     concatenation of two hashes.  In sum, finding collisions that fit
     with the hash tree are generally harder to find than regular
     collisions.
"fixed": |-
  In general, note that the hash function is used in a hash tree, which makes it more complex to create collisions.  In particular, if attackers manage to find a collision for a hash, it can replace just one chunk, so the impact is limited.  If fixed-size chunks are used, the collision even has to be of the same size as the original chunk. For hashes higher up in the hash tree, a collision must be a concatenation of two hashes.  In sum, finding collisions that fit with the hash tree are generally harder to find than regular collisions.
"ko": |-
  일반적으로 해시 함수는 해시 트리에서 사용되므로 충돌 생성이 더 복잡해집니다. 특히 공격자가 해시에 대한 충돌을 찾아낸 경우 하나의 청크만 교체할 수 있으므로 영향이 제한됩니다. 고정 크기 청크를 사용하는 경우 충돌은 원래 청크와 동일한 크기여야 합니다. 해시 트리에서 상위에 있는 해시의 경우 충돌은 두 해시의 연결이어야 합니다. 요약하자면, 해시 트리에 맞는 충돌을 찾는 것은 일반적으로 일반 충돌보다 찾기가 더 어렵습니다.
