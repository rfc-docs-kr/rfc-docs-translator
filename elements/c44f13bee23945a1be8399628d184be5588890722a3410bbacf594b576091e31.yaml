"hash": |-
  c44f13bee23945a1be8399628d184be5588890722a3410bbacf594b576091e31
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Because URIs exist to identify resources, presumably they should be
     considered equivalent when they identify the same resource.  However,
     this definition of equivalence is not of much practical use, as there
     is no way for an implementation to compare two resources unless it
     has full knowledge or control of them.  For this reason,
     determination of equivalence or difference of URIs is based on string
     comparison, perhaps augmented by reference to additional rules
     provided by URI scheme definitions.  We use the terms "different" and
     "equivalent" to describe the possible outcomes of such comparisons,
     but there are many application-dependent versions of equivalence.
"fixed": |-
  Because URIs exist to identify resources, presumably they should be considered equivalent when they identify the same resource.  However, this definition of equivalence is not of much practical use, as there is no way for an implementation to compare two resources unless it has full knowledge or control of them.  For this reason, determination of equivalence or difference of URIs is based on string comparison, perhaps augmented by reference to additional rules provided by URI scheme definitions.  We use the terms "different" and "equivalent" to describe the possible outcomes of such comparisons, but there are many application-dependent versions of equivalence.
"ko": |-
  URI는 리소스를 식별하기 위해 존재하기 때문에 아마도 동일한 리소스를 식별할 때 동등한 것으로 간주되어야 합니다. 그러나 이러한 동등성의 정의는 구현이 두 리소스에 대해 완전히 알고 있거나 제어하지 않는 한 두 리소스를 비교할 수 있는 방법이 없기 때문에 실제로 많이 사용되지 않습니다. 이러한 이유로 URI의 동등성 또는 차이점에 대한 결정은 문자열 비교를 기반으로 하며 아마도 URI 체계 정의에서 제공하는 추가 규칙을 참조하여 보강될 수 있습니다. 이러한 비교의 가능한 결과를 설명하기 위해 "다른" 및 "동등한"이라는 용어를 사용하지만, 응용 프로그램에 따른 동등성 버전이 많이 있습니다.
