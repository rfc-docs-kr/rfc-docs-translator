"hash": |-
  2bf00794f74d4a73e67589c7a0ae1f91405a5c46dfa31a2d1428fb5634541c89
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     If an exporter is used, then it produces values which are unique and
     secret (because they are generated from a unique session key).
     Exporters computed with different labels and contexts are
     computationally independent, so it is not feasible to compute one
     from another or the session secret from the exported value.
     Note: Exporters can produce arbitrary-length values; if exporters are
     to be used as channel bindings, the exported value MUST be large
     enough to provide collision resistance.  The exporters provided in
     TLS 1.3 are derived from the same Handshake Contexts as the early
     traffic keys and the application traffic keys, respectively, and thus
     have similar security properties.  Note that they do not include the
     client's certificate; future applications which wish to bind to the
     client's certificate may need to define a new exporter that includes
     the full handshake transcript.
"fixed": |-
  If an exporter is used, then it produces values which are unique and secret (because they are generated from a unique session key). Exporters computed with different labels and contexts are computationally independent, so it is not feasible to compute one from another or the session secret from the exported value. Note: Exporters can produce arbitrary-length values; if exporters are to be used as channel bindings, the exported value MUST be large enough to provide collision resistance.  The exporters provided in TLS 1.3 are derived from the same Handshake Contexts as the early traffic keys and the application traffic keys, respectively, and thus have similar security properties.  Note that they do not include the client's certificate; future applications which wish to bind to the client's certificate may need to define a new exporter that includes the full handshake transcript.
"ko": |-
  내보내기를 사용하면 고유하고 비밀스러운 값이 생성됩니다(고유한 세션 키에서 생성되기 때문입니다). 서로 다른 레이블과 컨텍스트로 계산된 내보내기는 계산적으로 독립적이므로 내보낸 값에서 세션 암호를 계산하거나 다른 레이블에서 계산하는 것은 불가능합니다. 참고: 내보내기에서는 임의 길이의 값을 생성할 수 있습니다. 내보내기를 채널 바인딩으로 사용하려면 내보낸 값이 충돌 저항을 제공할 만큼 충분히 커야 합니다. TLS 1.3에서 제공되는 내보내기는 각각 초기 트래픽 키 및 애플리케이션 트래픽 키와 동일한 Handshake Context에서 파생되므로 유사한 보안 속성을 갖습니다. 여기에는 클라이언트의 인증서가 포함되어 있지 않습니다. 클라이언트의 인증서에 바인딩하려는 향후 애플리케이션은 전체 핸드셰이크 기록을 포함하는 새로운 내보내기를 정의해야 할 수도 있습니다.
