"hash": |-
  a4f6ab3b7e6114667b2af1c8bcbde1ec0891626c4742cfb7362e0d1f984cc0f7
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     To use this authentication mechanism, the client MUST possess a
     certificate containing an ECDH-capable public key, and that
     certificate MUST be signed with ECDSA.  Furthermore, the client's
     ECDH key MUST be on the same elliptic curve as the server's long-term
     (certified) ECDH key.  This might limit use of this mechanism to
     closed environments.  In situations where the client has an ECC key
     on a different curve, it would have to authenticate using either
     ECDSA_sign or a non-ECC mechanism (e.g., RSA).  Using fixed ECDH for
     both servers and clients is computationally more efficient than
     mechanisms providing forward secrecy.
"fixed": |-
  To use this authentication mechanism, the client MUST possess a certificate containing an ECDH-capable public key, and that certificate MUST be signed with ECDSA.  Furthermore, the client's ECDH key MUST be on the same elliptic curve as the server's long-term (certified) ECDH key.  This might limit use of this mechanism to closed environments.  In situations where the client has an ECC key on a different curve, it would have to authenticate using either ECDSA_sign or a non-ECC mechanism (e.g., RSA).  Using fixed ECDH for both servers and clients is computationally more efficient than mechanisms providing forward secrecy.
"ko": |-
  이 인증 메커니즘을 사용하려면 클라이언트는 ECDH 가능 공개 키가 포함된 인증서를 보유해야 하며 해당 인증서는 ECDSA로 서명되어야 합니다. 또한 클라이언트의 ECDH 키는 서버의 장기(인증된) ECDH 키와 동일한 타원 곡선 상에 있어야 합니다. 이로 인해 이 메커니즘의 사용이 폐쇄된 환경으로 제한될 수 있습니다. 클라이언트가 다른 곡선에 ECC 키를 가지고 있는 상황에서는 ECDSA_sign 또는 비 ECC 메커니즘(예: RSA)을 사용하여 인증해야 합니다. 서버와 클라이언트 모두에 고정 ECDH를 사용하는 것은 순방향 보안을 제공하는 메커니즘보다 계산적으로 더 효율적입니다.
