"hash": |-
  fcfd9a3c2e43fe00fa06e8ff6300c79177ae3fe9be363298a895fbcd045310f2
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     4.  If using the JWS Compact Serialization, let the JOSE Header be
         the JWS Protected Header.  Otherwise, when using the JWS JSON
         Serialization, let the JOSE Header be the union of the members of
         the corresponding JWS Protected Header and JWS Unprotected
         Header, all of which must be completely valid JSON objects.
         During this step, verify that the resulting JOSE Header does not
         contain duplicate Header Parameter names.  When using the JWS
"fixed": |-
  1.  If using the JWS Compact Serialization, let the JOSE Header be the JWS Protected Header.  Otherwise, when using the JWS JSON Serialization, let the JOSE Header be the union of the members of the corresponding JWS Protected Header and JWS Unprotected Header, all of which must be completely valid JSON objects. During this step, verify that the resulting JOSE Header does not contain duplicate Header Parameter names.  When using the JWS
"ko": |-
  1. JWS Compact Serialization을 사용하는 경우 JOSE 헤더를 JWS 보호 헤더로 설정합니다. 그렇지 않은 경우 JWS JSON Serialization을 사용하는 경우 JOSE 헤더를 해당 JWS 보호 헤더와 JWS 보호되지 않은 헤더의 멤버의 합집합으로 설정합니다. 이 모든 멤버는 완전히 유효한 JSON 객체여야 합니다. 이 단계에서 결과 JOSE 헤더에 중복된 헤더 매개변수 이름이 포함되지 않았는지 확인합니다. JWS를 사용하는 경우
