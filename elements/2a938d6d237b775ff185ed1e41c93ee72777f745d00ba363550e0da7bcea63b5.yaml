"hash": |-
  2a938d6d237b775ff185ed1e41c93ee72777f745d00ba363550e0da7bcea63b5
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Currently, the most common approach is to use SSL or its successor
     TLS.  They provide channel security for a TCP connection at the
     application level.  That is, they run over TCP.  SSL implementations
     typically provide a Berkeley Sockets-like interface for easy
     programming.  The primary issue when designing a protocol solution
     around TLS is to differentiate between connections protected using
     TLS and those which are not.
"fixed": |-
  Currently, the most common approach is to use SSL or its successor TLS.  They provide channel security for a TCP connection at the application level.  That is, they run over TCP.  SSL implementations typically provide a Berkeley Sockets-like interface for easy programming.  The primary issue when designing a protocol solution around TLS is to differentiate between connections protected using TLS and those which are not.
"ko": |-
  현재 가장 일반적인 접근 방식은 SSL 또는 그 후속 TLS를 사용하는 것입니다. 이는 애플리케이션 수준에서 TCP 연결에 대한 채널 보안을 제공합니다. 즉, TCP를 통해 실행됩니다. SSL 구현은 일반적으로 쉬운 프로그래밍을 위해 Berkeley 소켓과 유사한 인터페이스를 제공합니다. TLS를 중심으로 프로토콜 솔루션을 설계할 때 주요 문제는 TLS를 사용하여 보호되는 연결과 그렇지 않은 연결을 구별하는 것입니다.
