"hash": |-
  1d71196f4dfe7003a1255cbe0543d36701d359c8b701afa366518b6d9f6dfff5
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        For each SYN-ACK that is sent, the TCP process in host 2 needs
        some memory space to store state information while waiting for the
        matching ACK to be returned. If the matching ACK never arrives at
        host 2, a timer associated with the pending SYN-ACK will
        eventually expire and release the space. But if host 1 (or a
        cooperating group of hosts) can rapidly send many SYNs to host 2,
        host 2 will need to store state information for many pending SYN-
        ACKs and may run out of space. This can prevent host 2 from
        responding to legitimate connection requests from other hosts or
        even, if there are flaws in host 2's TCP implementation, crash
        when the available space is exhausted.
"fixed": |-
  - For each SYN-ACK that is sent, the TCP process in host 2 needs some memory space to store state information while waiting for the matching ACK to be returned. If the matching ACK never arrives at host 2, a timer associated with the pending SYN-ACK will eventually expire and release the space. But if host 1 (or a cooperating group of hosts) can rapidly send many SYNs to host 2, host 2 will need to store state information for many pending SYN- ACKs and may run out of space. This can prevent host 2 from responding to legitimate connection requests from other hosts or even, if there are flaws in host 2's TCP implementation, crash when the available space is exhausted.
"ko": |-
  - 전송된 각 SYN-ACK에 대해 호스트 2의 TCP 프로세스는 일치하는 ACK가 반환되기를 기다리는 동안 상태 정보를 저장할 메모리 공간이 필요합니다. 일치하는 ACK가 호스트 2에 도착하지 않으면 보류 중인 SYN-ACK와 연결된 타이머가 결국 만료되어 공간을 해제합니다. 그러나 호스트 1(또는 호스트 협력 그룹)이 호스트 2에 많은 SYN을 신속하게 보낼 수 있는 경우 호스트 2는 보류 중인 많은 SYN-ACK에 대한 상태 정보를 저장해야 하며 공간이 부족할 수 있습니다. 이는 호스트 2가 다른 호스트의 합법적인 연결 요청에 응답하는 것을 방지할 수 있으며, 심지어 호스트 2의 TCP 구현에 결함이 있는 경우 사용 가능한 공간이 고갈되면 충돌이 발생할 수도 있습니다.
