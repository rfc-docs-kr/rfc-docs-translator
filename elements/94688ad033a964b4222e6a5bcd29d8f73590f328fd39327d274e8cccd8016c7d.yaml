"hash": |-
  94688ad033a964b4222e6a5bcd29d8f73590f328fd39327d274e8cccd8016c7d
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Example: A password-based access control mechanism might protect
        against capture or accidental disclosure of its password file by
        applying a one-way encryption algorithm to passwords before
        storing them in the file. To increase the difficulty of off-line,
        dictionary attacks that match encrypted values of potential
        passwords against a copy of the password file, the mechanism can
        concatenate each password with its own random salt value before
        applying the one-way function.
"fixed": |-
  - Example: A password-based access control mechanism might protect against capture or accidental disclosure of its password file by applying a one-way encryption algorithm to passwords before storing them in the file. To increase the difficulty of off-line, dictionary attacks that match encrypted values of potential passwords against a copy of the password file, the mechanism can concatenate each password with its own random salt value before applying the one-way function.
"ko": |-
  - 예: 비밀번호 기반 액세스 제어 메커니즘은 비밀번호를 파일에 저장하기 전에 단방향 암호화 알고리즘을 비밀번호에 적용하여 비밀번호 파일이 캡처되거나 우발적으로 공개되는 것을 방지할 수 있습니다. 잠재적인 비밀번호의 암호화된 값을 비밀번호 파일의 복사본과 일치시키는 오프라인 사전 공격의 난이도를 높이기 위해 메커니즘은 단방향 기능을 적용하기 전에 각 비밀번호를 자체 임의의 솔트 값과 연결할 수 있습니다.
