"hash": |-
  45ebbc080a4539d2a0a500484eade89c53f8f6170596e8186d7cc2024c76150a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     As a result, even though SDP has the expressiveness to describe
     unicast sessions, it is missing the semantics and operational details
     of how it is actually done.  In this document, we remedy that by
     defining a simple offer/answer model based on SDP.  In this model,
     one participant in the session generates an SDP message that
     constitutes the offer - the set of media streams and codecs the
     offerer wishes to use, along with the IP addresses and ports the
     offerer would like to use to receive the media.  The offer is
"fixed": |-
  As a result, even though SDP has the expressiveness to describe unicast sessions, it is missing the semantics and operational details of how it is actually done.  In this document, we remedy that by defining a simple offer/answer model based on SDP.  In this model, one participant in the session generates an SDP message that constitutes the offer - the set of media streams and codecs the offerer wishes to use, along with the IP addresses and ports the offerer would like to use to receive the media.  The offer is
"ko": |-
  결과적으로 SDP는 유니캐스트 세션을 설명할 수 있는 표현력이 있지만 실제로 어떻게 수행되는지에 대한 의미론과 운영 세부 사항이 없습니다. 이 문서에서는 SDP를 기반으로 하는 간단한 제안/답변 모델을 정의하여 이를 해결합니다. 이 모델에서 세션의 한 참가자는 제안을 구성하는 SDP 메시지를 생성합니다. 제안자는 미디어 스트림과 코덱 세트와 함께 제안자가 미디어를 수신하는 데 사용하고자 하는 IP 주소와 포트를 사용합니다. 제안은
