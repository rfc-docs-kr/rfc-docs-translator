"hash": |-
  8cf7697ab817393356b4994c6bea49c96f1e8c3dcd358e082d79299f36a2759a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     2. The implementation reads a retransmitted flight from the peer: the
        implementation transitions to the SENDING state, where it
        retransmits the flight, resets the retransmit timer, and returns
        to the WAITING state.  The rationale here is that the receipt of a
        duplicate message is the likely result of timer expiry on the peer
        and therefore suggests that part of one's previous flight was
        lost.
"fixed": |-
  1. The implementation reads a retransmitted flight from the peer: the implementation transitions to the SENDING state, where it retransmits the flight, resets the retransmit timer, and returns to the WAITING state.  The rationale here is that the receipt of a duplicate message is the likely result of timer expiry on the peer and therefore suggests that part of one's previous flight was lost.
"ko": |-
  1. 구현은 피어로부터 재전송된 항공편을 읽습니다. 구현은 SENDING 상태로 전환되어 항공편을 재전송하고 재전송 타이머를 재설정한 다음 WAITING 상태로 돌아갑니다. 여기서의 이론적 근거는 중복 메시지 수신이 피어의 타이머 만료로 인한 결과일 가능성이 높으며 따라서 이전 비행의 일부가 손실되었음을 암시한다는 것입니다.
