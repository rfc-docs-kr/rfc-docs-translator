"hash": |-
  503aab9aa279955d9beb92e2bd7530a64c4968584488b3749ae6db8fc08f0e90
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Informally, TLS 1.3 provides these properties by AEAD-protecting the
     plaintext with a strong key.  AEAD encryption [RFC5116] provides
     confidentiality and integrity for the data.  Non-replayability is
     provided by using a separate nonce for each record, with the nonce
     being derived from the record sequence number (Section 5.3), with the
     sequence number being maintained independently at both sides; thus,
     records which are delivered out of order result in AEAD deprotection
     failures.  In order to prevent mass cryptanalysis when the same
     plaintext is repeatedly encrypted by different users under the same
     key (as is commonly the case for HTTP), the nonce is formed by mixing
"fixed": |-
  Informally, TLS 1.3 provides these properties by AEAD-protecting the plaintext with a strong key.  AEAD encryption [RFC5116] provides confidentiality and integrity for the data.  Non-replayability is provided by using a separate nonce for each record, with the nonce being derived from the record sequence number (Section 5.3), with the sequence number being maintained independently at both sides; thus, records which are delivered out of order result in AEAD deprotection failures.  In order to prevent mass cryptanalysis when the same plaintext is repeatedly encrypted by different users under the same key (as is commonly the case for HTTP), the nonce is formed by mixing
"ko": |-
  비공식적으로 TLS 1.3은 강력한 키로 일반 텍스트를 AEAD로 보호하여 이러한 속성을 제공합니다. AEAD 암호화 [RFC5116]는 데이터에 대한 기밀성과 무결성을 제공합니다. 재생 불가능성은 각 레코드에 대해 별도의 nonce를 사용하여 제공됩니다. nonce는 레코드 시퀀스 번호(섹션 5.3)에서 파생되고 시퀀스 번호는 양쪽에서 독립적으로 유지됩니다. 따라서 순서에 맞지 않게 전달된 레코드는 AEAD 보호 해제 실패를 초래합니다. 동일한 일반 텍스트가 동일한 키로 다른 사용자에 의해 반복적으로 암호화되는 경우(일반적으로 HTTP의 경우) 대량 암호 분석을 방지하기 위해 nonce는 다음을 혼합하여 형성됩니다.
