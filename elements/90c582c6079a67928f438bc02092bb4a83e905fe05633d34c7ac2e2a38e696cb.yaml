"hash": |-
  90c582c6079a67928f438bc02092bb4a83e905fe05633d34c7ac2e2a38e696cb
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Although many URI schemes are named after protocols, this does not
     imply that use of these URIs will result in access to the resource
     via the named protocol.  URIs are often used simply for the sake of
     identification.  Even when a URI is used to retrieve a representation
     of a resource, that access might be through gateways, proxies,
     caches, and name resolution services that are independent of the
     protocol associated with the scheme name.  The resolution of some
     URIs may require the use of more than one protocol (e.g., both DNS
     and HTTP are typically used to access an "http" URI's origin server
     when a representation isn't found in a local cache).
"fixed": |-
  Although many URI schemes are named after protocols, this does not imply that use of these URIs will result in access to the resource via the named protocol.  URIs are often used simply for the sake of identification.  Even when a URI is used to retrieve a representation of a resource, that access might be through gateways, proxies, caches, and name resolution services that are independent of the protocol associated with the scheme name.  The resolution of some URIs may require the use of more than one protocol (e.g., both DNS and HTTP are typically used to access an "http" URI's origin server when a representation isn't found in a local cache).
"ko": |-
  많은 URI 체계가 프로토콜 이름을 따서 명명되었지만 이것이 이러한 URI를 사용하면 명명된 프로토콜을 통해 리소스에 액세스한다는 의미는 아닙니다. URI는 단순히 식별을 위해 사용되는 경우가 많습니다. URI를 사용하여 리소스 표현을 검색하는 경우에도 해당 액세스는 체계 이름과 연결된 프로토콜과 독립적인 게이트웨이, 프록시, 캐시 및 이름 확인 서비스를 통해 이루어질 수 있습니다. 일부 URI를 확인하려면 둘 이상의 프로토콜을 사용해야 할 수 있습니다(예: 로컬 캐시에서 표현을 찾을 수 없을 때 "http" URI의 원본 서버에 액세스하는 데 일반적으로 DNS와 HTTP가 모두 사용됩니다).
