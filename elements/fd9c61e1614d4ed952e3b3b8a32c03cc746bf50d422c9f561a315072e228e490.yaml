"hash": |-
  fd9c61e1614d4ed952e3b3b8a32c03cc746bf50d422c9f561a315072e228e490
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     If no provisional response has been received, the CANCEL request MUST
     NOT be sent; rather, the client MUST wait for the arrival of a
     provisional response before sending the request.  If the original
     request has generated a final response, the CANCEL SHOULD NOT be
     sent, as it is an effective no-op, since CANCEL has no effect on
     requests that have already generated a final response.  When the
     client decides to send the CANCEL, it creates a client transaction
     for the CANCEL and passes it the CANCEL request along with the
     destination address, port, and transport.  The destination address,
     port, and transport for the CANCEL MUST be identical to those used to
     send the original request.
"fixed": |-
  If no provisional response has been received, the CANCEL request MUST NOT be sent; rather, the client MUST wait for the arrival of a provisional response before sending the request.  If the original request has generated a final response, the CANCEL SHOULD NOT be sent, as it is an effective no-op, since CANCEL has no effect on requests that have already generated a final response.  When the client decides to send the CANCEL, it creates a client transaction for the CANCEL and passes it the CANCEL request along with the destination address, port, and transport.  The destination address, port, and transport for the CANCEL MUST be identical to those used to send the original request.
"ko": |-
  임시 응답이 수신되지 않은 경우 CANCEL 요청을 보내서는 안 됩니다. 오히려 클라이언트는 요청을 보내기 전에 임시 응답이 도착할 때까지 기다려야 합니다. 원래 요청이 최종 응답을 생성한 경우 CANCEL은 전송되어서는 안 됩니다. CANCEL은 이미 최종 응답을 생성한 요청에 영향을 주지 않기 때문에 효과적인 무작동(no-op)이기 때문입니다. 클라이언트가 CANCEL을 보내기로 결정하면 CANCEL에 대한 클라이언트 트랜잭션을 생성하고 대상 주소, 포트 및 전송과 함께 CANCEL 요청을 전달합니다. CANCEL의 대상 주소, 포트 및 전송은 원래 요청을 보내는 데 사용된 것과 동일해야 합니다.
