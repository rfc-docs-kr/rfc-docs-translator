"hash": |-
  7f9adfaa645013f85daf5afaf43fc9acd1f22dfc59c403a13a1d468b60488b9c
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     RTSP is quite a versatile protocol that supports extensions in many
     different directions.  Even this core specification contains several
     blocks of functionality that are optional to implement.  The use case
     and need for the protocol deployment should determine what parts are
     implemented.  Allowing for extensions makes it possible for RTSP to
     address additional use cases.  However, extensions will affect the
     interoperability of the protocol; therefore, it is important that
     they can be added in a structured way.
"fixed": |-
  RTSP is quite a versatile protocol that supports extensions in many different directions.  Even this core specification contains several blocks of functionality that are optional to implement.  The use case and need for the protocol deployment should determine what parts are implemented.  Allowing for extensions makes it possible for RTSP to address additional use cases.  However, extensions will affect the interoperability of the protocol; therefore, it is important that they can be added in a structured way.
"ko": |-
  RTSP는 다양한 방향의 확장을 지원하는 매우 다재다능한 프로토콜입니다. 이 핵심 사양에도 선택적으로 구현할 수 있는 여러 기능 블록이 포함되어 있습니다. 프로토콜 배포에 대한 사용 사례와 필요성에 따라 구현되는 부분이 결정되어야 합니다. 확장을 허용하면 RTSP가 추가 사용 사례를 처리할 수 있습니다. 그러나 확장은 프로토콜의 상호 운용성에 영향을 미칩니다. 따라서 구조화된 방식으로 추가할 수 있는 것이 중요합니다.
