"hash": |-
  4fa03a116bf8b245613654da81b79117fea1a936125e1f58f3a1b37d0e7e28b3
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     If the synthesizer and recognizer resources are part of the same
     MRCPv2 session, they can be optimized for a quicker kill-on-barge-in
     response if the recognizer and synthesizer interact directly.  In
     these cases, the client MUST still react to a START-OF-INPUT event
     from the recognizer by invoking the BARGE-IN-OCCURRED method to the
     synthesizer.  The client MUST invoke the BARGE-IN-OCCURRED if it has
     any outstanding requests to the synthesizer resource in either the
     PENDING or IN-PROGRESS state.
"fixed": |-
  If the synthesizer and recognizer resources are part of the same MRCPv2 session, they can be optimized for a quicker kill-on-barge-in response if the recognizer and synthesizer interact directly.  In these cases, the client MUST still react to a START-OF-INPUT event from the recognizer by invoking the BARGE-IN-OCCURRED method to the synthesizer.  The client MUST invoke the BARGE-IN-OCCURRED if it has any outstanding requests to the synthesizer resource in either the PENDING or IN-PROGRESS state.
"ko": |-
  신디사이저와 인식기 리소스가 동일한 MRCPv2 세션의 일부인 경우 인식기와 신디사이저가 직접 상호 작용하는 경우 더 빠른 kill-on-barge-in 응답을 위해 최적화할 수 있습니다. 이러한 경우 클라이언트는 신디사이저에 BARGE-IN-OCCURRED 메서드를 호출하여 인식기의 START-OF-INPUT 이벤트에 여전히 반응해야 합니다. 클라이언트는 PENDING 또는 IN-PROGRESS 상태의 신디사이저 리소스에 대한 미처리 요청이 있는 경우 BARGE-IN-OCCURRED를 호출해야 합니다.
