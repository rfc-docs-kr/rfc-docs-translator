"hash": |-
  c5127b3a1442a6e21ca9b748e28902569e2191100157f9eaf5b672cf9be66eeb
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In the simplest implementation, SEND would not return control to the
     sending process until either the transmission was complete or the
     timeout had been exceeded.  However, this simple method is both
     subject to deadlocks (for example, both sides of the connection might
     try to do SENDs before doing any RECEIVEs) and offers poor
     performance, so it is not recommended.  A more sophisticated
     implementation would return immediately to allow the process to run
     concurrently with network I/O, and, furthermore, to allow multiple
     SENDs to be in progress.  Multiple SENDs are served in first come,
     first served order, so the TCP endpoint will queue those it cannot
     service immediately.
"fixed": |-
  In the simplest implementation, SEND would not return control to the sending process until either the transmission was complete or the timeout had been exceeded.  However, this simple method is both subject to deadlocks (for example, both sides of the connection might try to do SENDs before doing any RECEIVEs) and offers poor performance, so it is not recommended.  A more sophisticated implementation would return immediately to allow the process to run concurrently with network I/O, and, furthermore, to allow multiple SENDs to be in progress.  Multiple SENDs are served in first come, first served order, so the TCP endpoint will queue those it cannot service immediately.
"ko": |-
  가장 간단한 구현에서 SEND는 전송이 완료되거나 시간 초과가 초과될 때까지 전송 프로세스에 제어권을 반환하지 않습니다. 그러나 이 간단한 방법은 교착 상태에 걸리기 쉽고(예를 들어 연결 양쪽에서 RECEIVE를 수행하기 전에 SEND를 시도할 수 있음) 성능이 저하되므로 권장되지 않습니다. 보다 정교한 구현은 프로세스가 네트워크 I/O와 동시에 실행될 수 있도록 즉시 반환하고 더 나아가 여러 SEND가 진행되도록 허용합니다. 여러 개의 SEND가 선착순으로 제공되므로 TCP 엔드포인트는 즉시 서비스할 수 없는 SEND를 대기열에 넣습니다.
