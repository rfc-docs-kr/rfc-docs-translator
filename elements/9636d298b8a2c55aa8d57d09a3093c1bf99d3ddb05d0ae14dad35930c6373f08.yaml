"hash": |-
  9636d298b8a2c55aa8d57d09a3093c1bf99d3ddb05d0ae14dad35930c6373f08
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Another possibility for introducing encrypt-then-MAC would be to make
     it part of TLS 1.3; however, this would require the implementation
     and deployment of all of TLS 1.2 just to support a trivial code
     change in the order of encryption and MAC'ing.  In contrast,
     deploying encrypt-then-MAC via the TLS/DTLS extension mechanism
     required changing less than a dozen lines of code in one
     implementation (not including the handling for the new extension
     type, which was a further 50 or so lines of code).
"fixed": |-
  Another possibility for introducing encrypt-then-MAC would be to make it part of TLS 1.3; however, this would require the implementation and deployment of all of TLS 1.2 just to support a trivial code change in the order of encryption and MAC'ing.  In contrast, deploying encrypt-then-MAC via the TLS/DTLS extension mechanism required changing less than a dozen lines of code in one implementation (not including the handling for the new extension type, which was a further 50 or so lines of code).
"ko": |-
  encrypt-then-MAC을 도입하는 또 다른 가능성은 TLS 1.3의 일부로 만드는 것입니다. 그러나 이렇게 하려면 암호화 및 MAC'ing 순서에서 사소한 코드 변경을 지원하기 위해 TLS 1.2 전체를 구현하고 배포해야 합니다. 반면 TLS/DTLS 확장 메커니즘을 통해 encrypt-then-MAC을 배포하려면 한 구현에서 12줄 미만의 코드를 변경해야 합니다(새로운 확장 유형에 대한 처리, 즉 50줄 정도의 추가 코드는 제외).
