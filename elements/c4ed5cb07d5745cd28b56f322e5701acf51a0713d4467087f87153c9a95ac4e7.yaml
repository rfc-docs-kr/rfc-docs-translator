"hash": |-
  c4ed5cb07d5745cd28b56f322e5701acf51a0713d4467087f87153c9a95ac4e7
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Supported:  This header is used to determine the complete set of
           functionality that both client and server have, in general, and
           is not dependent on a specific resource.  The intended usage is
           to determine before one needs to use a functionality that it is
           supported.  It can be used in any method, but OPTIONS is the
           most suitable as it simultaneously determines all methods that
           are implemented.  When sending a request, the requester
           declares all its capabilities by including all supported
           feature tags.  This results in the receiver learning the
           requester's feature support.  The receiver then includes its
           set of features in the response.
"fixed": |-
  Supported:  This header is used to determine the complete set of functionality that both client and server have, in general, and is not dependent on a specific resource.  The intended usage is to determine before one needs to use a functionality that it is supported.  It can be used in any method, but OPTIONS is the most suitable as it simultaneously determines all methods that are implemented.  When sending a request, the requester declares all its capabilities by including all supported feature tags.  This results in the receiver learning the requester's feature support.  The receiver then includes its set of features in the response.
"ko": |-
  지원됨: 이 헤더는 일반적으로 클라이언트와 서버 모두에 있고 특정 리소스에 종속되지 않는 전체 기능 세트를 결정하는 데 사용됩니다. 의도된 사용법은 지원되는 기능을 사용하기 전에 결정하는 것입니다. 어떤 메소드에든 사용할 수 있지만 구현되는 모든 메소드를 동시에 결정하므로 OPTIONS가 가장 적합합니다. 요청을 보낼 때 요청자는 지원되는 모든 기능 태그를 포함하여 모든 기능을 선언합니다. 이로 인해 수신자는 요청자의 기능 지원을 학습하게 됩니다. 그러면 수신기는 응답에 해당 기능 세트를 포함시킵니다.
