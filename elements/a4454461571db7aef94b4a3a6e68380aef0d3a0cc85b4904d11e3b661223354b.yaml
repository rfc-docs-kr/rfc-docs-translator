"hash": |-
  a4454461571db7aef94b4a3a6e68380aef0d3a0cc85b4904d11e3b661223354b
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     For example, UNIX, Microsoft Windows, and other operating systems use
     ".." as a path component to indicate a directory level above the
     current one, and they use specially named paths or file names to send
     data to system devices.  Similar naming conventions might exist
     within other types of storage systems.  Likewise, local storage
     systems have an annoying tendency to prefer user-friendliness over
     security when handling invalid or unexpected characters,
     recomposition of decomposed characters, and case-normalization of
     case-insensitive names.
"fixed": |-
  For example, UNIX, Microsoft Windows, and other operating systems use ".." as a path component to indicate a directory level above the current one, and they use specially named paths or file names to send data to system devices.  Similar naming conventions might exist within other types of storage systems.  Likewise, local storage systems have an annoying tendency to prefer user-friendliness over security when handling invalid or unexpected characters, recomposition of decomposed characters, and case-normalization of case-insensitive names.
"ko": |-
  예를 들어 UNIX, Microsoft Windows 및 기타 운영 체제는 ".."를 경로 구성 요소로 사용하여 현재 디렉터리 수준보다 높은 디렉터리 수준을 나타내며 특별히 명명된 경로나 파일 이름을 사용하여 시스템 장치에 데이터를 보냅니다. 다른 유형의 스토리지 시스템에도 유사한 명명 규칙이 있을 수 있습니다. 마찬가지로, 로컬 저장 시스템은 유효하지 않거나 예상치 못한 문자를 처리할 때, 분해된 문자를 재구성할 때, 대소문자를 구분하지 않는 이름의 대소문자 정규화를 처리할 때 보안보다 사용자 친화성을 선호하는 성가신 경향이 있습니다.
