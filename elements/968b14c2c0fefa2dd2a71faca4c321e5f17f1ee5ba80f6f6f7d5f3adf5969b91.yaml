"hash": |-
  968b14c2c0fefa2dd2a71faca4c321e5f17f1ee5ba80f6f6f7d5f3adf5969b91
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Message sizes are also of considerable importance to
        implementations on constrained nodes.  Many implementations will
        need to allocate a buffer for incoming messages.  If an
        implementation is too constrained to allow for allocating the
        above-mentioned upper bound, it could apply the following
        implementation strategy for messages not using DTLS security:
        Implementations receiving a datagram into a buffer that is too
        small are usually able to determine if the trailing portion of a
        datagram was discarded and to retrieve the initial portion.  So,
        at least the CoAP header and options, if not all of the payload,
        are likely to fit within the buffer.  A server can thus fully
        interpret a request and return a 4.13 (Request Entity Too Large;
        see Section 5.9.2.9) Response Code if the payload was truncated.
        A client sending an idempotent request and receiving a response
        larger than would fit in the buffer can repeat the request with a
        suitable value for the Block Option [BLOCK].
"fixed": |-
  - Message sizes are also of considerable importance to implementations on constrained nodes.  Many implementations will need to allocate a buffer for incoming messages.  If an implementation is too constrained to allow for allocating the above-mentioned upper bound, it could apply the following implementation strategy for messages not using DTLS security: Implementations receiving a datagram into a buffer that is too small are usually able to determine if the trailing portion of a datagram was discarded and to retrieve the initial portion.  So, at least the CoAP header and options, if not all of the payload, are likely to fit within the buffer.  A server can thus fully interpret a request and return a 4.13 (Request Entity Too Large; see Section 5.9.2.9) Response Code if the payload was truncated. A client sending an idempotent request and receiving a response larger than would fit in the buffer can repeat the request with a suitable value for the Block Option [BLOCK].
"ko": |-
  - 메시지 크기는 제한된 노드에서의 구현에도 상당히 중요합니다. 많은 구현에서는 수신 메시지에 대한 버퍼를 할당해야 합니다. 구현이 너무 제한되어 위에서 언급한 상한을 할당할 수 없는 경우 DTLS 보안을 사용하지 않는 메시지에 대해 다음 구현 전략을 적용할 수 있습니다. 너무 작은 버퍼에 데이터그램을 수신하는 구현은 일반적으로 후행 데이터그램의 일부가 삭제되어 초기 부분을 검색합니다. 따라서 페이로드 전부는 아니더라도 적어도 CoAP 헤더와 옵션은 버퍼 내에 들어갈 가능성이 높습니다. 따라서 서버는 요청을 완전히 해석하고 페이로드가 잘린 경우 4.13(요청 엔터티가 너무 큼, 섹션 5.9.2.9 참조) 응답 코드를 반환할 수 있습니다. 멱등성 요청을 보내고 버퍼에 맞는 것보다 큰 응답을 받는 클라이언트는 차단 옵션 [BLOCK]에 적합한 값을 사용하여 요청을 반복할 수 있습니다.
