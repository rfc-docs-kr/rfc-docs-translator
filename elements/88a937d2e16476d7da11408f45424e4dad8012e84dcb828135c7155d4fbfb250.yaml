"hash": |-
  88a937d2e16476d7da11408f45424e4dad8012e84dcb828135c7155d4fbfb250
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Uniformity provides several benefits.  It allows different types
        of resource identifiers to be used in the same context, even when
        the mechanisms used to access those resources may differ.  It
        allows uniform semantic interpretation of common syntactic
        conventions across different types of resource identifiers.  It
        allows introduction of new types of resource identifiers without
        interfering with the way that existing identifiers are used.  It
        allows the identifiers to be reused in many different contexts,
        thus permitting new applications or protocols to leverage a pre-
        existing, large, and widely used set of resource identifiers.
"fixed": |-
  - Uniformity provides several benefits.  It allows different types of resource identifiers to be used in the same context, even when the mechanisms used to access those resources may differ.  It allows uniform semantic interpretation of common syntactic conventions across different types of resource identifiers.  It allows introduction of new types of resource identifiers without interfering with the way that existing identifiers are used.  It allows the identifiers to be reused in many different contexts, thus permitting new applications or protocols to leverage a pre- existing, large, and widely used set of resource identifiers.
"ko": |-
  - 균일성은 여러 가지 이점을 제공합니다. 해당 리소스에 액세스하는 데 사용되는 메커니즘이 다를 수 있는 경우에도 동일한 컨텍스트에서 다양한 유형의 리소스 식별자를 사용할 수 있습니다. 다양한 유형의 리소스 식별자에 걸쳐 공통 구문 규칙을 균일하게 의미적으로 해석할 수 있습니다. 기존 식별자가 사용되는 방식을 방해하지 않고 새로운 유형의 리소스 식별자를 도입할 수 있습니다. 이를 통해 식별자를 다양한 컨텍스트에서 재사용할 수 있으므로 새로운 애플리케이션이나 프로토콜이 기존의 크고 널리 사용되는 리소스 식별자 세트를 활용할 수 있습니다.
