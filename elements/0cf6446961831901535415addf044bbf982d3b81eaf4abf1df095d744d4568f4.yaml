"hash": |-
  0cf6446961831901535415addf044bbf982d3b81eaf4abf1df095d744d4568f4
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
           Since a stateless proxy must forward retransmitted requests to
           the same destination and add identical branch parameters to
           each of them, it can only use information from the message
           itself and time-invariant configuration data for those
           calculations.  If the configuration state is not time-invariant
           (for example, if a routing table is updated) any requests that
           could be affected by the change may not be forwarded
           statelessly during an interval equal to the transaction timeout
           window before or after the change.  The method of processing
           the affected requests in that interval is an implementation
           decision.  A common solution is to forward them transaction
           statefully.
"fixed": |-
  - Since a stateless proxy must forward retransmitted requests to the same destination and add identical branch parameters to each of them, it can only use information from the message itself and time-invariant configuration data for those calculations.  If the configuration state is not time-invariant (for example, if a routing table is updated) any requests that could be affected by the change may not be forwarded statelessly during an interval equal to the transaction timeout window before or after the change.  The method of processing the affected requests in that interval is an implementation decision.  A common solution is to forward them transaction statefully.
"ko": |-
  - 상태 비저장 프록시는 재전송된 요청을 동일한 대상으로 전달하고 각 요청에 동일한 분기 매개변수를 추가해야 하기 때문에 해당 계산을 위해 메시지 자체의 정보와 시불변 구성 데이터만 사용할 수 있습니다. 구성 상태가 시불변이 아닌 경우(예: 라우팅 테이블이 업데이트되는 경우) 변경의 영향을 받을 수 있는 모든 요청은 변경 전후의 트랜잭션 제한 시간 창과 동일한 간격 동안 상태 비저장 상태로 전달되지 않을 수 있습니다. 해당 간격에서 영향을 받는 요청을 처리하는 방법은 구현 결정입니다. 일반적인 해결책은 상태를 유지하여 트랜잭션을 전달하는 것입니다.
