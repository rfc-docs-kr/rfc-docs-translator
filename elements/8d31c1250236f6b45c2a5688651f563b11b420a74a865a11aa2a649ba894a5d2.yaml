"hash": |-
  8d31c1250236f6b45c2a5688651f563b11b420a74a865a11aa2a649ba894a5d2
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In conclusion, the security difference is making a trivial attack
     possible versus demanding the attacker to break algorithms.  An
     example of where this has a serious consequence is when a network is
     first deployed with integrity protection (such as HTTP Digest [4]),
     and then later new devices are added that support also encryption
     (such as TLS [3]).  In this situation, an insecure negotiation
     procedure allows attackers to trivially force even new devices to use
     only integrity protection.
"fixed": |-
  In conclusion, the security difference is making a trivial attack possible versus demanding the attacker to break algorithms.  An example of where this has a serious consequence is when a network is first deployed with integrity protection (such as HTTP Digest [4]), and then later new devices are added that support also encryption (such as TLS [3]).  In this situation, an insecure negotiation procedure allows attackers to trivially force even new devices to use only integrity protection.
"ko": |-
  결론적으로, 보안의 차이점은 사소한 공격을 가능하게 하는 것과 공격자가 알고리즘을 깨도록 요구하는 것입니다. 이것이 심각한 결과를 가져오는 예는 네트워크가 처음에 무결성 보호(예: HTTP Digest [4])와 함께 배포된 다음 나중에 암호화도 지원하는 새로운 장치(예: TLS [3])가 추가되는 경우입니다. 이 상황에서 안전하지 않은 협상 절차를 통해 공격자는 새 장치조차도 무결성 보호만 사용하도록 사소한 방식으로 강제할 수 있습니다.
