"hash": |-
  5e5d2d91d8c5e037a97e5a8f1650961c846ad7e80abfeb668ca5607870152f64
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     A TCP implementation MAY keep its offered receive window closed
     indefinitely (MAY-8).  As long as the receiving TCP peer continues to
     send acknowledgments in response to the probe segments, the sending
     TCP peer MUST allow the connection to stay open (MUST-37).  This
     enables TCP to function in scenarios such as the "printer ran out of
     paper" situation described in Section 4.2.2.17 of [19].  The behavior
     is subject to the implementation's resource management concerns, as
     noted in [41].
"fixed": |-
  A TCP implementation MAY keep its offered receive window closed indefinitely (MAY-8).  As long as the receiving TCP peer continues to send acknowledgments in response to the probe segments, the sending TCP peer MUST allow the connection to stay open (MUST-37).  This enables TCP to function in scenarios such as the "printer ran out of paper" situation described in Section 4.2.2.17 of [19].  The behavior is subject to the implementation's resource management concerns, as noted in [41].
"ko": |-
  TCP 구현은 제공된 수신 창을 무기한 닫혀 있는 상태로 유지할 수 있습니다(MAY-8). 수신 TCP 피어가 프로브 세그먼트에 대한 응답으로 계속해서 승인을 보내는 한, 송신 TCP 피어는 연결이 열린 상태를 유지하도록 허용해야 합니다(MUST-37). 이를 통해 [19]의 섹션 4.2.2.17에 설명된 "프린터의 용지 부족" 상황과 같은 시나리오에서 TCP가 작동할 수 있습니다. [41]에 명시된 대로 동작은 구현의 리소스 관리 문제에 따라 달라집니다.
