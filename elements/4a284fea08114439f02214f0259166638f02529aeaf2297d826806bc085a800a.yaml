"hash": |-
  4a284fea08114439f02214f0259166638f02529aeaf2297d826806bc085a800a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     CLOSE is an operation meaning "I have no more data to send."  The
     notion of closing a full-duplex connection is subject to ambiguous
     interpretation, of course, since it may not be obvious how to treat
     the receiving side of the connection.  We have chosen to treat CLOSE
     in a simplex fashion.  The user who CLOSEs may continue to RECEIVE
     until the TCP receiver is told that the remote peer has CLOSED also.
     Thus, a program could initiate several SENDs followed by a CLOSE, and
     then continue to RECEIVE until signaled that a RECEIVE failed because
     the remote peer has CLOSED.  The TCP implementation will signal a
     user, even if no RECEIVEs are outstanding, that the remote peer has
     closed, so the user can terminate their side gracefully.  A TCP
     implementation will reliably deliver all buffers SENT before the
     connection was CLOSED so a user who expects no data in return need
     only wait to hear the connection was CLOSED successfully to know that
     all their data was received at the destination TCP endpoint.  Users
     must keep reading connections they close for sending until the TCP
     implementation indicates there is no more data.
"fixed": |-
  CLOSE is an operation meaning "I have no more data to send."  The notion of closing a full-duplex connection is subject to ambiguous interpretation, of course, since it may not be obvious how to treat the receiving side of the connection.  We have chosen to treat CLOSE in a simplex fashion.  The user who CLOSEs may continue to RECEIVE until the TCP receiver is told that the remote peer has CLOSED also. Thus, a program could initiate several SENDs followed by a CLOSE, and then continue to RECEIVE until signaled that a RECEIVE failed because the remote peer has CLOSED.  The TCP implementation will signal a user, even if no RECEIVEs are outstanding, that the remote peer has closed, so the user can terminate their side gracefully.  A TCP implementation will reliably deliver all buffers SENT before the connection was CLOSED so a user who expects no data in return need only wait to hear the connection was CLOSED successfully to know that all their data was received at the destination TCP endpoint.  Users must keep reading connections they close for sending until the TCP implementation indicates there is no more data.
"ko": |-
  CLOSE는 "더 이상 보낼 데이터가 없습니다."라는 의미의 연산입니다. 물론 전이중 연결을 닫는다는 개념은 연결의 수신 측을 처리하는 방법이 명확하지 않을 수 있으므로 모호하게 해석될 수 있습니다. 우리는 CLOSE를 단순한 방식으로 처리하기로 결정했습니다. CLOSE한 사용자는 TCP 수신자가 원격 피어도 CLOSED되었음을 알릴 때까지 계속해서 RECEIVE를 받을 수 있습니다. 따라서 프로그램은 여러 SEND를 시작한 후 CLOSE를 시작한 다음 원격 피어가 CLOSED되었기 때문에 RECEIVE가 실패했다는 신호를 받을 때까지 RECEIVE를 계속할 수 있습니다. TCP 구현은 처리 중인 RECEIVE가 없더라도 사용자에게 원격 피어가 닫혔다는 신호를 보내므로 사용자는 해당 측을 정상적으로 종료할 수 있습니다. TCP 구현은 연결이 닫히기 전에 보낸 모든 버퍼를 안정적으로 전달하므로 반환되는 데이터가 없을 것으로 예상하는 사용자는 연결이 성공적으로 닫혔다는 소식을 듣기만 기다리면 모든 데이터가 대상 TCP 끝점에서 수신되었음을 알 수 있습니다. 사용자는 TCP 구현에서 더 이상 데이터가 없음을 나타낼 때까지 보내기 위해 닫은 연결을 계속 읽어야 합니다.
