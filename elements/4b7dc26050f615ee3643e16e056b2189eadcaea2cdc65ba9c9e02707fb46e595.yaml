"hash": |-
  4b7dc26050f615ee3643e16e056b2189eadcaea2cdc65ba9c9e02707fb46e595
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     If the target resource has one or more current representations, they
     might or might not be destroyed by the origin server, and the
     associated storage might or might not be reclaimed, depending
     entirely on the nature of the resource and its implementation by the
     origin server (which are beyond the scope of this specification).
     Likewise, other implementation aspects of a resource might need to be
     deactivated or archived as a result of a DELETE, such as database or
     gateway connections.  In general, it is assumed that the origin
     server will only allow DELETE on resources for which it has a
     prescribed mechanism for accomplishing the deletion.
"fixed": |-
  If the target resource has one or more current representations, they might or might not be destroyed by the origin server, and the associated storage might or might not be reclaimed, depending entirely on the nature of the resource and its implementation by the origin server (which are beyond the scope of this specification). Likewise, other implementation aspects of a resource might need to be deactivated or archived as a result of a DELETE, such as database or gateway connections.  In general, it is assumed that the origin server will only allow DELETE on resources for which it has a prescribed mechanism for accomplishing the deletion.
"ko": |-
  대상 리소스에 하나 이상의 현재 표현이 있는 경우 해당 표현은 원서버에 의해 파기되거나 삭제되지 않을 수 있으며, 관련 저장소는 리소스의 성격과 원서버에 의한 구현에 전적으로 따라 회수될 수도 있고 그렇지 않을 수도 있습니다( 이는 이 사양의 범위를 벗어납니다.) 마찬가지로 데이터베이스 또는 게이트웨이 연결과 같은 DELETE의 결과로 리소스의 다른 구현 측면을 비활성화하거나 보관해야 할 수도 있습니다. 일반적으로 원본 서버는 삭제를 수행하기 위해 규정된 메커니즘이 있는 리소스에 대해서만 DELETE를 허용한다고 가정합니다.
