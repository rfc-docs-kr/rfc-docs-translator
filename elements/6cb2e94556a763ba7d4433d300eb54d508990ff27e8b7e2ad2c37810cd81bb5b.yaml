"hash": |-
  6cb2e94556a763ba7d4433d300eb54d508990ff27e8b7e2ad2c37810cd81bb5b
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     As was the case for the cryptographic primitives (Section 5), the
     specifications of scheme operations assume that certain conditions
     are met by the inputs, in particular that public and private keys are
     valid. The behavior of an implementation is thus unspecified when a
     key is invalid. The impact of such unspecified behavior depends on
     the application. Possible means of addressing key validation include
     explicit key validation by the application; key validation within the
     public-key infrastructure; and assignment of liability for operations
     performed with an invalid key to the party who generated the key.
"fixed": |-
  As was the case for the cryptographic primitives (Section 5), the specifications of scheme operations assume that certain conditions are met by the inputs, in particular that public and private keys are valid. The behavior of an implementation is thus unspecified when a key is invalid. The impact of such unspecified behavior depends on the application. Possible means of addressing key validation include explicit key validation by the application; key validation within the public-key infrastructure; and assignment of liability for operations performed with an invalid key to the party who generated the key.
"ko": |-
  암호화 기본 요소(섹션 5)의 경우와 마찬가지로 체계 작업 사양에서는 입력이 특정 조건, 특히 공개 키와 개인 키가 유효하다고 가정합니다. 따라서 키가 유효하지 않은 경우 구현 동작이 지정되지 않습니다. 이러한 지정되지 않은 동작의 영향은 애플리케이션에 따라 다릅니다. 키 유효성 검사를 처리하는 가능한 방법에는 애플리케이션에 의한 명시적인 키 유효성 검사가 포함됩니다. 공개 키 인프라 내 키 검증 유효하지 않은 키로 수행된 작업에 대한 책임은 키를 생성한 당사자에게 할당됩니다.
