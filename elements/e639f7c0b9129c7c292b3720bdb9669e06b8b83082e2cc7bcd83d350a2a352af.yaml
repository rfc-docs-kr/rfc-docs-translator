"hash": |-
  e639f7c0b9129c7c292b3720bdb9669e06b8b83082e2cc7bcd83d350a2a352af
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In some contexts, it is useful to integrity-protect content that is
     not itself contained in a JWS.  One way to do this is to create a JWS
     in the normal fashion using a representation of the content as the
     payload but then delete the payload representation from the JWS and
     send this modified object to the recipient rather than the JWS.  When
     using the JWS Compact Serialization, the deletion is accomplished by
     replacing the second field (which contains BASE64URL(JWS Payload))
     value with the empty string; when using the JWS JSON Serialization,
     the deletion is accomplished by deleting the "payload" member.  This
     method assumes that the recipient can reconstruct the exact payload
     used in the JWS.  To use the modified object, the recipient
     reconstructs the JWS by re-inserting the payload representation into
     the modified object and uses the resulting JWS in the usual manner.
     Note that this method needs no support from JWS libraries, as
     applications can use this method by modifying the inputs and outputs
     of standard JWS libraries.
"fixed": |-
  In some contexts, it is useful to integrity-protect content that is not itself contained in a JWS.  One way to do this is to create a JWS in the normal fashion using a representation of the content as the payload but then delete the payload representation from the JWS and send this modified object to the recipient rather than the JWS.  When using the JWS Compact Serialization, the deletion is accomplished by replacing the second field (which contains BASE64URL(JWS Payload)) value with the empty string; when using the JWS JSON Serialization, the deletion is accomplished by deleting the "payload" member.  This method assumes that the recipient can reconstruct the exact payload used in the JWS.  To use the modified object, the recipient reconstructs the JWS by re-inserting the payload representation into the modified object and uses the resulting JWS in the usual manner. Note that this method needs no support from JWS libraries, as applications can use this method by modifying the inputs and outputs of standard JWS libraries.
"ko": |-
  일부 컨텍스트에서는 JWS에 포함되지 않은 콘텐츠의 무결성을 보호하는 것이 유용합니다. 이를 수행하는 한 가지 방법은 콘텐츠 표현을 페이로드로 사용하여 일반적인 방식으로 JWS를 만든 다음 JWS에서 페이로드 표현을 삭제하고 이 수정된 객체를 JWS가 아닌 수신자에게 보내는 것입니다. JWS Compact Serialization을 사용하는 경우 삭제는 두 번째 필드(BASE64URL(JWS Payload)가 포함된) 값을 빈 문자열로 바꿔서 수행됩니다. JWS JSON Serialization을 사용하는 경우 삭제는 "payload" 멤버를 삭제해서 수행됩니다. 이 방법은 수신자가 JWS에서 사용된 정확한 페이로드를 재구성할 수 있다고 가정합니다. 수정된 객체를 사용하려면 수신자가 수정된 객체에 페이로드 표현을 다시 삽입하여 JWS를 재구성하고 일반적인 방식으로 결과 JWS를 사용합니다. 이 방법은 JWS 라이브러리의 지원이 필요하지 않습니다. 애플리케이션은 표준 JWS 라이브러리의 입력과 출력을 수정하여 이 방법을 사용할 수 있기 때문입니다.
