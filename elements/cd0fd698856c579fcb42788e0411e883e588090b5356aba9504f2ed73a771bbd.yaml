"hash": |-
  cd0fd698856c579fcb42788e0411e883e588090b5356aba9504f2ed73a771bbd
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In the last MSP variation we considered, the difference between SEND
     or RECEIVE and OUT or IN was discarded.  In this case only one
     message is used which we will call TRANSFER.  When a process executes
     a TRANSFER it can specify an input buffer, an output buffer, both, or
     neither.  Two processes wishing to communicate both execute TRANSFERs
     specifying the same to and from port ids and the same rendezvous
     Host.  The TRANSFERs result in TRANSFER-messages plus data in the
     case that an output buffer was specified which rendezvous at the
     rendezvous Host.  When the rendezvous occurs, the TRANSFER-messages
     plus their data cross and each is sent to the source of the other.
     The system allows processes not to know whether they must do a SEND,
     or RECEIVE and is (perhaps) a nice generalization of the MSP
     presented in this note.  For instance, two processes can exchange
     data using this system, or two processes can kind of interrupt each
     other by sending dataless TRANSFERs.  This variation of the MSP is a
     development of a suggestion of Steve Crocker.  Its disadvantages are:
     (1) unintentional matches are more likely to occur, (2) rendezvous
     selection site is more complex, and (3) it's hard to think about.
"fixed": |-
  In the last MSP variation we considered, the difference between SEND or RECEIVE and OUT or IN was discarded.  In this case only one message is used which we will call TRANSFER.  When a process executes a TRANSFER it can specify an input buffer, an output buffer, both, or neither.  Two processes wishing to communicate both execute TRANSFERs specifying the same to and from port ids and the same rendezvous Host.  The TRANSFERs result in TRANSFER-messages plus data in the case that an output buffer was specified which rendezvous at the rendezvous Host.  When the rendezvous occurs, the TRANSFER-messages plus their data cross and each is sent to the source of the other. The system allows processes not to know whether they must do a SEND, or RECEIVE and is (perhaps) a nice generalization of the MSP presented in this note.  For instance, two processes can exchange data using this system, or two processes can kind of interrupt each other by sending dataless TRANSFERs.  This variation of the MSP is a development of a suggestion of Steve Crocker.  Its disadvantages are: (1) unintentional matches are more likely to occur, (2) rendezvous selection site is more complex, and (3) it's hard to think about.
"ko": |-
  우리가 고려한 마지막 MSP 변형에서는 SEND 또는 RECEIVE와 OUT 또는 IN 간의 차이가 삭제되었습니다. 이 경우 TRANSFER를 호출하는 하나의 메시지만 사용됩니다. 프로세스가 TRANSFER를 실행할 때 입력 버퍼, 출력 버퍼, 둘 다 지정하거나 둘 다 지정하지 않을 수 있습니다. 통신하려는 두 프로세스는 모두 동일한 포트 ID와 동일한 랑데부 호스트를 지정하는 TRANSFER를 실행합니다. TRANSFER는 랑데부 호스트에서 랑데뷰하는 출력 버퍼가 지정된 경우 TRANSFER 메시지와 데이터를 생성합니다. 랑데부가 발생하면 TRANSFER 메시지와 해당 데이터가 교차되고 각각은 다른 메시지의 소스로 전송됩니다. 이 시스템은 프로세스가 SEND 또는 RECEIVE를 수행해야 하는지 알 수 없도록 허용하며 (아마도) 이 노트에 제시된 MSP를 훌륭하게 일반화한 것입니다. 예를 들어, 두 프로세스는 이 시스템을 사용하여 데이터를 교환할 수 있거나, 두 프로세스가 데이터 없는 TRANSFER를 전송하여 서로를 방해할 수 있습니다. MSP의 이러한 변형은 Steve Crocker의 제안을 발전시킨 것입니다. 단점은 (1) 의도하지 않은 매칭이 발생할 가능성이 높다는 점, (2) 만남의 장소 선정이 더 복잡하다는 점, (3) 생각하기 힘든 점 등이다.
