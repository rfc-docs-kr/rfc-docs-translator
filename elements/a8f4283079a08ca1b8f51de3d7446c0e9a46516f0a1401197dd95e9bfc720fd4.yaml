"hash": |-
  a8f4283079a08ca1b8f51de3d7446c0e9a46516f0a1401197dd95e9bfc720fd4
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     All versions of TLS allow an extensions field to optionally follow
     the compression_methods field.  TLS 1.3 ClientHello messages always
     contain extensions (minimally "supported_versions", otherwise, they
     will be interpreted as TLS 1.2 ClientHello messages).  However,
     TLS 1.3 servers might receive ClientHello messages without an
     extensions field from prior versions of TLS.  The presence of
     extensions can be detected by determining whether there are bytes
     following the compression_methods field at the end of the
     ClientHello.  Note that this method of detecting optional data
     differs from the normal TLS method of having a variable-length field,
     but it is used for compatibility with TLS before extensions were
     defined.  TLS 1.3 servers will need to perform this check first and
     only attempt to negotiate TLS 1.3 if the "supported_versions"
     extension is present.  If negotiating a version of TLS prior to 1.3,
     a server MUST check that the message either contains no data after
     legacy_compression_methods or that it contains a valid extensions
     block with no data following.  If not, then it MUST abort the
     handshake with a "decode_error" alert.
"fixed": |-
  All versions of TLS allow an extensions field to optionally follow the compression_methods field.  TLS 1.3 ClientHello messages always contain extensions (minimally "supported_versions", otherwise, they will be interpreted as TLS 1.2 ClientHello messages).  However, TLS 1.3 servers might receive ClientHello messages without an extensions field from prior versions of TLS.  The presence of extensions can be detected by determining whether there are bytes following the compression_methods field at the end of the ClientHello.  Note that this method of detecting optional data differs from the normal TLS method of having a variable-length field, but it is used for compatibility with TLS before extensions were defined.  TLS 1.3 servers will need to perform this check first and only attempt to negotiate TLS 1.3 if the "supported_versions" extension is present.  If negotiating a version of TLS prior to 1.3, a server MUST check that the message either contains no data after legacy_compression_methods or that it contains a valid extensions block with no data following.  If not, then it MUST abort the handshake with a "decode_error" alert.
"ko": |-
  TLS의 모든 버전에서는 확장 필드가 선택적으로 압축 방법 필드 뒤에 오는 것을 허용합니다. TLS 1.3 ClientHello 메시지에는 항상 확장이 포함됩니다(최소 "supported_versions", 그렇지 않으면 TLS 1.2 ClientHello 메시지로 해석됨). 그러나 TLS 1.3 서버는 이전 버전의 TLS에서 확장 필드 없이 ClientHello 메시지를 수신할 수 있습니다. 확장 기능의 존재 여부는 ClientHello 끝의 압축_메소드 필드 뒤에 바이트가 있는지 확인하여 감지할 수 있습니다. 선택적 데이터를 감지하는 이 방법은 가변 길이 필드를 갖는 일반적인 TLS 방법과 다르지만 확장이 정의되기 전에 TLS와의 호환성을 위해 사용됩니다. TLS 1.3 서버는 먼저 이 검사를 수행해야 하며 "supported_versions" 확장이 있는 경우에만 TLS 1.3 협상을 시도해야 합니다. 1.3 이전 버전의 TLS를 협상하는 경우 서버는 메시지에 Legacy_compression_methods 이후에 데이터가 포함되어 있지 않거나 뒤에 오는 데이터가 없는 유효한 확장 블록이 포함되어 있는지 확인해야 합니다. 그렇지 않은 경우 "decode_error" 경고와 함께 핸드셰이크를 중단해야 합니다.
