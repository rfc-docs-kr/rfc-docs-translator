"hash": |-
  6877e0f297031124fbc9a47da0acbfe0f8dd22006d5d359d7e6645a8aeb5663b
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     *  Many existing application protocols were designed before the use
        of TLS became common.  These protocols typically support TLS in
        one of two ways: either via a separate port for TLS-only
        communication (e.g., port 443 for HTTPS) or via a method for
        dynamically upgrading a channel from unencrypted to TLS protected
        (e.g., STARTTLS, which is used in protocols such as IMAP and
        XMPP).  Regardless of the mechanism for protecting the
        communication channel (TLS-only port or dynamic upgrade), what
        matters is the end state of the channel.  When a protocol defines
        both a dynamic upgrade method and a separate TLS-only method, then
        the separate TLS-only method MUST be supported by implementations
        and MUST be configured by administrators to be used in preference
        to the dynamic upgrade method.  When a protocol supports only a
        dynamic upgrade method, implementations MUST provide a way for
        administrators to set a strict local policy that forbids use of
        plaintext in the absence of a negotiated TLS channel, and
        administrators MUST use this policy.
"fixed": |-
  *  Many existing application protocols were designed before the use of TLS became common.  These protocols typically support TLS in one of two ways: either via a separate port for TLS-only communication (e.g., port 443 for HTTPS) or via a method for dynamically upgrading a channel from unencrypted to TLS protected (e.g., STARTTLS, which is used in protocols such as IMAP and XMPP).  Regardless of the mechanism for protecting the communication channel (TLS-only port or dynamic upgrade), what matters is the end state of the channel.  When a protocol defines both a dynamic upgrade method and a separate TLS-only method, then the separate TLS-only method MUST be supported by implementations and MUST be configured by administrators to be used in preference to the dynamic upgrade method.  When a protocol supports only a dynamic upgrade method, implementations MUST provide a way for administrators to set a strict local policy that forbids use of plaintext in the absence of a negotiated TLS channel, and administrators MUST use this policy.
"ko": |-
  * 기존의 많은 애플리케이션 프로토콜은 TLS 사용이 일반화되기 전에 설계되었습니다. 이러한 프로토콜은 일반적으로 TLS 전용 통신을 위한 별도의 포트(예: HTTPS의 경우 포트 443)를 통해 또는 암호화되지 않은 채널에서 TLS 보호 채널로 동적으로 업그레이드하는 방법(예: STARTTLS, 즉 STARTTLS) 중 하나로 TLS를 지원합니다. IMAP 및 XMPP와 같은 프로토콜에 사용됩니다. 통신 채널을 보호하기 위한 메커니즘(TLS 전용 포트 또는 동적 업그레이드)에 관계없이 중요한 것은 채널의 최종 상태입니다. 프로토콜이 동적 업그레이드 방법과 별도의 TLS 전용 방법을 모두 정의하는 경우 구현에서는 별도의 TLS 전용 방법을 지원해야 하며 동적 업그레이드 방법보다 우선적으로 사용되도록 관리자가 구성해야 합니다. 프로토콜이 동적 업그레이드 방법만 지원하는 경우 구현에서는 관리자가 협상된 TLS 채널이 없을 때 일반 텍스트 사용을 금지하는 엄격한 로컬 정책을 설정할 수 있는 방법을 제공해야 하며 관리자는 이 정책을 사용해야 합니다.
