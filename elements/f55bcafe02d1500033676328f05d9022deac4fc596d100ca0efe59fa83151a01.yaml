"hash": |-
  f55bcafe02d1500033676328f05d9022deac4fc596d100ca0efe59fa83151a01
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Because this mechanism does not require storing all outstanding
     tickets, it may be easier to implement in distributed systems with
     high rates of resumption and 0-RTT, at the cost of potentially weaker
     anti-replay defense because of the difficulty of reliably storing and
     retrieving the received ClientHello messages.  In many such systems,
     it is impractical to have globally consistent storage of all the
     received ClientHellos.  In this case, the best anti-replay protection
     is provided by having a single storage zone be authoritative for a
     given ticket and refusing 0-RTT for that ticket in any other zone.
     This approach prevents simple replay by the attacker because only one
     zone will accept 0-RTT data.  A weaker design is to implement
     separate storage for each zone but allow 0-RTT in any zone.  This
     approach limits the number of replays to once per zone.  Application
     message duplication of course remains possible with either design.
"fixed": |-
  Because this mechanism does not require storing all outstanding tickets, it may be easier to implement in distributed systems with high rates of resumption and 0-RTT, at the cost of potentially weaker anti-replay defense because of the difficulty of reliably storing and retrieving the received ClientHello messages.  In many such systems, it is impractical to have globally consistent storage of all the received ClientHellos.  In this case, the best anti-replay protection is provided by having a single storage zone be authoritative for a given ticket and refusing 0-RTT for that ticket in any other zone. This approach prevents simple replay by the attacker because only one zone will accept 0-RTT data.  A weaker design is to implement separate storage for each zone but allow 0-RTT in any zone.  This approach limits the number of replays to once per zone.  Application message duplication of course remains possible with either design.
"ko": |-
  이 메커니즘은 미해결 티켓을 모두 저장할 필요가 없기 때문에 재개율이 높고 0-RTT인 분산 시스템에서 구현하는 것이 더 쉬울 수 있습니다. 단, 티켓을 안정적으로 저장하고 검색하는 것이 어렵기 때문에 잠재적으로 재생 방지 방어가 약할 수 있습니다. ClientHello 메시지를 받았습니다. 이러한 많은 시스템에서는 수신된 모든 ClientHello를 전역적으로 일관된 저장소로 유지하는 것은 비현실적입니다. 이 경우 단일 저장 영역이 특정 티켓에 대해 권한을 부여하고 다른 영역에서는 해당 티켓에 대해 0-RTT를 거부함으로써 최상의 재생 방지 보호가 제공됩니다. 이 접근 방식은 단 하나의 영역만 0-RTT 데이터를 허용하므로 공격자의 단순 재생을 방지합니다. 더 약한 설계는 각 영역에 대해 별도의 스토리지를 구현하지만 모든 영역에서 0-RTT를 허용하는 것입니다. 이 접근 방식은 재생 횟수를 영역당 한 번으로 제한합니다. 물론 응용 프로그램 메시지 복제는 어느 디자인에서나 가능합니다.
