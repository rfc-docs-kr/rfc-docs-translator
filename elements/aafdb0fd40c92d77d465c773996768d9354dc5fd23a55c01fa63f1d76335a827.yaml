"hash": |-
  aafdb0fd40c92d77d465c773996768d9354dc5fd23a55c01fa63f1d76335a827
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Neither should have any significant impact on interoperability.  If
     IPv6 literals are needed in the RTSP URI, then that RTSP server must
     be IPv6 capable, and RTSP 1.0 is not a fully IPv6 capable protocol.
     If an RTSP 1.0 client attempts to process the URI, the URI will not
     match the allowed syntax, it will be considered invalid, and
     processing will be stopped.  This is clearly a failure to reach the
     resource; however, it is not a signification issue as RTSP 2.0
     support was needed anyway in both server and client.  Thus, failure
     will only occur in a later step when there is an RTSP version
     mismatch between client and server.  The second change will only
     occur inside RTSP message headers, as the Request-URI must be an
     absolute URI.  Thus, such usages will only occur after an agent has
     accepted and started processing RTSP 2.0 messages, and an agent using
     RTSP 1.0 only will not be required to parse such types of relative
     URIs.
"fixed": |-
  Neither should have any significant impact on interoperability.  If IPv6 literals are needed in the RTSP URI, then that RTSP server must be IPv6 capable, and RTSP 1.0 is not a fully IPv6 capable protocol. If an RTSP 1.0 client attempts to process the URI, the URI will not match the allowed syntax, it will be considered invalid, and processing will be stopped.  This is clearly a failure to reach the resource; however, it is not a signification issue as RTSP 2.0 support was needed anyway in both server and client.  Thus, failure will only occur in a later step when there is an RTSP version mismatch between client and server.  The second change will only occur inside RTSP message headers, as the Request-URI must be an absolute URI.  Thus, such usages will only occur after an agent has accepted and started processing RTSP 2.0 messages, and an agent using RTSP 1.0 only will not be required to parse such types of relative URIs.
"ko": |-
  둘 다 상호 운용성에 큰 영향을 주어서는 안 됩니다. RTSP URI에 IPv6 리터럴이 필요한 경우 해당 RTSP 서버는 IPv6를 지원해야 하며 RTSP 1.0은 완전한 IPv6 지원 프로토콜이 아닙니다. RTSP 1.0 클라이언트가 URI를 처리하려고 시도하는 경우 URI는 허용된 구문과 일치하지 않으며 유효하지 않은 것으로 간주되어 처리가 중지됩니다. 이는 분명히 리소스에 도달하지 못한 것입니다. 그러나 서버와 클라이언트 모두에서 RTSP 2.0 지원이 필요했기 때문에 이는 의미 문제가 아닙니다. 따라서 클라이언트와 서버 간에 RTSP 버전이 일치하지 않는 경우 이후 단계에서만 오류가 발생합니다. 요청-URI는 절대 URI여야 하므로 두 번째 변경은 RTSP 메시지 헤더 내에서만 발생합니다. 따라서 이러한 사용은 에이전트가 RTSP 2.0 메시지를 수락하고 처리를 시작한 후에만 발생하며 RTSP 1.0만 사용하는 에이전트는 이러한 유형의 상대 URI를 구문 분석할 필요가 없습니다.
