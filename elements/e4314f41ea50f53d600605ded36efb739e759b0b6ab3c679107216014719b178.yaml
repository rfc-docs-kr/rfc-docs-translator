"hash": |-
  e4314f41ea50f53d600605ded36efb739e759b0b6ab3c679107216014719b178
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Forward vs. backward: Experts are unhappy with the word "forward",
        because compromise of "this" encryption key also is not supposed
        to compromise the "previous" one, which is "backward" rather than
        forward. In S/KEY, if the key used at time t is compromised, then
        all keys used prior to that are compromised. If the "long-term"
        key (i.e., the base of the hashing scheme) is compromised, then
        all keys past and future are compromised; thus, you could say that
        S/KEY has neither forward nor backward secrecy.
"fixed": |-
  - Forward vs. backward: Experts are unhappy with the word "forward", because compromise of "this" encryption key also is not supposed to compromise the "previous" one, which is "backward" rather than forward. In S/KEY, if the key used at time t is compromised, then all keys used prior to that are compromised. If the "long-term" key (i.e., the base of the hashing scheme) is compromised, then all keys past and future are compromised; thus, you could say that S/KEY has neither forward nor backward secrecy.
"ko": |-
  - 정방향 대 역방향: 전문가들은 "앞으로"라는 단어에 만족하지 않습니다. 왜냐하면 "이" 암호화 키의 손상은 전달이 아닌 "뒤로"인 "이전" 암호화 키도 손상시키지 않기 때문입니다. S/KEY에서는 t 시점에 사용된 키가 손상되면 그 이전에 사용된 모든 키가 손상됩니다. "장기" 키(즉, 해싱 체계의 기반)가 손상되면 과거와 미래의 모든 키도 손상됩니다. 따라서 S/KEY에는 순방향 비밀성과 역방향 비밀성이 없다고 말할 수 있습니다.
