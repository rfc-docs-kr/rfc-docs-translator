"hash": |-
  cee6583f7b7bc65cd3f983d175a2ae530eea1abac529cc3f97b16fa0ee98f3b8
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Protocol designers using Diffie-Hellman over the curves defined in
     this document must not assume "contributory behaviour".  Specially,
     contributory behaviour means that both parties' private keys
     contribute to the resulting shared key.  Since curve25519 and
     curve448 have cofactors of 8 and 4 (respectively), an input point of
     small order will eliminate any contribution from the other party's
     private key.  This situation can be detected by checking for the all-
     zero output, which implementations MAY do, as specified in Section 6.
     However, a large number of existing implementations do not do this.
"fixed": |-
  Protocol designers using Diffie-Hellman over the curves defined in this document must not assume "contributory behaviour".  Specially, contributory behaviour means that both parties' private keys contribute to the resulting shared key.  Since curve25519 and curve448 have cofactors of 8 and 4 (respectively), an input point of small order will eliminate any contribution from the other party's private key.  This situation can be detected by checking for the all- zero output, which implementations MAY do, as specified in Section 6. However, a large number of existing implementations do not do this.
"ko": |-
  이 문서에 정의된 곡선에 대해 Diffie-Hellman을 사용하는 프로토콜 설계자는 "기여 행위"를 가정해서는 안 됩니다. 특히, 기여 행위는 양 당사자의 개인 키가 결과 공유 키에 기여한다는 것을 의미합니다. curve25519와 curve448은 각각 8과 4의 보조 인자를 갖기 때문에 작은 순서의 입력 지점은 상대방의 개인 키로부터 기여를 제거합니다. 이 상황은 섹션 6에 지정된 대로 구현에서 수행할 수 있는 모두 0 출력을 확인하여 감지할 수 있습니다. 그러나 다수의 기존 구현에서는 이를 수행하지 않습니다.
