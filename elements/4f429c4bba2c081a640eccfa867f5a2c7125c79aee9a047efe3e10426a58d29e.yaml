"hash": |-
  4f429c4bba2c081a640eccfa867f5a2c7125c79aee9a047efe3e10426a58d29e
"type": |-
  RawContent
"comment": !!null |-
  null
"original": |2-
     DecodePacketNumber(largest_pn, truncated_pn, pn_nbits):
        expected_pn  = largest_pn + 1
        pn_win       = 1 << pn_nbits
        pn_hwin      = pn_win / 2
        pn_mask      = pn_win - 1
        // The incoming packet number should be greater than
        // expected_pn - pn_hwin and less than or equal to
        // expected_pn + pn_hwin
        //
        // This means we cannot just strip the trailing bits from
        // expected_pn and add the truncated_pn because that might
        // yield a value outside the window.
        //
        // The following code calculates a candidate value and
        // makes sure it's within the packet number window.
        // Note the extra checks to prevent overflow and underflow.
        candidate_pn = (expected_pn & ~pn_mask) | truncated_pn
        if candidate_pn <= expected_pn - pn_hwin and
           candidate_pn < (1 << 62) - pn_win:
           return candidate_pn + pn_win
        if candidate_pn > expected_pn + pn_hwin and
           candidate_pn >= pn_win:
           return candidate_pn - pn_win
        return candidate_pn
"fixed": !!null |-
  null
"ko": !!null |-
  null
