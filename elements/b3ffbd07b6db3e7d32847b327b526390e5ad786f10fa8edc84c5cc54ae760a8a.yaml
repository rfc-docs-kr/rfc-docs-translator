"hash": |-
  b3ffbd07b6db3e7d32847b327b526390e5ad786f10fa8edc84c5cc54ae760a8a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
    /* Now run hkdfExpand() by itself against the test vectors */
    /* using the intermediate results from hkdfExtract. */
    err = hkdfExpand(hkdfhashes[testno].whichSha, prk,
      USHAHashSize(hkdfhashes[testno].whichSha),
      (const uint8_t *)hkdfhashes[testno].infoarray,
      hkdfhashes[testno].infolength, okm, hkdfhashes[testno].okmlength);
    if (err != shaSuccess) {
      fprintf(stderr, "hashHkdf(): hkdfExpand Error %d.\n", err);
      return err;
    }
    sprintf(buf, "hkdfExpand %d", testno+1);
    printResult(okm, hkdfhashes[testno].okmlength,
      USHAHashName(hkdfhashes[testno].whichSha), "hkdf standard test",
      buf, hkdfhashes[testno].okmarray, printResults, printPassFail);
"fixed": |-
  /* Now run hkdfExpand() by itself against the test vectors */ /* using the intermediate results from hkdfExtract. */ err = hkdfExpand(hkdfhashes[testno].whichSha, prk, USHAHashSize(hkdfhashes[testno].whichSha), (const uint8_t *)hkdfhashes[testno].infoarray, hkdfhashes[testno].infolength, okm, hkdfhashes[testno].okmlength); if (err != shaSuccess) { fprintf(stderr, "hashHkdf(): hkdfExpand Error %d.\n", err); return err; } sprintf(buf, "hkdfExpand %d", testno+1); printResult(okm, hkdfhashes[testno].okmlength, USHAHashName(hkdfhashes[testno].whichSha), "hkdf standard test", buf, hkdfhashes[testno].okmarray, printResults, printPassFail);
"ko": |-
  /* 이제 테스트 벡터에 대해 hkdfExpand()를 단독으로 실행합니다. */ /* hkdfExtract의 중간 결과를 사용합니다. */ 오류 = hkdfExpand(hkdfhashes[testno].whichSha, prk, USHAHashSize(hkdfhashes[testno].whichSha), (const uint8_t *)hkdfhashes[testno].infoarray, hkdfhashes[testno].infolength, okm, hkdfhashes[testno] .ok길이); if (err != shaSuccess) { fprintf(stderr, "hashHkdf(): hkdfExpand 오류 %d.\n", err); 반품 오류; } sprintf(buf, "hkdfExpand %d", testno+1); printResult(okm, hkdfhashes[testno].okmlength, USHAHashName(hkdfhashes[testno].whichSha), "hkdf 표준 테스트", buf, hkdfhashes[testno].okmarray, printResults, printPassFail);
