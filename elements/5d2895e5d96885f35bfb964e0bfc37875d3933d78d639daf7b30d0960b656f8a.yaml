"hash": |-
  5d2895e5d96885f35bfb964e0bfc37875d3933d78d639daf7b30d0960b656f8a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     For programming convenience, it is useful to be able to distinguish
     between individual items and sets containing one item in the XML
     representation of semantic results.  For example, a pizza order might
     consist of exactly one pizza, but a pizza might contain zero or more
     toppings.  Since there is no standard way of marking this distinction
     directly in XML, in the current framework, the developer is free to
     adopt any conventions that would convey this information in the XML
     markup.  One strategy would be for the developer to wrap the set of
     items in a grouping element, as in the following example.
"fixed": |-
  For programming convenience, it is useful to be able to distinguish between individual items and sets containing one item in the XML representation of semantic results.  For example, a pizza order might consist of exactly one pizza, but a pizza might contain zero or more toppings.  Since there is no standard way of marking this distinction directly in XML, in the current framework, the developer is free to adopt any conventions that would convey this information in the XML markup.  One strategy would be for the developer to wrap the set of items in a grouping element, as in the following example.
"ko": |-
  프로그래밍 편의를 위해 의미 결과의 XML 표현에서 개별 항목과 하나의 항목을 포함하는 세트를 구별할 수 있는 것이 유용합니다. 예를 들어, 피자 주문은 정확히 피자 한 개로 구성될 수 있지만 피자에는 토핑이 0개 이상 포함될 수 있습니다. XML에서 이러한 구별을 직접 표시하는 표준 방법이 없으므로 현재 프레임워크에서는 개발자가 XML 마크업에서 이 정보를 전달하는 모든 규칙을 자유롭게 채택할 수 있습니다. 한 가지 전략은 개발자가 다음 예와 같이 그룹화 요소에 항목 세트를 래핑하는 것입니다.
