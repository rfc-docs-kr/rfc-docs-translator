"hash": |-
  4574f80c8f506056880582d4745f4762fe6f2bd4c6c05292e36e433b136830d8
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The obsoleted TOS processing rules in TCP assumed bidirectional (or
     symmetric) precedence values used on a connection, but the Diffserv
     architecture is asymmetric.  Problems with the old TCP logic in this
     regard were described in [25], and the solution described is to
     ignore IP precedence in TCP.  Since RFC 2873 is a Standards Track
     document (although not marked as updating RFC 793), current
     implementations are expected to be robust in these conditions.  Note
     that the Diffserv field value used in each direction is a part of the
     interface between TCP and the network layer, and values in use can be
     indicated both ways between TCP and the application.
"fixed": |-
  The obsoleted TOS processing rules in TCP assumed bidirectional (or symmetric) precedence values used on a connection, but the Diffserv architecture is asymmetric.  Problems with the old TCP logic in this regard were described in [25], and the solution described is to ignore IP precedence in TCP.  Since RFC 2873 is a Standards Track document (although not marked as updating RFC 793), current implementations are expected to be robust in these conditions.  Note that the Diffserv field value used in each direction is a part of the interface between TCP and the network layer, and values in use can be indicated both ways between TCP and the application.
"ko": |-
  TCP의 오래된 TOS 처리 규칙은 연결에 사용되는 양방향(또는 대칭) 우선 순위 값을 가정하지만 Diffserv 아키텍처는 비대칭입니다. 이와 관련하여 기존 TCP 논리의 문제점은 [25]에 설명되어 있으며 설명된 해결 방법은 TCP에서 IP 우선 순위를 무시하는 것입니다. RFC 2873은 표준 추적 문서이므로(RFC 793 업데이트로 표시되지는 않았지만) 현재 구현은 이러한 조건에서 강력할 것으로 예상됩니다. 각 방향에서 사용되는 Diffserv 필드 값은 TCP와 네트워크 계층 간 인터페이스의 일부이며, 사용 중인 값은 TCP와 애플리케이션 간 양방향으로 표시될 수 있습니다.
