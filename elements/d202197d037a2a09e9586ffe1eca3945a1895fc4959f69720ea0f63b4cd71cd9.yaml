"hash": |-
  d202197d037a2a09e9586ffe1eca3945a1895fc4959f69720ea0f63b4cd71cd9
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Consider a user who wants to watch a video.  To play the video, the
     user clicks on the play button of a HTML5 <video> element shown in
     his PPSPP-enabled browser.  Imagine this element has a PPSPP URL (to
     be defined elsewhere) identifying the video as its source.  The
     browser passes this URL to its peer-to-peer streaming protocol
     handler.  Let's call this protocol handler Peer A.  Peer A parses the
     URL to retrieve the transport address of a peer-to-peer streaming
     protocol tracker and swarm metadata of the content.  The tracker
     address may be optional in the presence of a decentralized tracking
     mechanism.  The mechanisms for tracking peers are outside of the
     scope of this document.
"fixed": |-
  Consider a user who wants to watch a video.  To play the video, the user clicks on the play button of a HTML5 <video> element shown in his PPSPP-enabled browser.  Imagine this element has a PPSPP URL (to be defined elsewhere) identifying the video as its source.  The browser passes this URL to its peer-to-peer streaming protocol handler.  Let's call this protocol handler Peer A.  Peer A parses the URL to retrieve the transport address of a peer-to-peer streaming protocol tracker and swarm metadata of the content.  The tracker address may be optional in the presence of a decentralized tracking mechanism.  The mechanisms for tracking peers are outside of the scope of this document.
"ko": |-
  비디오를 보고 싶어하는 사용자를 생각해 보십시오. 비디오를 재생하려면 사용자가 PPSPP 지원 브라우저에 표시된 HTML5 <video> 요소의 재생 버튼을 클릭합니다. 이 요소에 비디오를 소스로 식별하는 PPSPP URL(다른 곳에서 정의됨)이 있다고 가정해 보세요. 브라우저는 이 URL을 P2P 스트리밍 프로토콜 처리기에 전달합니다. 이 프로토콜 핸들러를 피어 A라고 부르겠습니다. 피어 A는 URL을 구문 분석하여 P2P 스트리밍 프로토콜 추적기의 전송 주소와 콘텐츠의 떼 메타데이터를 검색합니다. 분산형 추적 메커니즘이 있는 경우 추적기 주소는 선택 사항일 수 있습니다. 피어를 추적하는 메커니즘은 이 문서의 범위를 벗어납니다.
