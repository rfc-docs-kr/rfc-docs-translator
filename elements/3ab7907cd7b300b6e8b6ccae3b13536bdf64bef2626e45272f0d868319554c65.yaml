"hash": |-
  3ab7907cd7b300b6e8b6ccae3b13536bdf64bef2626e45272f0d868319554c65
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        The above rules relating to the initial sequence number may appear
        unnecessarily loose.  The reason for this is to cater to some
        common behavior of existing implementations: when using multiple
        reliable connections in sequence, it may still be easiest to use a
        single sequence-number series for a client connecting with a
        particular server.  Thus, the initial sequence number may be
        arbitrary depending on the number of previous requests.  For any
        unreliable transport, a stricter definition or other solution will
        be required to enable detection of any loss of the first request.
"fixed": |-
  - The above rules relating to the initial sequence number may appear unnecessarily loose.  The reason for this is to cater to some common behavior of existing implementations: when using multiple reliable connections in sequence, it may still be easiest to use a single sequence-number series for a client connecting with a particular server.  Thus, the initial sequence number may be arbitrary depending on the number of previous requests.  For any unreliable transport, a stricter definition or other solution will be required to enable detection of any loss of the first request.
"ko": |-
  - 초기 시퀀스 번호와 관련된 위의 규칙은 불필요하게 느슨해 보일 수 있습니다. 그 이유는 기존 구현의 몇 가지 일반적인 동작을 충족시키기 위한 것입니다. 여러 개의 안정적인 연결을 순차적으로 사용할 때 특정 서버와 연결하는 클라이언트에 대해 단일 시퀀스 번호 시리즈를 사용하는 것이 가장 쉬울 수 있습니다. 따라서 초기 시퀀스 번호는 이전 요청 수에 따라 임의적일 수 있습니다. 신뢰할 수 없는 전송의 경우 첫 번째 요청의 손실을 감지하려면 더 엄격한 정의나 기타 솔루션이 필요합니다.
