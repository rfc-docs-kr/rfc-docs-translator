"hash": |-
  4f3a48631f6ca97a639f2b3027be6e1ae8ca68b6b8aa573eb4f5f91ec1940fd8
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Either way, only the request/response model of CoAP is mapped to
     HTTP.  The underlying model of Confirmable or Non-confirmable
     messages, etc., is invisible and MUST have no effect on a proxy
     function.  The following sections describe the handling of requests
     to a forward-proxy.  Reverse-proxies are not specified, as the proxy
     function is transparent to the client with the proxy acting as if it
     were the origin server.  However, similar considerations apply to
     reverse-proxies as to forward-proxies, and there generally will be an
     expectation that reverse-proxies operate in a similar way forward-
     proxies would.  As an implementation note, HTTP client libraries may
     make it hard to operate an HTTP-CoAP forward-proxy by not providing a
     way to put a CoAP URI on the HTTP Request-Line; reverse-proxying may
     therefore lead to wider applicability of a proxy.  A separate
     specification may define a convention for URIs operating such an
     HTTP-CoAP reverse-proxy [MAPPING].
"fixed": |-
  Either way, only the request/response model of CoAP is mapped to HTTP.  The underlying model of Confirmable or Non-confirmable messages, etc., is invisible and MUST have no effect on a proxy function.  The following sections describe the handling of requests to a forward-proxy.  Reverse-proxies are not specified, as the proxy function is transparent to the client with the proxy acting as if it were the origin server.  However, similar considerations apply to reverse-proxies as to forward-proxies, and there generally will be an expectation that reverse-proxies operate in a similar way forward- proxies would.  As an implementation note, HTTP client libraries may make it hard to operate an HTTP-CoAP forward-proxy by not providing a way to put a CoAP URI on the HTTP Request-Line; reverse-proxying may therefore lead to wider applicability of a proxy.  A separate specification may define a convention for URIs operating such an HTTP-CoAP reverse-proxy [MAPPING].
"ko": |-
  어느 쪽이든 CoAP의 요청/응답 모델만 HTTP에 매핑됩니다. 확인 가능 또는 확인 불가능 메시지 등의 기본 모델은 보이지 않으며 프록시 기능에 영향을 미치지 않아야 합니다. 다음 섹션에서는 정방향 프록시에 대한 요청 처리에 대해 설명합니다. 프록시 기능은 마치 원본 서버인 것처럼 작동하는 프록시를 사용하여 클라이언트에 투명하므로 역방향 프록시는 지정되지 않습니다. 그러나 역방향 프록시에도 순방향 프록시와 유사한 고려 사항이 적용되며 일반적으로 역방향 프록시가 순방향 프록시와 유사한 방식으로 작동할 것으로 예상됩니다. 구현 참고 사항으로, HTTP 클라이언트 라이브러리는 HTTP 요청 라인에 CoAP URI를 배치하는 방법을 제공하지 않음으로써 HTTP-CoAP 전달 프록시를 작동하기 어렵게 만들 수 있습니다. 따라서 역방향 프록시를 사용하면 프록시를 더 광범위하게 적용할 수 있습니다. 별도의 사양에서는 HTTP-CoAP 역방향 프록시 [MAPPING] 등을 작동하는 URI에 대한 규칙을 정의할 수 있습니다.
