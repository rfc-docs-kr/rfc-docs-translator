"hash": |-
  8b05f21ff8e70781583c1de74eb21f2d60b7e0a6648ed69c35fe5e297ec2c371
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     type, it is a matter of local policy as to how each stream is mapped
     to the various media sinks for that particular type (for example,
     speakers or a recording device in the case of audio).  There are a
     few constraints on the policies, however.  First, when receiving
     multiple streams of the same type, each stream MUST be mapped to at
     least one sink for the purpose of presentation to the user.  In other
     words, the intent of receiving multiple streams of the same type is
     that they should all be presented in parallel, rather than choosing
     just one.  Another constraint is that when multiple streams are
     received and sent to the same sink, they MUST be combined in some
     media specific way.  For example, in the case of two audio streams,
     the received media from each might be mapped to the speakers.  In
     that case, the combining operation would be to mix them.  In the case
     of multiple instant messaging streams, where the sink is the screen,
     the combining operation would be to present all of them to the user
     interface.  The third constraint is that if multiple sources are
     mapped to the same stream, those sources MUST be combined in some
     media specific way before they are sent on the stream.  Although
     policies beyond these constraints are flexible, an agent won't
     generally want a policy that will copy media from its sinks to its
     sources unless it is a conference server (i.e., don't copy received
     media on one stream to another stream).
"fixed": |-
  type, it is a matter of local policy as to how each stream is mapped to the various media sinks for that particular type (for example, speakers or a recording device in the case of audio).  There are a few constraints on the policies, however.  First, when receiving multiple streams of the same type, each stream MUST be mapped to at least one sink for the purpose of presentation to the user.  In other words, the intent of receiving multiple streams of the same type is that they should all be presented in parallel, rather than choosing just one.  Another constraint is that when multiple streams are received and sent to the same sink, they MUST be combined in some media specific way.  For example, in the case of two audio streams, the received media from each might be mapped to the speakers.  In that case, the combining operation would be to mix them.  In the case of multiple instant messaging streams, where the sink is the screen, the combining operation would be to present all of them to the user interface.  The third constraint is that if multiple sources are mapped to the same stream, those sources MUST be combined in some media specific way before they are sent on the stream.  Although policies beyond these constraints are flexible, an agent won't generally want a policy that will copy media from its sinks to its sources unless it is a conference server (i.e., don't copy received media on one stream to another stream).
"ko": |-
  유형, 각 스트림이 해당 특정 유형의 다양한 미디어 싱크(예: 오디오의 경우 스피커 또는 녹음 장치)에 매핑되는 방식은 로컬 정책의 문제입니다. 그러나 정책에는 몇 가지 제약이 있습니다. 첫째, 동일한 유형의 여러 스트림을 수신하는 경우 각 스트림은 사용자에게 표시하기 위해 최소한 하나의 싱크에 매핑되어야 합니다. 즉, 동일한 유형의 여러 스트림을 수신하는 의도는 하나만 선택하는 것이 아니라 모두 병렬로 표시되어야 한다는 것입니다. 또 다른 제약은 여러 스트림을 수신하여 동일한 싱크로 보내는 경우 특정 미디어 방식으로 결합해야 한다는 것입니다. 예를 들어 두 개의 오디오 스트림의 경우 각각에서 수신된 미디어가 스피커에 매핑될 수 있습니다. 이 경우 결합 작업은 두 스트림을 혼합하는 것입니다. 싱크가 화면인 여러 인스턴트 메시징 스트림의 경우 결합 작업은 모든 스트림을 사용자 인터페이스에 표시하는 것입니다. 세 번째 제약은 여러 소스가 동일한 스트림에 매핑된 경우 해당 소스는 스트림으로 전송되기 전에 특정 미디어 방식으로 결합되어야 한다는 것입니다. 이러한 제약을 넘어서는 정책은 유연하지만, 에이전트는 컨퍼런스 서버가 아닌 한 싱크에서 소스로 미디어를 복사하는 정책을 일반적으로 원하지 않습니다(즉, 한 스트림에서 수신된 미디어를 다른 스트림으로 복사하지 마십시오).
