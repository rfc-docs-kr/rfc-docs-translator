"hash": |-
  b87b0d48e90f6bc88e6e7520f09cb5d439f42a65de56dc67b695d0f040be6c11
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     These goals are achieved by the handshake protocol, which can be
     summarized as follows: The client sends a ClientHello message to
     which the server must respond with a ServerHello message, or else a
     fatal error will occur and the connection will fail.  The ClientHello
     and ServerHello are used to establish security enhancement
     capabilities between client and server.  The ClientHello and
     ServerHello establish the following attributes: Protocol Version,
     Session ID, Cipher Suite, and Compression Method.  Additionally, two
     random values are generated and exchanged: ClientHello.random and
     ServerHello.random.
"fixed": |-
  These goals are achieved by the handshake protocol, which can be summarized as follows: The client sends a ClientHello message to which the server must respond with a ServerHello message, or else a fatal error will occur and the connection will fail.  The ClientHello and ServerHello are used to establish security enhancement capabilities between client and server.  The ClientHello and ServerHello establish the following attributes: Protocol Version, Session ID, Cipher Suite, and Compression Method.  Additionally, two random values are generated and exchanged: ClientHello.random and ServerHello.random.
"ko": |-
  이러한 목표는 다음과 같이 요약할 수 있는 핸드셰이크 프로토콜에 의해 달성됩니다. 클라이언트는 서버가 ServerHello 메시지로 응답해야 하는 ClientHello 메시지를 보냅니다. 그렇지 않으면 치명적인 오류가 발생하고 연결이 실패합니다. ClientHello 및 ServerHello는 클라이언트와 서버 간의 보안 강화 기능을 설정하는 데 사용됩니다. ClientHello 및 ServerHello는 프로토콜 버전, 세션 ID, 암호화 제품군 및 압축 방법과 같은 속성을 설정합니다. 또한 두 개의 임의 값(ClientHello.random 및 ServerHello.random)이 생성되고 교환됩니다.
