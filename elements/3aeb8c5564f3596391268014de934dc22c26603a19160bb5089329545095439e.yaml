"hash": |-
  3aeb8c5564f3596391268014de934dc22c26603a19160bb5089329545095439e
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     One possible approach is to document protocol options in a separate
     specification.  This keeps the main protocol specification clean and
     makes it clear that the options are not required to implement the
     protocol.  Regardless of whether they appear within the specification
     or in a separate document, the text shall discuss the full
     implications of either using the option or not, and the case for
     choosing either course.  As part of this, the author needs to
     consider and describe how the options are used alongside other
     protocols.  The text must also specify the default conditions of all
     options.  For security checking options the default condition is on
     or enabled.
"fixed": |-
  One possible approach is to document protocol options in a separate specification.  This keeps the main protocol specification clean and makes it clear that the options are not required to implement the protocol.  Regardless of whether they appear within the specification or in a separate document, the text shall discuss the full implications of either using the option or not, and the case for choosing either course.  As part of this, the author needs to consider and describe how the options are used alongside other protocols.  The text must also specify the default conditions of all options.  For security checking options the default condition is on or enabled.
"ko": |-
  한 가지 가능한 접근 방식은 프로토콜 옵션을 별도의 사양으로 문서화하는 것입니다. 이는 기본 프로토콜 사양을 깔끔하게 유지하고 프로토콜을 구현하는 데 옵션이 필요하지 않음을 명확하게 만듭니다. 사양 내에서나 별도의 문서에 나타나는지 여부에 관계없이 텍스트에서는 옵션 사용 여부와 두 과정을 선택하는 경우에 대한 전체 의미를 논의해야 합니다. 그 일환으로 작성자는 옵션이 다른 프로토콜과 함께 사용되는 방법을 고려하고 설명해야 합니다. 또한 텍스트는 모든 옵션의 기본 조건을 지정해야 합니다. 보안 검사 옵션의 경우 기본 조건은 켜져 있거나 활성화되어 있습니다.
