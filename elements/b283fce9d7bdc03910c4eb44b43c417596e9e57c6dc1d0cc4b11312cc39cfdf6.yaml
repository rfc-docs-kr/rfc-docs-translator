"hash": |-
  b283fce9d7bdc03910c4eb44b43c417596e9e57c6dc1d0cc4b11312cc39cfdf6
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     For the curves secp256r1, secp384r1, and secp521r1, peers MUST
     validate each other's public value Q by ensuring that the point is a
     valid point on the elliptic curve.  The appropriate validation
     procedures are defined in Section 4.3.7 of [ECDSA] and alternatively
     in Section 5.6.2.3 of [KEYAGREEMENT].  This process consists of three
     steps: (1) verify that Q is not the point at infinity (O), (2) verify
     that for Q = (x, y) both integers x and y are in the correct
     interval, and (3) ensure that (x, y) is a correct solution to the
     elliptic curve equation.  For these curves, implementors do not need
     to verify membership in the correct subgroup.
"fixed": |-
  For the curves secp256r1, secp384r1, and secp521r1, peers MUST validate each other's public value Q by ensuring that the point is a valid point on the elliptic curve.  The appropriate validation procedures are defined in Section 4.3.7 of [ECDSA] and alternatively in Section 5.6.2.3 of [KEYAGREEMENT].  This process consists of three steps: (1) verify that Q is not the point at infinity (O), (2) verify that for Q = (x, y) both integers x and y are in the correct interval, and (3) ensure that (x, y) is a correct solution to the elliptic curve equation.  For these curves, implementors do not need to verify membership in the correct subgroup.
"ko": |-
  곡선 secp256r1, secp384r1 및 secp521r1의 경우 피어는 해당 점이 타원 곡선의 유효한 점인지 확인하여 서로의 공개 값 Q를 검증해야 합니다. 적절한 검증 절차는 [ECDSA]의 섹션 4.3.7과 [KEYAGREEMENT]의 섹션 5.6.2.3에 정의되어 있습니다. 이 프로세스는 세 단계로 구성됩니다. (1) Q가 무한대(O)에 있는 점이 아닌지 확인하고, (2) Q = (x, y)에 대해 정수 x와 y가 모두 올바른 구간에 있는지 확인하고, (3) ) (x, y)가 타원 곡선 방정식에 대한 올바른 해인지 확인합니다. 이러한 곡선의 경우 구현자는 올바른 하위 그룹의 구성원인지 확인할 필요가 없습니다.
