"hash": |-
  0e01f65a828493754e500e3c31a8a4f3e08f6ba930095b6b2355139ea13ff922
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     HTTP hides the details of how a service is implemented by presenting
     a uniform interface to clients that is independent of the types of
     resources provided.  Likewise, servers do not need to be aware of
     each client's purpose: a request can be considered in isolation
     rather than being associated with a specific type of client or a
     predetermined sequence of application steps.  This allows general-
     purpose implementations to be used effectively in many different
     contexts, reduces interaction complexity, and enables independent
     evolution over time.
"fixed": |-
  HTTP hides the details of how a service is implemented by presenting a uniform interface to clients that is independent of the types of resources provided.  Likewise, servers do not need to be aware of each client's purpose: a request can be considered in isolation rather than being associated with a specific type of client or a predetermined sequence of application steps.  This allows general- purpose implementations to be used effectively in many different contexts, reduces interaction complexity, and enables independent evolution over time.
"ko": |-
  HTTP는 제공된 리소스 유형과 관계없이 클라이언트에 균일한 인터페이스를 제공하여 서비스 구현 방법에 대한 세부 정보를 숨깁니다. 마찬가지로, 서버는 각 클라이언트의 목적을 알 필요가 없습니다. 요청은 특정 유형의 클라이언트 또는 미리 결정된 애플리케이션 단계 순서와 연관되기보다는 별도로 고려될 수 있습니다. 이를 통해 범용 구현을 다양한 상황에서 효과적으로 사용할 수 있고 상호 작용 복잡성을 줄이며 시간이 지남에 따라 독립적인 발전이 가능합니다.
