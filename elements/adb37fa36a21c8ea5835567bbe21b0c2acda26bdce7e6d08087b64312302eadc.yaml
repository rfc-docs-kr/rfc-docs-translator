"hash": |-
  adb37fa36a21c8ea5835567bbe21b0c2acda26bdce7e6d08087b64312302eadc
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The RTSP session state machine describes the behavior of the protocol
     from RTSP session initialization through RTSP session termination.
     It is probably easiest to think of this as the server's state and
     then view the client as needing to track what it believes the
     server's state will be based on sent or received RTSP messages.
     Thus, in most cases, the state tables below can be read as: if the
     client does X, and assuming it fulfills any prerequisite(s), the
     (server) state will move to the new state and the indicated response
     will returned.  However, there are also server-to-client
     notifications or requests, where the action describes what
"fixed": |-
  The RTSP session state machine describes the behavior of the protocol from RTSP session initialization through RTSP session termination. It is probably easiest to think of this as the server's state and then view the client as needing to track what it believes the server's state will be based on sent or received RTSP messages. Thus, in most cases, the state tables below can be read as: if the client does X, and assuming it fulfills any prerequisite(s), the (server) state will move to the new state and the indicated response will returned.  However, there are also server-to-client notifications or requests, where the action describes what
"ko": |-
  RTSP 세션 상태 시스템은 RTSP 세션 초기화부터 RTSP 세션 종료까지 프로토콜의 동작을 설명합니다. 이것을 서버의 상태로 생각하고 클라이언트가 보내거나 받은 RTSP 메시지를 기반으로 서버의 상태가 무엇이라고 생각하는지 추적해야 한다고 보는 것이 가장 쉽습니다. 따라서 대부분의 경우 아래 상태 테이블은 다음과 같이 읽을 수 있습니다. 클라이언트가 X를 수행하고 전제 조건을 충족한다고 가정하면 (서버) 상태가 새 상태로 이동하고 표시된 응답이 반환됩니다. 그러나 서버-클라이언트 알림이나 요청도 있습니다. 여기서 작업은 무엇을 설명하는지
