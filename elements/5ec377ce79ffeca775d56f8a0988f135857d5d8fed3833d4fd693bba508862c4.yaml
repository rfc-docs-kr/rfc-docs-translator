"hash": |-
  5ec377ce79ffeca775d56f8a0988f135857d5d8fed3833d4fd693bba508862c4
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     where binL is the bin of node P's left-hand child and binR is the bin
     of node P's right-hand child.  Given that each node in the tree
     represents a subinterval of the original interval, each such
     subinterval now is addressable by a bin number, a single integer.
     The bin number tree of an interval of width W=8 looks like this:
"fixed": |-
  where binL is the bin of node P's left-hand child and binR is the bin of node P's right-hand child.  Given that each node in the tree represents a subinterval of the original interval, each such subinterval now is addressable by a bin number, a single integer. The bin number tree of an interval of width W=8 looks like this:
"ko": |-
  여기서 binL은 노드 P의 왼쪽 자식의 bin이고 binR은 노드 P의 오른쪽 자식의 bin입니다. 트리의 각 노드가 원래 간격의 하위 간격을 나타내는 경우 이제 이러한 각 하위 간격은 단일 정수인 Bin 번호로 주소를 지정할 수 있습니다. 너비 W=8 간격의 빈 번호 트리는 다음과 같습니다.
