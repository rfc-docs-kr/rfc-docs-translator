"hash": |-
  6d7c396b06d35aefec16e155708253479d3854373d260569192b9fd9a3312f73
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In Diffserv, the former precedence values are treated as Class
     Selector codepoints, and methods for compatible treatment are
     described in the Diffserv architecture.  The RFC TCP specification
     defined by RFCs 793 and 1122 included logic intending to have
     connections use the highest precedence requested by either endpoint
     application, and to keep the precedence consistent throughout a
     connection.  This logic from the obsolete TOS is not applicable to
     Diffserv and should not be included in TCP implementations, though
     changes to Diffserv values within a connection are discouraged.  For
     discussion of this, see RFC 7657 (Sections 5.1, 5.3, and 6) [50].
"fixed": |-
  In Diffserv, the former precedence values are treated as Class Selector codepoints, and methods for compatible treatment are described in the Diffserv architecture.  The RFC TCP specification defined by RFCs 793 and 1122 included logic intending to have connections use the highest precedence requested by either endpoint application, and to keep the precedence consistent throughout a connection.  This logic from the obsolete TOS is not applicable to Diffserv and should not be included in TCP implementations, though changes to Diffserv values within a connection are discouraged.  For discussion of this, see RFC 7657 (Sections 5.1, 5.3, and 6) [50].
"ko": |-
  Diffserv에서 이전 우선 순위 값은 클래스 선택기 코드 포인트로 처리되며 호환 가능한 처리 방법은 Diffserv 아키텍처에 설명되어 있습니다. RFC 793 및 1122에 의해 정의된 RFC TCP 사양에는 연결이 끝점 애플리케이션에서 요청한 가장 높은 우선 순위를 사용하고 연결 전체에서 우선 순위를 일관되게 유지하려는 논리가 포함되어 있습니다. 더 이상 사용되지 않는 TOS의 이 논리는 Diffserv에 적용되지 않으며 TCP 구현에 포함되어서는 안 됩니다. 단, 연결 내에서 Diffserv 값을 변경하는 것은 권장되지 않습니다. 이에 대한 논의는 RFC 7657(섹션 5.1, 5.3 및 6) [50]을 참조하세요.
