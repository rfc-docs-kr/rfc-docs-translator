"hash": |-
  8e08a86f6b310775ac8203d0f44407fdffcea09c16079b3d7fd242afad674a63
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Figure 1 shows all messages involved in the TLS key establishment
     protocol (aka full handshake).  The addition of ECC has direct impact
     only on the ClientHello, the ServerHello, the server's Certificate
     message, the ServerKeyExchange, the ClientKeyExchange, the
     CertificateRequest, the client's Certificate message, and the
     CertificateVerify.  Next, we describe the ECC key exchange algorithm
     in greater detail in terms of the content and processing of these
     messages.  For ease of exposition, we defer discussion of client
     authentication and associated messages (identified with a '+' in
     Figure 1) until Section 3 and of the optional ECC-specific extensions
     (which impact the Hello messages) until Section 4.
"fixed": |-
  Figure 1 shows all messages involved in the TLS key establishment protocol (aka full handshake).  The addition of ECC has direct impact only on the ClientHello, the ServerHello, the server's Certificate message, the ServerKeyExchange, the ClientKeyExchange, the CertificateRequest, the client's Certificate message, and the CertificateVerify.  Next, we describe the ECC key exchange algorithm in greater detail in terms of the content and processing of these messages.  For ease of exposition, we defer discussion of client authentication and associated messages (identified with a '+' in Figure 1) until Section 3 and of the optional ECC-specific extensions (which impact the Hello messages) until Section 4.
"ko": |-
  그림 1은 TLS 키 설정 프로토콜(전체 핸드셰이크라고도 함)과 관련된 모든 메시지를 보여줍니다. ECC 추가는 ClientHello, ServerHello, 서버의 인증서 메시지, ServerKeyExchange, ClientKeyExchange, CertificateRequest, 클라이언트의 인증서 메시지 및 CertificateVerify에만 직접적인 영향을 미칩니다. 다음으로 ECC 키 교환 알고리즘을 이러한 메시지의 내용과 처리 측면에서 더 자세히 설명합니다. 설명을 쉽게 하기 위해 클라이언트 인증 및 관련 메시지(그림 1에서 '+'로 식별됨)에 대한 논의는 섹션 3까지, 선택적 ECC 관련 확장(Hello 메시지에 영향을 줌)에 대한 논의는 섹션 4까지 연기합니다.
