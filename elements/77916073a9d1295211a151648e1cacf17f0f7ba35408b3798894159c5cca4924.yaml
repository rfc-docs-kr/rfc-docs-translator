"hash": |-
  77916073a9d1295211a151648e1cacf17f0f7ba35408b3798894159c5cca4924
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     One could think of CoAP logically as using a two-layer approach, a
     CoAP messaging layer used to deal with UDP and the asynchronous
     nature of the interactions, and the request/response interactions
     using Method and Response Codes (see Figure 1).  CoAP is however a
     single protocol, with messaging and request/response as just features
     of the CoAP header.
"fixed": |-
  One could think of CoAP logically as using a two-layer approach, a CoAP messaging layer used to deal with UDP and the asynchronous nature of the interactions, and the request/response interactions using Method and Response Codes (see Figure 1).  CoAP is however a single protocol, with messaging and request/response as just features of the CoAP header.
"ko": |-
  논리적으로 CoAP는 UDP와 상호 작용의 비동기 특성을 처리하는 데 사용되는 CoAP 메시징 계층, 메서드 및 응답 코드를 사용하는 요청/응답 상호 작용인 2계층 접근 방식을 사용하는 것으로 생각할 수 있습니다(그림 1 참조). 그러나 CoAP는 CoAP 헤더의 기능으로 메시징 및 요청/응답을 포함하는 단일 프로토콜입니다.
