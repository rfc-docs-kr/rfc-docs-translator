"hash": |-
  950fe4f6048315859a8410ae304ab829b33e08362d9d013ce54076aab1fbf31d
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Note: Prior to TLS 1.3, "certificate_list" ordering required each
     certificate to certify the one immediately preceding it; however,
     some implementations allowed some flexibility.  Servers sometimes
     send both a current and deprecated intermediate for transitional
     purposes, and others are simply configured incorrectly, but these
     cases can nonetheless be validated properly.  For maximum
     compatibility, all implementations SHOULD be prepared to handle
     potentially extraneous certificates and arbitrary orderings from any
     TLS version, with the exception of the end-entity certificate which
     MUST be first.
"fixed": |-
  Note: Prior to TLS 1.3, "certificate_list" ordering required each certificate to certify the one immediately preceding it; however, some implementations allowed some flexibility.  Servers sometimes send both a current and deprecated intermediate for transitional purposes, and others are simply configured incorrectly, but these cases can nonetheless be validated properly.  For maximum compatibility, all implementations SHOULD be prepared to handle potentially extraneous certificates and arbitrary orderings from any TLS version, with the exception of the end-entity certificate which MUST be first.
"ko": |-
  참고: TLS 1.3 이전에는 "certificate_list" 주문 시 각 인증서가 바로 앞의 인증서를 인증해야 했습니다. 그러나 일부 구현에서는 어느 정도 유연성이 허용되었습니다. 서버는 때때로 전환 ​​목적으로 현재 중간과 더 이상 사용되지 않는 중간을 모두 보내고 다른 것들은 단순히 잘못 구성되어 있지만 그럼에도 불구하고 이러한 경우는 적절하게 검증될 수 있습니다. 호환성을 최대화하기 위해 모든 구현은 반드시 첫 번째여야 하는 최종 엔터티 인증서를 제외하고 잠재적으로 관련 없는 인증서와 모든 TLS 버전의 임의 순서를 처리할 수 있도록 준비해야 합니다.
