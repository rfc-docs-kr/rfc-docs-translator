"hash": |-
  886ef5756563e2f290c52bed04fbffda4a57dfbd3f4af1bc0dda8ca4d20eee4a
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     When applications make reference to a URI, they do not always use the
     full form of reference defined by the "URI" syntax rule.  To save
     space and take advantage of hierarchical locality, many Internet
     protocol elements and media type formats allow an abbreviation of a
     URI, whereas others restrict the syntax to a particular form of URI.
     We define the most common forms of reference syntax in this
     specification because they impact and depend upon the design of the
     generic syntax, requiring a uniform parsing algorithm in order to be
     interpreted consistently.
"fixed": |-
  When applications make reference to a URI, they do not always use the full form of reference defined by the "URI" syntax rule.  To save space and take advantage of hierarchical locality, many Internet protocol elements and media type formats allow an abbreviation of a URI, whereas others restrict the syntax to a particular form of URI. We define the most common forms of reference syntax in this specification because they impact and depend upon the design of the generic syntax, requiring a uniform parsing algorithm in order to be interpreted consistently.
"ko": |-
  애플리케이션이 URI를 참조할 때 항상 "URI" 구문 규칙에 정의된 전체 참조 형식을 사용하지는 않습니다. 공간을 절약하고 계층적 지역성을 활용하기 위해 많은 인터넷 프로토콜 요소와 미디어 유형 형식에서는 URI의 약어를 허용하는 반면 다른 형식에서는 구문을 특정 형태의 URI로 제한합니다. 우리는 이 사양에서 참조 구문의 가장 일반적인 형태를 정의합니다. 왜냐하면 참조 구문은 일관되게 해석되기 위해 균일한 구문 분석 알고리즘이 필요한 일반 구문의 디자인에 영향을 미치고 이에 의존하기 때문입니다.
