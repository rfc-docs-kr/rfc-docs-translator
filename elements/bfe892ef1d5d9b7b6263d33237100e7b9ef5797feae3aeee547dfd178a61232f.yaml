"hash": |-
  bfe892ef1d5d9b7b6263d33237100e7b9ef5797feae3aeee547dfd178a61232f
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In addition, another socket option (TCP_NOTSENT_LOWAT) can be used to
     control the amount of unsent bytes in the write queue.  This can help
     a sending TCP application to avoid creating large amounts of buffered
     data (and corresponding latency).  As an example, this may be useful
     for applications that are multiplexing data from multiple upper-level
     streams onto a connection, especially when streams may be a mix of
     interactive/real-time and bulk data transfer.
"fixed": |-
  In addition, another socket option (TCP_NOTSENT_LOWAT) can be used to control the amount of unsent bytes in the write queue.  This can help a sending TCP application to avoid creating large amounts of buffered data (and corresponding latency).  As an example, this may be useful for applications that are multiplexing data from multiple upper-level streams onto a connection, especially when streams may be a mix of interactive/real-time and bulk data transfer.
"ko": |-
  또한 다른 소켓 옵션(TCP_NOTSENT_LOWAT)을 사용하여 쓰기 대기열에서 전송되지 않은 바이트의 양을 제어할 수 있습니다. 이는 송신 TCP 애플리케이션이 대량의 버퍼링된 데이터(및 해당 대기 시간) 생성을 방지하는 데 도움이 될 수 있습니다. 예를 들어, 이는 여러 상위 수준 스트림의 데이터를 연결로 멀티플렉싱하는 애플리케이션에 유용할 수 있으며, 특히 스트림이 대화형/실시간 및 대량 데이터 전송이 혼합된 경우 더욱 그렇습니다.
