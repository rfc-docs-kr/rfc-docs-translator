"hash": |-
  c71f8f071a6ca2f9e5f60cfc2f4a962be937f9286e00df1db2225f907f4cc28c
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Implementor's note: When session resumption is the primary use case
     of PSKs, the most straightforward way to implement the PSK/cipher
     suite matching requirements is to negotiate the cipher suite first
     and then exclude any incompatible PSKs.  Any unknown PSKs (e.g., ones
     not in the PSK database or encrypted with an unknown key) SHOULD
     simply be ignored.  If no acceptable PSKs are found, the server
     SHOULD perform a non-PSK handshake if possible.  If backward
     compatibility is important, client-provided, externally established
     PSKs SHOULD influence cipher suite selection.
"fixed": |-
  Implementor's note: When session resumption is the primary use case of PSKs, the most straightforward way to implement the PSK/cipher suite matching requirements is to negotiate the cipher suite first and then exclude any incompatible PSKs.  Any unknown PSKs (e.g., ones not in the PSK database or encrypted with an unknown key) SHOULD simply be ignored.  If no acceptable PSKs are found, the server SHOULD perform a non-PSK handshake if possible.  If backward compatibility is important, client-provided, externally established PSKs SHOULD influence cipher suite selection.
"ko": |-
  구현자 참고 사항: 세션 재개가 PSK의 기본 사용 사례인 경우 PSK/암호화 모음 일치 요구 사항을 구현하는 가장 간단한 방법은 먼저 암호 모음을 협상한 다음 호환되지 않는 PSK를 제외하는 것입니다. 알 수 없는 PSK(예: PSK 데이터베이스에 없거나 알 수 없는 키로 암호화된 PSK)는 무시해야 합니다. 허용 가능한 PSK가 발견되지 않으면 서버는 가능하면 PSK가 아닌 핸드셰이크를 수행해야 합니다(SHOULD). 이전 버전과의 호환성이 중요한 경우 클라이언트가 제공하고 외부에서 설정된 PSK가 암호 제품군 선택에 영향을 주어야 합니다.
