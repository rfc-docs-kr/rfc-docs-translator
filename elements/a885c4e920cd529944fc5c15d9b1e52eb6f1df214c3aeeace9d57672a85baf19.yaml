"hash": |-
  a885c4e920cd529944fc5c15d9b1e52eb6f1df214c3aeeace9d57672a85baf19
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Still, even if a UA encrypts its session descriptions, an attacker
     may try to guess the transport address used by the UA and send media
     packets to that address.  Guessing such a transport address is
     sometimes easier than it may seem because many UAs always pick up the
     same initial media port.  To prevent this situation, UAs SHOULD use
     media-level authentication mechanisms (e.g., Secure Realtime
     Transport Protocol (SRTP)[6]).  In addition, UAs that wish to keep
     their communications confidential SHOULD use media-level encryption
     mechanisms (e.g, SRTP [6]).
"fixed": |-
  Still, even if a UA encrypts its session descriptions, an attacker may try to guess the transport address used by the UA and send media packets to that address.  Guessing such a transport address is sometimes easier than it may seem because many UAs always pick up the same initial media port.  To prevent this situation, UAs SHOULD use media-level authentication mechanisms (e.g., Secure Realtime Transport Protocol (SRTP)[6]).  In addition, UAs that wish to keep their communications confidential SHOULD use media-level encryption mechanisms (e.g, SRTP [6]).
"ko": |-
  그래도 UA가 세션 설명을 암호화하더라도 공격자는 UA가 사용하는 전송 주소를 추측하여 해당 주소로 미디어 패킷을 보내려고 할 수 있습니다. 이러한 전송 주소를 추측하는 것은 많은 UA가 항상 동일한 초기 미디어 포트를 선택하기 때문에 생각보다 쉬운 경우가 있습니다. 이러한 상황을 방지하기 위해 UA는 미디어 수준 인증 메커니즘(예: Secure Realtime Transport Protocol(SRTP)[6])을 사용해야 합니다. 또한 통신을 기밀로 유지하려는 UA는 미디어 수준 암호화 메커니즘(예: SRTP[6])을 사용해야 합니다.
