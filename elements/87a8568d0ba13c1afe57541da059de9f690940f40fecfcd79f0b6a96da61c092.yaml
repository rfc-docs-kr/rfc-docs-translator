"hash": |-
  87a8568d0ba13c1afe57541da059de9f690940f40fecfcd79f0b6a96da61c092
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     In addition to calculating fresh AES keys for each nonce, these AEADs
     also calculate fresh POLYVAL keys.  Previous versions of GCM-SIV did
     not do this and instead used part of the AEAD's key as the POLYVAL
     key.  Bleichenbacher pointed out [Bleichenbacher16] that this allowed
     an attacker who controlled the AEAD key to force the POLYVAL key to
     be zero.  If a user of this AEAD authenticated messages with a secret
     additional-data value, then this would be insecure as the attacker
     could calculate a valid authenticator without knowing the input.
     This does not violate the standard properties of an AEAD as the
"fixed": |-
  In addition to calculating fresh AES keys for each nonce, these AEADs also calculate fresh POLYVAL keys.  Previous versions of GCM-SIV did not do this and instead used part of the AEAD's key as the POLYVAL key.  Bleichenbacher pointed out [Bleichenbacher16] that this allowed an attacker who controlled the AEAD key to force the POLYVAL key to be zero.  If a user of this AEAD authenticated messages with a secret additional-data value, then this would be insecure as the attacker could calculate a valid authenticator without knowing the input. This does not violate the standard properties of an AEAD as the
"ko": |-
  각 nonce에 대한 새로운 AES 키를 계산하는 것 외에도 이러한 AEAD는 새로운 POLYVAL 키도 계산합니다. 이전 버전의 GCM-SIV에서는 이 작업을 수행하지 않았으며 대신 AEAD 키의 일부를 POLYVAL 키로 사용했습니다. Bleichenbacher는 [Bleichenbacher16] 이로 인해 AEAD 키를 제어하는 ​​공격자가 POLYVAL 키를 0으로 만들 수 있다고 지적했습니다. 이 AEAD 사용자가 비밀 추가 데이터 값을 사용하여 메시지를 인증한 경우 공격자가 입력 내용을 알지 못한 채 유효한 인증자를 계산할 수 있으므로 이는 안전하지 않습니다. 이는 AEAD의 표준 속성을 위반하지 않습니다.
