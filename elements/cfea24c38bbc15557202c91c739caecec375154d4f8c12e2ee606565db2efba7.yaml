"hash": |-
  cfea24c38bbc15557202c91c739caecec375154d4f8c12e2ee606565db2efba7
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Validators come in two flavors: strong or weak.  Weak validators are
     easy to generate but are far less useful for comparisons.  Strong
     validators are ideal for comparisons but can be very difficult (and
     occasionally impossible) to generate efficiently.  Rather than impose
     that all forms of resource adhere to the same strength of validator,
     HTTP exposes the type of validator in use and imposes restrictions on
     when weak validators can be used as preconditions.
"fixed": |-
  Validators come in two flavors: strong or weak.  Weak validators are easy to generate but are far less useful for comparisons.  Strong validators are ideal for comparisons but can be very difficult (and occasionally impossible) to generate efficiently.  Rather than impose that all forms of resource adhere to the same strength of validator, HTTP exposes the type of validator in use and imposes restrictions on when weak validators can be used as preconditions.
"ko": |-
  유효성 검사기는 강함과 약함의 두 가지 형태로 제공됩니다. 약한 유효성 검사기는 생성하기 쉽지만 비교에 훨씬 덜 유용합니다. 강력한 유효성 검사기는 비교에 이상적이지만 효율적으로 생성하기가 매우 어려울 수 있습니다(때로는 불가능할 수도 있음). 모든 형태의 리소스가 동일한 유효성 검사기 강도를 준수하도록 강요하는 대신 HTTP는 사용 중인 유효성 검사기 유형을 노출하고 약한 유효성 검사기를 전제 조건으로 사용할 수 있는 경우에 대한 제한을 부과합니다.
