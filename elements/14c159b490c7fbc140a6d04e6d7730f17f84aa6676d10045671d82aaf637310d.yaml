"hash": |-
  14c159b490c7fbc140a6d04e6d7730f17f84aa6676d10045671d82aaf637310d
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
    /*
     * Check to see if the current message block is too small to hold
     * the initial padding bits and length.  If so, we will pad the
     * block, process it, and then continue padding into a second
     * block.
     */
    if (context->Message_Block_Index >= (SHA256_Message_Block_Size-8)) {
      context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
      while (context->Message_Block_Index < SHA256_Message_Block_Size)
        context->Message_Block[context->Message_Block_Index++] = 0;
      SHA224_256ProcessMessageBlock(context);
    } else
      context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
"fixed": |-
  /* * Check to see if the current message block is too small to hold * the initial padding bits and length.  If so, we will pad the * block, process it, and then continue padding into a second * block. */ if (context->Message_Block_Index >= (SHA256_Message_Block_Size-8)) { context->Message_Block[context->Message_Block_Index++] = Pad_Byte; while (context->Message_Block_Index < SHA256_Message_Block_Size) context->Message_Block[context->Message_Block_Index++] = 0; SHA224_256ProcessMessageBlock(context); } else context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
"ko": |-
  /* * 현재 메시지 블록이 초기 패딩 비트와 길이를 담기에 * 너무 작은지 확인하십시오. 그렇다면 * 블록을 채우고 처리한 다음 두 번째 * 블록에 계속 패딩합니다. */ if (context->Message_Block_Index >= (SHA256_Message_Block_Size-8)) { context->Message_Block[context->Message_Block_Index++] = Pad_Byte; while (context->Message_Block_Index < SHA256_Message_Block_Size) 컨텍스트->Message_Block[context->Message_Block_Index++] = 0; SHA224_256ProcessMessageBlock(컨텍스트); } else context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
