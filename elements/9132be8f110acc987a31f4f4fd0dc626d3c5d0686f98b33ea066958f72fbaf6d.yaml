"hash": |-
  9132be8f110acc987a31f4f4fd0dc626d3c5d0686f98b33ea066958f72fbaf6d
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     As a simple example of recovery from old duplicates, consider
     Figure 8.  At line 3, an old duplicate SYN arrives at TCP Peer B.
     TCP Peer B cannot tell that this is an old duplicate, so it responds
     normally (line 4).  TCP Peer A detects that the ACK field is
     incorrect and returns a RST (reset) with its SEQ field selected to
     make the segment believable.  TCP Peer B, on receiving the RST,
     returns to the LISTEN state.  When the original SYN finally arrives
     at line 6, the synchronization proceeds normally.  If the SYN at line
     6 had arrived before the RST, a more complex exchange might have
     occurred with RSTs sent in both directions.
"fixed": |-
  As a simple example of recovery from old duplicates, consider Figure 8.  At line 3, an old duplicate SYN arrives at TCP Peer B. TCP Peer B cannot tell that this is an old duplicate, so it responds normally (line 4).  TCP Peer A detects that the ACK field is incorrect and returns a RST (reset) with its SEQ field selected to make the segment believable.  TCP Peer B, on receiving the RST, returns to the LISTEN state.  When the original SYN finally arrives at line 6, the synchronization proceeds normally.  If the SYN at line 6 had arrived before the RST, a more complex exchange might have occurred with RSTs sent in both directions.
"ko": |-
  오래된 중복으로부터 복구하는 간단한 예로 그림 8을 고려하십시오. 3행에서 오래된 중복 SYN이 TCP 피어 B에 도착합니다. TCP 피어 B는 이것이 오래된 중복임을 알 수 없으므로 정상적으로 응답합니다(4행). TCP 피어 A는 ACK 필드가 잘못되었음을 감지하고 세그먼트를 믿을 수 있도록 선택된 SEQ 필드와 함께 RST(재설정)를 반환합니다. RST를 수신한 TCP 피어 B는 LISTEN 상태로 돌아갑니다. 원래 SYN이 마침내 라인 6에 도착하면 동기화가 정상적으로 진행됩니다. 6행의 SYN이 RST보다 먼저 도착했다면 RST가 양방향으로 전송되어 더 복잡한 교환이 발생했을 수 있습니다.
