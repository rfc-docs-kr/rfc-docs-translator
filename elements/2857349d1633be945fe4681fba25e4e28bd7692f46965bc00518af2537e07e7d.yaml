"hash": |-
  2857349d1633be945fe4681fba25e4e28bd7692f46965bc00518af2537e07e7d
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Implementation Note:  A client that receives a response in a CON
        message may want to clean up the message state right after sending
        the ACK.  If that ACK is lost and the server retransmits the CON,
        the client may no longer have any state to which to correlate this
        response, making the retransmission an unexpected message; the
        client will likely send a Reset message so it does not receive any
        more retransmissions.  This behavior is normal and not an
        indication of an error.  (Clients that are not aggressively
        optimized in their state memory usage will still have message
        state that will identify the second CON as a retransmission.
        Clients that actually expect more messages from the server
        [OBSERVE] will have to keep state in any case.)
"fixed": |-
  Implementation Note:  A client that receives a response in a CON message may want to clean up the message state right after sending the ACK.  If that ACK is lost and the server retransmits the CON, the client may no longer have any state to which to correlate this response, making the retransmission an unexpected message; the client will likely send a Reset message so it does not receive any more retransmissions.  This behavior is normal and not an indication of an error.  (Clients that are not aggressively optimized in their state memory usage will still have message state that will identify the second CON as a retransmission. Clients that actually expect more messages from the server [OBSERVE] will have to keep state in any case.)
"ko": |-
  구현 참고 사항: CON 메시지로 응답을 받은 클라이언트는 ACK를 보낸 직후 메시지 상태를 정리할 수 있습니다. 해당 ACK가 손실되고 서버가 CON을 재전송하는 경우 클라이언트는 더 이상 이 응답을 연관시킬 수 있는 상태가 없어 재전송이 예상치 못한 메시지가 될 수 있습니다. 클라이언트는 더 이상 재전송을 받지 않도록 재설정 메시지를 보낼 가능성이 높습니다. 이 동작은 정상적인 현상이며 오류가 아닙니다. (상태 메모리 사용이 적극적으로 최적화되지 않은 클라이언트는 여전히 두 번째 CON을 재전송으로 식별하는 메시지 상태를 갖게 됩니다. 실제로 서버 [OBSERVE]에서 더 많은 메시지를 기대하는 클라이언트는 어떤 경우에도 상태를 유지해야 합니다.)
