"hash": |-
  e97a1728ba602aa35861e920d31ae625ec76ae2cf38f69601612f0e36b4ca4c0
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Either technique used alone is vulnerable to man-in-the-middle
     attacks and therefore unsafe for general use.  However, it is also
     possible to bind such connections to an external authentication
     mechanism via out-of-band validation of the server's public key,
     trust on first use, or a mechanism such as channel bindings (though
     the channel bindings described in [RFC5929] are not defined for
     TLS 1.3).  If no such mechanism is used, then the connection has no
     protection against active man-in-the-middle attack; applications
     MUST NOT use TLS in such a way absent explicit configuration or a
     specific application profile.
"fixed": |-
  Either technique used alone is vulnerable to man-in-the-middle attacks and therefore unsafe for general use.  However, it is also possible to bind such connections to an external authentication mechanism via out-of-band validation of the server's public key, trust on first use, or a mechanism such as channel bindings (though the channel bindings described in [RFC5929] are not defined for TLS 1.3).  If no such mechanism is used, then the connection has no protection against active man-in-the-middle attack; applications MUST NOT use TLS in such a way absent explicit configuration or a specific application profile.
"ko": |-
  단독으로 사용되는 기술은 중간자 공격에 취약하므로 일반적인 사용에는 안전하지 않습니다. 그러나 서버 공개 키의 대역 외 검증, 최초 사용 시 신뢰 또는 채널 바인딩([RFC5929]에 설명된 채널 바인딩과 같은 메커니즘)을 통해 이러한 연결을 외부 인증 메커니즘에 바인딩하는 것도 가능합니다. TLS 1.3에는 정의되지 않았습니다). 그러한 메커니즘이 사용되지 않으면 연결은 활성 중간자 공격으로부터 보호되지 않습니다. 애플리케이션은 명시적인 구성이나 특정 애플리케이션 프로필이 없는 방식으로 TLS를 사용해서는 안 됩니다.
