"hash": |-
  5b764662d52c4ee769f8e1609584571c9bc9c77dfed722515ef38d412290538c
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Not all schemes that encode information losslessly for machine
        processing are efficient in terms of minimizing the number of
        output bits. For example, ASCII encoding is lossless, but ASCII
        data can often be losslessly reencoded in fewer bits with other
        schemes. These more efficient schemes take advantage of some sort
        of inherent imbalance, redundancy, or repetition in the data, such
        as by replacing a character string in which all characters are the
        same by a shorter string consisting of only the single character
        and a character count.
"fixed": |-
  - Not all schemes that encode information losslessly for machine processing are efficient in terms of minimizing the number of output bits. For example, ASCII encoding is lossless, but ASCII data can often be losslessly reencoded in fewer bits with other schemes. These more efficient schemes take advantage of some sort of inherent imbalance, redundancy, or repetition in the data, such as by replacing a character string in which all characters are the same by a shorter string consisting of only the single character and a character count.
"ko": |-
  - 기계 처리를 위해 정보를 무손실로 인코딩하는 방식이 모두 출력 비트 수를 최소화하는 측면에서 효율적인 것은 아닙니다. 예를 들어, ASCII 인코딩은 무손실이지만 ASCII 데이터는 종종 다른 체계를 사용하여 더 적은 비트로 무손실로 다시 인코딩될 수 있습니다. 이러한 보다 효율적인 체계는 모든 문자가 동일한 문자열을 단일 문자와 문자 수로만 구성된 더 짧은 문자열로 바꾸는 등 데이터의 일종의 고유한 불균형, 중복성 또는 반복을 활용합니다.
