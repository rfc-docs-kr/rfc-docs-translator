"hash": |-
  c40263f5adc2610bd9192c5bb91aed4a3729958ce7075678730fc526a4fbc090
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     -  Extensions should, as far as possible, be designed to prevent any
        attack that forces use (or non-use) of a particular feature by
        manipulation of handshake messages.  This principle should be
        followed regardless of whether the feature is believed to cause a
        security problem.  Often the fact that the extension fields are
        included in the inputs to the Finished message hashes will be
        sufficient, but extreme care is needed when the extension changes
        the meaning of messages sent in the handshake phase.  Designers
        and implementors should be aware of the fact that until the
        handshake has been authenticated, active attackers can modify
        messages and insert, remove, or replace extensions.
"fixed": |-
  -  Extensions should, as far as possible, be designed to prevent any attack that forces use (or non-use) of a particular feature by manipulation of handshake messages.  This principle should be followed regardless of whether the feature is believed to cause a security problem.  Often the fact that the extension fields are included in the inputs to the Finished message hashes will be sufficient, but extreme care is needed when the extension changes the meaning of messages sent in the handshake phase.  Designers and implementors should be aware of the fact that until the handshake has been authenticated, active attackers can modify messages and insert, remove, or replace extensions.
"ko": |-
  - 확장은 가능한 한 핸드셰이크 메시지를 조작하여 특정 기능을 강제로 사용(또는 사용하지 않음)하는 공격을 방지하도록 설계되어야 합니다. 해당 기능이 보안 문제를 일으키는 것으로 판단되는지 여부에 관계없이 이 원칙을 따라야 합니다. 종료된 메시지 해시에 대한 입력에 확장 필드가 포함되어 있다는 사실만으로도 충분할 수 있지만 확장이 핸드셰이크 단계에서 전송된 메시지의 의미를 변경할 때는 각별한 주의가 필요합니다. 설계자와 구현자는 핸드셰이크가 인증될 때까지 적극적인 공격자가 메시지를 수정하고 확장을 삽입, 제거 또는 교체할 수 있다는 사실을 알고 있어야 합니다.
