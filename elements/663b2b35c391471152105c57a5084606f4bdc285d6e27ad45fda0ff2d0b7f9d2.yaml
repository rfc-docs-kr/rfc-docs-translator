"hash": |-
  663b2b35c391471152105c57a5084606f4bdc285d6e27ad45fda0ff2d0b7f9d2
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The HTTP interface for a resource is just as likely to be implemented
     as a tree of content objects, a programmatic view on various database
     records, or a gateway to other information systems.  Even when the
     URI mapping mechanism is tied to a file system, an origin server
     might be configured to execute the files with the request as input
     and send the output as the representation rather than transfer the
     files directly.  Regardless, only the origin server needs to know how
     each resource identifier corresponds to an implementation and how
     that implementation manages to select and send a current
     representation of the target resource.
"fixed": |-
  The HTTP interface for a resource is just as likely to be implemented as a tree of content objects, a programmatic view on various database records, or a gateway to other information systems.  Even when the URI mapping mechanism is tied to a file system, an origin server might be configured to execute the files with the request as input and send the output as the representation rather than transfer the files directly.  Regardless, only the origin server needs to know how each resource identifier corresponds to an implementation and how that implementation manages to select and send a current representation of the target resource.
"ko": |-
  리소스에 대한 HTTP 인터페이스는 콘텐츠 개체 트리, 다양한 데이터베이스 레코드에 대한 프로그래밍 방식 보기 또는 다른 정보 시스템에 대한 게이트웨이로 구현될 가능성이 높습니다. URI 매핑 메커니즘이 파일 시스템에 연결되어 있는 경우에도 원본 서버는 파일을 직접 전송하는 대신 요청을 입력으로 사용하여 파일을 실행하고 출력을 표현으로 보내도록 구성될 수 있습니다. 그럼에도 불구하고, 원본 서버만이 각 리소스 식별자가 구현에 어떻게 대응하는지, 해당 구현이 대상 리소스의 현재 표현을 선택하고 보내는 방법을 알아야 합니다.
