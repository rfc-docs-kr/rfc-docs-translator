"hash": |-
  633a532995f3617798b566c5df7848599d72cbaddaaee6663ab5418d4653841e
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     We have implicitly assumed an asynchronous user interface in which a
     SEND later elicits some kind of SIGNAL or pseudo-interrupt from the
     serving TCP endpoint.  An alternative is to return a response
     immediately.  For instance, SENDs might return immediate local
     acknowledgment, even if the segment sent had not been acknowledged by
     the distant TCP endpoint.  We could optimistically assume eventual
     success.  If we are wrong, the connection will close anyway due to
     the timeout.  In implementations of this kind (synchronous), there
     will still be some asynchronous signals, but these will deal with the
     connection itself, and not with specific segments or buffers.
"fixed": |-
  We have implicitly assumed an asynchronous user interface in which a SEND later elicits some kind of SIGNAL or pseudo-interrupt from the serving TCP endpoint.  An alternative is to return a response immediately.  For instance, SENDs might return immediate local acknowledgment, even if the segment sent had not been acknowledged by the distant TCP endpoint.  We could optimistically assume eventual success.  If we are wrong, the connection will close anyway due to the timeout.  In implementations of this kind (synchronous), there will still be some asynchronous signals, but these will deal with the connection itself, and not with specific segments or buffers.
"ko": |-
  우리는 SEND가 나중에 서비스 제공 TCP 끝점에서 일종의 SIGNAL 또는 의사 인터럽트를 유도하는 비동기 사용자 인터페이스를 암시적으로 가정했습니다. 대안은 즉시 응답을 반환하는 것입니다. 예를 들어, 전송된 세그먼트가 먼 TCP 끝점에서 확인되지 않은 경우에도 SEND는 즉각적인 로컬 확인을 반환할 수 있습니다. 우리는 궁극적인 성공을 낙관적으로 가정할 수 있습니다. 우리가 틀렸다면 시간 초과로 인해 연결이 종료됩니다. 이러한 종류의 구현(동기식)에는 여전히 일부 비동기식 신호가 있지만 이는 특정 세그먼트나 버퍼가 아닌 연결 자체를 처리합니다.
