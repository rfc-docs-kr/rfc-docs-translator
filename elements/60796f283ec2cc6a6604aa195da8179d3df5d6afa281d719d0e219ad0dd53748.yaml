"hash": |-
  60796f283ec2cc6a6604aa195da8179d3df5d6afa281d719d0e219ad0dd53748
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The pseudocode also refers to a "remove_dot_segments" routine for
     interpreting and removing the special "." and ".." complete path
     segments from a referenced path.  This is done after the path is
     extracted from a reference, whether or not the path was relative, in
     order to remove any invalid or extraneous dot-segments prior to
     forming the target URI.  Although there are many ways to accomplish
     this removal process, we describe a simple method using two string
     buffers.
"fixed": |-
  The pseudocode also refers to a "remove_dot_segments" routine for interpreting and removing the special "." and ".." complete path segments from a referenced path.  This is done after the path is extracted from a reference, whether or not the path was relative, in order to remove any invalid or extraneous dot-segments prior to forming the target URI.  Although there are many ways to accomplish this removal process, we describe a simple method using two string buffers.
"ko": |-
  의사코드는 또한 특수 "."를 해석하고 제거하기 위한 "remove_dot_segments" 루틴을 참조합니다. 및 ".."는 참조된 경로의 전체 경로 세그먼트입니다. 이는 대상 URI를 형성하기 전에 유효하지 않거나 관련 없는 점 세그먼트를 제거하기 위해 경로가 상대 경로인지 여부에 관계없이 참조에서 경로가 추출된 후에 수행됩니다. 이 제거 프로세스를 수행하는 방법에는 여러 가지가 있지만 두 개의 문자열 버퍼를 사용하는 간단한 방법을 설명합니다.
