"hash": |-
  f2c8c224fd652cbd9498234a8aadbdb86b010b4bc5eafe4e1711a598ae3294eb
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     If several handshakes are performed in close succession, there might
     be multiple records on the wire with the same sequence number but
     from different cipher states.  The epoch field allows recipients to
     distinguish such packets.  The epoch number is initially zero and is
     incremented each time a ChangeCipherSpec message is sent.  In order
     to ensure that any given sequence/epoch pair is unique,
     implementations MUST NOT allow the same epoch value to be reused
     within two times the TCP maximum segment lifetime.  In practice, TLS
     implementations rarely rehandshake; therefore, we do not expect this
     to be a problem.
"fixed": |-
  If several handshakes are performed in close succession, there might be multiple records on the wire with the same sequence number but from different cipher states.  The epoch field allows recipients to distinguish such packets.  The epoch number is initially zero and is incremented each time a ChangeCipherSpec message is sent.  In order to ensure that any given sequence/epoch pair is unique, implementations MUST NOT allow the same epoch value to be reused within two times the TCP maximum segment lifetime.  In practice, TLS implementations rarely rehandshake; therefore, we do not expect this to be a problem.
"ko": |-
  여러 핸드셰이크가 연속적으로 수행되는 경우 회선에 시퀀스 번호는 동일하지만 암호화 상태가 다른 여러 레코드가 있을 수 있습니다. epoch 필드를 사용하면 수신자가 이러한 패킷을 구별할 수 있습니다. 에포크 번호는 처음에는 0이며 ChangeCipherSpec 메시지가 전송될 때마다 증가됩니다. 주어진 시퀀스/에포크 쌍이 고유하다는 것을 보장하기 위해 구현에서는 TCP 최대 세그먼트 수명의 2배 내에서 동일한 에포크 값이 재사용되는 것을 허용해서는 안 됩니다. 실제로 TLS 구현은 재핸드셰이크를 거의 수행하지 않습니다. 따라서 이것이 문제가 될 것으로 예상하지 않습니다.
