"hash": |-
  c4fb424ed8540d3df7498d35ed61341de78b0b83695aae51be4ac304b8951183
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     When an application uses client-side mechanisms to construct a target
     URI out of user-provided information, such as the query fields of a
     form using GET, potentially sensitive data might be provided that
     would not be appropriate for disclosure within a URI.  POST is often
     preferred in such cases because it usually doesn't construct a URI;
     instead, POST of a form transmits the potentially sensitive data in
     the request content.  However, this hinders caching and uses an
     unsafe method for what would otherwise be a safe request.
     Alternative workarounds include transforming the user-provided data
     prior to constructing the URI or filtering the data to only include
     common values that are not sensitive.  Likewise, redirecting the
     result of a query to a different (server-generated) URI can remove
     potentially sensitive data from later links and provide a cacheable
     response for later reuse.
"fixed": |-
  When an application uses client-side mechanisms to construct a target URI out of user-provided information, such as the query fields of a form using GET, potentially sensitive data might be provided that would not be appropriate for disclosure within a URI.  POST is often preferred in such cases because it usually doesn't construct a URI; instead, POST of a form transmits the potentially sensitive data in the request content.  However, this hinders caching and uses an unsafe method for what would otherwise be a safe request. Alternative workarounds include transforming the user-provided data prior to constructing the URI or filtering the data to only include common values that are not sensitive.  Likewise, redirecting the result of a query to a different (server-generated) URI can remove potentially sensitive data from later links and provide a cacheable response for later reuse.
"ko": |-
  애플리케이션이 클라이언트 측 메커니즘을 사용하여 GET을 사용하는 양식의 쿼리 필드와 같이 사용자 제공 정보에서 대상 URI를 구성하는 경우 URI 내 공개에 적합하지 않은 잠재적으로 민감한 데이터가 제공될 수 있습니다. POST는 일반적으로 URI를 구성하지 않기 때문에 이러한 경우에 선호되는 경우가 많습니다. 대신 양식의 POST는 요청 콘텐츠에 잠재적으로 민감한 데이터를 전송합니다. 그러나 이는 캐싱을 방해하고 그렇지 않으면 안전한 요청에 대해 안전하지 않은 방법을 사용합니다. 대체 해결 방법에는 URI를 구성하기 전에 사용자가 제공한 데이터를 변환하거나 중요하지 않은 일반 값만 포함하도록 데이터를 필터링하는 것이 포함됩니다. 마찬가지로 쿼리 결과를 다른(서버 생성) URI로 리디렉션하면 이후 링크에서 잠재적으로 민감한 데이터를 제거하고 나중에 재사용할 수 있도록 캐시 가능한 응답을 제공할 수 있습니다.
