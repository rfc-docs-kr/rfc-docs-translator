"hash": |-
  f2d59767a1124d2672074ec575650ceb0b52473c83d1ef40bce3581a696176ce
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     While these are not the only options, they illustrate the
     implications for revocation.  In the latter case, the authorization
     server is able to revoke an access token previously issued to a
     client when the resource server relays a received access token.  In
     the former case, some (currently non-standardized) backend
     interaction between the authorization server and the resource server
     may be used when immediate access token revocation is desired.
     Another design alternative is to issue short-lived access tokens,
     which can be refreshed at any time using the corresponding refresh
     tokens.  This allows the authorization server to impose a limit on
     the time revoked when access tokens are in use.
"fixed": |-
  While these are not the only options, they illustrate the implications for revocation.  In the latter case, the authorization server is able to revoke an access token previously issued to a client when the resource server relays a received access token.  In the former case, some (currently non-standardized) backend interaction between the authorization server and the resource server may be used when immediate access token revocation is desired. Another design alternative is to issue short-lived access tokens, which can be refreshed at any time using the corresponding refresh tokens.  This allows the authorization server to impose a limit on the time revoked when access tokens are in use.
"ko": |-
  이것이 유일한 옵션은 아니지만 해지에 대한 의미를 보여줍니다.  후자의 경우, 리소스 서버가 수신한 액세스 토큰을 중계할 때 Authorization 서버는 클라이언트에게 이전에 발급한 액세스 토큰을 취소할 수 있다.  전자의 경우, 즉각적인 액세스 토큰 취소가 필요할 때 승인 서버와 리소스 서버 간의 일부(현재는 표준화되지 않은) 백엔드 상호 작용이 사용될 수 있습니다. 또 다른 설계 대안은 해당 새로 고침 토큰을 사용하여 언제든지 새로 고칠 수 있는 단기 액세스 토큰을 발급하는 것입니다.  이를 통해 인증 서버는 액세스 토큰이 사용 중일 때 취소되는 시간에 제한을 가할 수 있습니다.
