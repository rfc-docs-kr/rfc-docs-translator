"hash": |-
  3d46e0de44e1e04ef4d965a2d9a63a55145eb5d144aa277aa29e181d7596849d
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Establishing Authority:  RTSP shares with HTTP the question of how a
           client communicates with the authoritative source for media
           streams (Section 9.1 of [RFC7230]).  The used DNS servers, the
           security of the communication, and any possibility of a man in
           the middle, and the trust in any RTSP proxies all affect the
           possibility that a client has received a non-authoritative
           response to a request.  Ensuring that a client receives an
           authoritative response is challenging, although using the
           secure communication for RTSP signaling (rtsps) simplifies it
           significantly as the server can provide a hostname identity
           assertion in the TLS handshake.
"fixed": |-
  Establishing Authority:  RTSP shares with HTTP the question of how a client communicates with the authoritative source for media streams (Section 9.1 of [RFC7230]).  The used DNS servers, the security of the communication, and any possibility of a man in the middle, and the trust in any RTSP proxies all affect the possibility that a client has received a non-authoritative response to a request.  Ensuring that a client receives an authoritative response is challenging, although using the secure communication for RTSP signaling (rtsps) simplifies it significantly as the server can provide a hostname identity assertion in the TLS handshake.
"ko": |-
  권한 설정: RTSP는 클라이언트가 미디어 스트림에 대한 권한 있는 소스와 어떻게 통신하는지에 대한 질문을 HTTP와 공유합니다([RFC7230]의 섹션 9.1). 사용된 DNS 서버, 통신 보안, 중간자 가능성, RTSP 프록시에 대한 신뢰 등은 모두 클라이언트가 요청에 대해 신뢰할 수 없는 응답을 받았을 가능성에 영향을 미칩니다. 클라이언트가 신뢰할 수 있는 응답을 수신하는지 확인하는 것은 어려운 일이지만, RTSP 신호(rtsps)에 보안 통신을 사용하면 서버가 TLS 핸드셰이크에서 호스트 이름 ID 어설션을 제공할 수 있으므로 상당히 단순화됩니다.
