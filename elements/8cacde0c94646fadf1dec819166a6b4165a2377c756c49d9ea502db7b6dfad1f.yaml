"hash": |-
  8cacde0c94646fadf1dec819166a6b4165a2377c756c49d9ea502db7b6dfad1f
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     A peer knowing which nodes contain the peak hashes for the file can
     therefore calculate the number of chunks it consists of; thus, it
     gets an estimate of the file size (given all chunks but the last are
     of a fixed size).  Which nodes are the peaks can be securely
     communicated from one (untrusted) peer, Peer A, to another peer, Peer
     B, by letting Peer A send the peak hashes and their node IDs to Peer
"fixed": |-
  A peer knowing which nodes contain the peak hashes for the file can therefore calculate the number of chunks it consists of; thus, it gets an estimate of the file size (given all chunks but the last are of a fixed size).  Which nodes are the peaks can be securely communicated from one (untrusted) peer, Peer A, to another peer, Peer B, by letting Peer A send the peak hashes and their node IDs to Peer
"ko": |-
  따라서 파일의 최고 해시가 포함된 노드를 알고 있는 피어는 해당 파일로 구성된 청크 수를 계산할 수 있습니다. 따라서 파일 크기의 추정치를 얻습니다(마지막 청크를 제외한 모든 청크가 고정된 크기인 경우). 어떤 노드가 피크인지는 피어 A가 피크 해시와 해당 노드 ID를 피어에게 보내도록 함으로써 하나의 (신뢰할 수 없는) 피어인 피어 A에서 다른 피어인 피어 B로 안전하게 통신할 수 있습니다.
