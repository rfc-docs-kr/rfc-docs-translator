"hash": |-
  b830aed68b0ad260bb7f43ec8fa8ddb4bd563e790ba14a2cafc8c0bd25a60505
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     AES-GCM-SIV decryption involves first producing an unauthenticated
     plaintext.  This plaintext is vulnerable to manipulation by an
     attacker; thus, if an implementation released some or all of the
     plaintext before authenticating it, other parts of a system may
     process malicious data as if it were authentic.  AES-GCM might be
     less likely to lead implementations to do this because there the
     ciphertext is generally authenticated before, or concurrently with,
     the plaintext calculation.  Therefore, this text requires that
     implementations MUST NOT release unauthenticated plaintext.  Thus,
     system designers should consider memory limitations when picking the
"fixed": |-
  AES-GCM-SIV decryption involves first producing an unauthenticated plaintext.  This plaintext is vulnerable to manipulation by an attacker; thus, if an implementation released some or all of the plaintext before authenticating it, other parts of a system may process malicious data as if it were authentic.  AES-GCM might be less likely to lead implementations to do this because there the ciphertext is generally authenticated before, or concurrently with, the plaintext calculation.  Therefore, this text requires that implementations MUST NOT release unauthenticated plaintext.  Thus, system designers should consider memory limitations when picking the
"ko": |-
  AES-GCM-SIV 암호 해독에서는 먼저 인증되지 않은 일반 텍스트를 생성합니다. 이 일반 텍스트는 공격자의 조작에 취약합니다. 따라서 구현이 일반 텍스트의 일부 또는 전부를 인증하기 전에 공개한 경우 시스템의 다른 부분에서는 악성 데이터가 진짜인 것처럼 처리할 수 있습니다. AES-GCM은 일반적으로 일반 텍스트 계산 전 또는 동시에 암호문이 인증되기 때문에 구현이 이를 수행하도록 유도할 가능성이 적습니다. 따라서 이 텍스트에서는 구현 시 인증되지 않은 일반 텍스트를 공개해서는 안 된다고 요구합니다. 따라서 시스템 설계자는 메모리 제한을 고려해야 합니다.
