"hash": |-
  4ebec0acd9d8b723f2579a7d028e908a0bcd73eab751e17ea2a46571efd3e302
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Authoritative access refers to dereferencing a given identifier, for
     the sake of access to the identified resource, in a way that the
     client believes is authoritative (controlled by the resource owner).
     The process for determining whether access is granted is defined by
     the URI scheme and often uses data within the URI components, such as
     the authority component when the generic syntax is used.  However,
     authoritative access is not limited to the identified mechanism.
"fixed": |-
  Authoritative access refers to dereferencing a given identifier, for the sake of access to the identified resource, in a way that the client believes is authoritative (controlled by the resource owner). The process for determining whether access is granted is defined by the URI scheme and often uses data within the URI components, such as the authority component when the generic syntax is used.  However, authoritative access is not limited to the identified mechanism.
"ko": |-
  권한 있는 액세스는 식별된 리소스에 액세스하기 위해 클라이언트가 권한이 있다고 믿는 방식(리소스 소유자에 의해 제어됨)으로 지정된 식별자를 역참조하는 것을 의미합니다. 접근 허가 여부를 결정하는 프로세스는 URI 체계에 의해 정의되며 일반 구문이 사용될 때 권한 구성 요소와 같은 URI 구성 요소 내의 데이터를 사용하는 경우가 많습니다. 그러나 권한 있는 액세스는 식별된 메커니즘으로 제한되지 않습니다.
