"hash": |-
  0350e1f4e0f90f6132c4d16c9767f8789372e0dacd459e25f4522c5352ee3d03
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     For these curves, implementations SHOULD use the approach specified
     in [RFC7748] to calculate the Diffie-Hellman shared secret.
     Implementations MUST check whether the computed Diffie-Hellman shared
     secret is the all-zero value and abort if so, as described in
     Section 6 of [RFC7748].  If implementors use an alternative
     implementation of these elliptic curves, they SHOULD perform the
     additional checks specified in Section 7 of [RFC7748].
"fixed": |-
  For these curves, implementations SHOULD use the approach specified in [RFC7748] to calculate the Diffie-Hellman shared secret. Implementations MUST check whether the computed Diffie-Hellman shared secret is the all-zero value and abort if so, as described in Section 6 of [RFC7748].  If implementors use an alternative implementation of these elliptic curves, they SHOULD perform the additional checks specified in Section 7 of [RFC7748].
"ko": |-
  이러한 곡선의 경우 구현 시 [RFC7748]에 지정된 접근 방식을 사용하여 Diffie-Hellman 공유 비밀을 계산해야 합니다. 구현에서는 [RFC7748]의 섹션 6에 설명된 대로 계산된 Diffie-Hellman 공유 비밀이 모두 0 값인지 확인하고 그렇다면 중단해야 합니다. 구현자가 이러한 타원 곡선의 대체 구현을 사용하는 경우 [RFC7748]의 섹션 7에 지정된 추가 검사를 수행해야 합니다.
