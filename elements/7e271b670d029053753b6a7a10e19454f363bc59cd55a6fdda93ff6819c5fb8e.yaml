"hash": |-
  7e271b670d029053753b6a7a10e19454f363bc59cd55a6fdda93ff6819c5fb8e
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
    /*
     * Initialize the first 16 words in the array W
     */
    for (t = 0; t < 16; t++) {
      W[t]  = ((uint32_t)context->Message_Block[t * 4]) << 24;
      W[t] |= ((uint32_t)context->Message_Block[t * 4 + 1]) << 16;
      W[t] |= ((uint32_t)context->Message_Block[t * 4 + 2]) << 8;
      W[t] |= ((uint32_t)context->Message_Block[t * 4 + 3]);
    }
"fixed": |-
  /* * Initialize the first 16 words in the array W */ for (t = 0; t < 16; t++) { W[t]  = ((uint32_t)context->Message_Block[t * 4]) << 24; W[t] |= ((uint32_t)context->Message_Block[t * 4 + 1]) << 16; W[t] |= ((uint32_t)context->Message_Block[t * 4 + 2]) << 8; W[t] |= ((uint32_t)context->Message_Block[t * 4 + 3]); }
"ko": |-
  /* * 배열 W의 처음 16개 단어를 초기화합니다. */ for (t = 0; t < 16; t++) { W[t] = ((uint32_t)context->Message_Block[t * 4]) << 24; W[t] |= ((uint32_t)context->Message_Block[t * 4 + 1]) << 16; W[t] |= ((uint32_t)context->Message_Block[t * 4 + 2]) << 8; W[t] |= ((uint32_t)context->Message_Block[t * 4 + 3]); }
