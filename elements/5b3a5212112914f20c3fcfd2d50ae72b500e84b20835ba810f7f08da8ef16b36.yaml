"hash": |-
  5b3a5212112914f20c3fcfd2d50ae72b500e84b20835ba810f7f08da8ef16b36
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     o  The protocol will specify a 96-bit or 64-bit nonce.  This MUST be
        unique per invocation with the same key, so it MUST NOT be
        randomly generated.  A counter is a good way to implement this,
        but other methods, such as a Linear Feedback Shift Register (LFSR)
        are also acceptable.  ChaCha20 as specified here requires a 96-bit
        nonce.  So if the provided nonce is only 64-bit, then the first 32
        bits of the nonce will be set to a constant number.  This will
        usually be zero, but for protocols with multiple senders it may be
        different for each sender, but SHOULD be the same for all
        invocations of the function with the same key by a particular
        sender.
"fixed": |-
  -  The protocol will specify a 96-bit or 64-bit nonce.  This MUST be unique per invocation with the same key, so it MUST NOT be randomly generated.  A counter is a good way to implement this, but other methods, such as a Linear Feedback Shift Register (LFSR) are also acceptable.  ChaCha20 as specified here requires a 96-bit nonce.  So if the provided nonce is only 64-bit, then the first 32 bits of the nonce will be set to a constant number.  This will usually be zero, but for protocols with multiple senders it may be different for each sender, but SHOULD be the same for all invocations of the function with the same key by a particular sender.
"ko": |-
  - 프로토콜은 96비트 또는 64비트 nonce를 지정합니다. 이는 동일한 키를 사용하는 호출마다 고유해야 하므로 무작위로 생성되어서는 안 됩니다. 카운터는 이를 구현하는 좋은 방법이지만 LFSR(선형 피드백 시프트 레지스터)과 같은 다른 방법도 허용됩니다. 여기에 지정된 대로 ChaCha20에는 96비트 nonce가 필요합니다. 따라서 제공된 nonce가 64비트인 경우 nonce의 처음 32비트는 상수로 설정됩니다. 이는 일반적으로 0이지만 여러 발신자가 있는 프로토콜의 경우 각 발신자마다 다를 수 있지만 특정 발신자가 동일한 키를 사용하는 모든 함수 호출에 대해 동일해야 합니다.
