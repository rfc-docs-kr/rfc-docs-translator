"hash": |-
  01ed94616fe1e79e0651f6701c13258dab13c35e8267b23a29b0a7af9fa1cecd
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The inadvertent reuse of the same nonce by two invocations of the GCM
     encryption operation, with the same key, but with distinct plaintext
     values, undermines the confidentiality of the plaintexts protected in
     those two invocations, and undermines all of the authenticity and
     integrity protection provided by that key.  For this reason, GCM
     should only be used whenever nonce uniqueness can be provided with
     assurance.  The design feature that GCM uses to achieve minimal
     latency causes the vulnerabilities on the subsequent uses of the key.
     Note that it is acceptable to input the same nonce value multiple
     times to the decryption operation.
"fixed": |-
  The inadvertent reuse of the same nonce by two invocations of the GCM encryption operation, with the same key, but with distinct plaintext values, undermines the confidentiality of the plaintexts protected in those two invocations, and undermines all of the authenticity and integrity protection provided by that key.  For this reason, GCM should only be used whenever nonce uniqueness can be provided with assurance.  The design feature that GCM uses to achieve minimal latency causes the vulnerabilities on the subsequent uses of the key. Note that it is acceptable to input the same nonce value multiple times to the decryption operation.
"ko": |-
  동일한 키를 사용하지만 고유한 일반 텍스트 값을 사용하여 GCM 암호화 작업을 두 번 호출하여 동일한 nonce를 실수로 재사용하면 해당 두 호출에서 보호되는 일반 텍스트의 기밀성이 손상되고 다음에서 제공하는 모든 신뢰성 및 무결성 보호가 손상됩니다. 그 열쇠. 이러한 이유로 GCM은 nonce 고유성이 보장될 수 있는 경우에만 사용해야 합니다. GCM이 최소 대기 시간을 달성하기 위해 사용하는 설계 기능으로 인해 이후 키 사용 시 취약점이 발생합니다. 복호화 작업에 동일한 nonce 값을 여러 번 입력하는 것이 허용됩니다.
