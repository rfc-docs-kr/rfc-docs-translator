"hash": |-
  18a52cc6762b5840555fd21c09772ed26750ff11722cb69111fa316e42573b65
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     As an example, let's consider a 7162-byte file, which fits in 7
     chunks of 1 kilobyte, distributed by Peer A.  Figure 4 shows the
     relevant Merkle hash tree.  Peer B, which only knows the root hash of
     the file after successfully connecting to Peer A, requests the first
     chunk of data, C0 in Figure 4.  Peer A replies to Peer B by including
     in the datagram the following messages in this specific order: first,
     the three peak hashes of this particular file, the hashes of nodes 3,
     9, and 12; second, the uncle hashes of C0, followed by the DATA
     message containing the actual content of C0.  Upon receiving the peak
     hashes, Peer B checks them against the root hash determining that the
     file is 7 chunks long.  To establish the exact size of the file, Peer
     B needs to request and retrieve the last chunk containing data, C6 in
     Figure 4.  Once the last chunk has been retrieved and verified, Peer
     B concludes that it is 1018 bytes long, hence determining that the
     file is exactly 7162 bytes long.
"fixed": |-
  As an example, let's consider a 7162-byte file, which fits in 7 chunks of 1 kilobyte, distributed by Peer A.  Figure 4 shows the relevant Merkle hash tree.  Peer B, which only knows the root hash of the file after successfully connecting to Peer A, requests the first chunk of data, C0 in Figure 4.  Peer A replies to Peer B by including in the datagram the following messages in this specific order: first, the three peak hashes of this particular file, the hashes of nodes 3, 9, and 12; second, the uncle hashes of C0, followed by the DATA message containing the actual content of C0.  Upon receiving the peak hashes, Peer B checks them against the root hash determining that the file is 7 chunks long.  To establish the exact size of the file, Peer B needs to request and retrieve the last chunk containing data, C6 in Figure 4.  Once the last chunk has been retrieved and verified, Peer B concludes that it is 1018 bytes long, hence determining that the file is exactly 7162 bytes long.
"ko": |-
  예를 들어, 피어 A가 배포한 1KB의 7개 청크에 맞는 7162바이트 파일을 고려해 보겠습니다. 그림 4는 관련 Merkle 해시 트리를 보여줍니다. 피어 A에 성공적으로 연결된 후 파일의 루트 해시만 알고 있는 피어 B는 그림 4의 첫 번째 데이터 청크인 C0을 요청합니다. 피어 A는 다음 메시지를 이 특정 순서로 데이터그램에 포함하여 피어 B에 응답합니다. 첫째, 이 특정 파일의 세 가지 피크 해시, 즉 노드 3, 9, 12의 해시입니다. 둘째, 삼촌이 C0의 해시를 해시하고 그 뒤에 C0의 실제 내용이 포함된 DATA 메시지가 옵니다. 피크 해시를 수신하면 피어 B는 이를 루트 해시와 비교하여 파일 길이가 7청크인지 확인합니다. 파일의 정확한 크기를 설정하려면 피어 B는 데이터가 포함된 마지막 청크(그림 4의 C6)를 요청하고 검색해야 합니다. 마지막 청크가 검색되고 확인되면 피어 B는 길이가 1018바이트라고 결론을 내립니다. 파일의 길이는 정확히 7162바이트입니다.
