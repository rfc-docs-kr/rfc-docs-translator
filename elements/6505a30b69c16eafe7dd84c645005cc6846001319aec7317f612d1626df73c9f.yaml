"hash": |-
  6505a30b69c16eafe7dd84c645005cc6846001319aec7317f612d1626df73c9f
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     TLS 1.3 takes a conservative approach to PSKs by binding them to a
     specific KDF.  By contrast, TLS 1.2 allows PSKs to be used with any
     hash function and the TLS 1.2 PRF.  Thus, any PSK which is used with
     both TLS 1.2 and TLS 1.3 must be used with only one hash in TLS 1.3,
     which is less than optimal if users want to provision a single PSK.
     The constructions in TLS 1.2 and TLS 1.3 are different, although they
     are both based on HMAC.  While there is no known way in which the
     same PSK might produce related output in both versions, only limited
     analysis has been done.  Implementations can ensure safety from
     cross-protocol related output by not reusing PSKs between TLS 1.3 and
     TLS 1.2.
"fixed": |-
  TLS 1.3 takes a conservative approach to PSKs by binding them to a specific KDF.  By contrast, TLS 1.2 allows PSKs to be used with any hash function and the TLS 1.2 PRF.  Thus, any PSK which is used with both TLS 1.2 and TLS 1.3 must be used with only one hash in TLS 1.3, which is less than optimal if users want to provision a single PSK. The constructions in TLS 1.2 and TLS 1.3 are different, although they are both based on HMAC.  While there is no known way in which the same PSK might produce related output in both versions, only limited analysis has been done.  Implementations can ensure safety from cross-protocol related output by not reusing PSKs between TLS 1.3 and TLS 1.2.
"ko": |-
  TLS 1.3은 PSK를 특정 KDF에 바인딩하여 PSK에 대해 보수적인 접근 방식을 취합니다. 이와 대조적으로 TLS 1.2에서는 PSK를 모든 해시 함수 및 TLS 1.2 PRF와 함께 사용할 수 있습니다. 따라서 TLS 1.2 및 TLS 1.3 모두와 함께 사용되는 모든 PSK는 TLS 1.3에서 하나의 해시와 함께 사용해야 하며, 이는 사용자가 단일 PSK를 프로비저닝하려는 경우 최적이 아닙니다. TLS 1.2와 TLS 1.3의 구성은 서로 다르지만 둘 다 HMAC를 기반으로 합니다. 동일한 PSK가 두 버전 모두에서 관련 출력을 생성할 수 있는 알려진 방법은 없지만 제한된 분석만 수행되었습니다. 구현에서는 TLS 1.3과 TLS 1.2 사이에서 PSK를 재사용하지 않음으로써 프로토콜 간 관련 출력의 안전성을 보장할 수 있습니다.
