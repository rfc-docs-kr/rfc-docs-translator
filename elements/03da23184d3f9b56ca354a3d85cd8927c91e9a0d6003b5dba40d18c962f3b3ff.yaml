"hash": |-
  03da23184d3f9b56ca354a3d85cd8927c91e9a0d6003b5dba40d18c962f3b3ff
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     RTSP status codes are extensible.  RTSP applications are not required
     to understand the meaning of all registered status codes, though such
     understanding is obviously desirable.  However, applications MUST
     understand the class of any status code, as indicated by the first
     digit, and treat any unrecognized response as being equivalent to the
     x00 status code of that class, with an exception for unknown 3xx
     codes, which MUST be treated as a 302 (Found).  The reason for that
     exception is that the status code 300 (Multiple Choices in HTTP) is
     not defined for RTSP.  A response with an unrecognized status code
     MUST NOT be cached.  For example, if an unrecognized status code of
     431 is received by the client, it can safely assume that there was
     something wrong with its request and treat the response as if it had
     received a 400 status code.  In such cases, user agents SHOULD
     present to the user the message body returned with the response,
     since that message body is likely to include human-readable
     information that will explain the unusual status.
"fixed": |-
  RTSP status codes are extensible.  RTSP applications are not required to understand the meaning of all registered status codes, though such understanding is obviously desirable.  However, applications MUST understand the class of any status code, as indicated by the first digit, and treat any unrecognized response as being equivalent to the x00 status code of that class, with an exception for unknown 3xx codes, which MUST be treated as a 302 (Found).  The reason for that exception is that the status code 300 (Multiple Choices in HTTP) is not defined for RTSP.  A response with an unrecognized status code MUST NOT be cached.  For example, if an unrecognized status code of 431 is received by the client, it can safely assume that there was something wrong with its request and treat the response as if it had received a 400 status code.  In such cases, user agents SHOULD present to the user the message body returned with the response, since that message body is likely to include human-readable information that will explain the unusual status.
"ko": |-
  RTSP 상태 코드는 확장 가능합니다. RTSP 응용 프로그램은 등록된 모든 상태 코드의 의미를 이해할 필요는 없지만 그러한 이해는 분명히 바람직합니다. 그러나 애플리케이션은 첫 번째 숫자로 표시된 모든 상태 코드의 클래스를 이해해야 하며, 인식할 수 없는 모든 응답을 해당 클래스의 x00 상태 코드와 동일한 것으로 처리해야 합니다. 단, 알 수 없는 3xx 코드는 예외로 처리해야 합니다. 302(발견됨). 해당 예외가 발생하는 이유는 상태 코드 300(HTTP의 다중 선택)이 RTSP에 대해 정의되지 않았기 때문입니다. 인식할 수 없는 상태 코드가 있는 응답은 캐시되어서는 안 됩니다. 예를 들어, 클라이언트가 인식할 수 없는 상태 코드 431을 수신하면 요청에 문제가 있다고 안전하게 가정하고 응답을 400 상태 코드를 수신한 것처럼 처리할 수 있습니다. 그러한 경우, 사용자 에이전트는 응답과 함께 반환된 메시지 본문을 사용자에게 제시해야 합니다. 왜냐하면 해당 메시지 본문에는 비정상적인 상태를 설명하는 사람이 읽을 수 있는 정보가 포함될 가능성이 높기 때문입니다.
