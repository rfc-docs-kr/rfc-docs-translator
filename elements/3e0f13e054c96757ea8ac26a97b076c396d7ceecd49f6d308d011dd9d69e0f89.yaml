"hash": |-
  3e0f13e054c96757ea8ac26a97b076c396d7ceecd49f6d308d011dd9d69e0f89
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     This is an example of media-on-demand streaming of media stored in a
     container file.  For the purposes of this example, a container file
     is a storage entity in which multiple continuous media types
     pertaining to the same end-user presentation are present.  In effect,
     the container file represents an RTSP presentation, with each of its
     components being RTSP-controlled media streams.  Container files are
     a widely used means to store such presentations.  While the
     components are transported as independent streams, it is desirable to
     maintain a common context for those streams at the server end.
"fixed": |-
  This is an example of media-on-demand streaming of media stored in a container file.  For the purposes of this example, a container file is a storage entity in which multiple continuous media types pertaining to the same end-user presentation are present.  In effect, the container file represents an RTSP presentation, with each of its components being RTSP-controlled media streams.  Container files are a widely used means to store such presentations.  While the components are transported as independent streams, it is desirable to maintain a common context for those streams at the server end.
"ko": |-
  이는 컨테이너 파일에 저장된 미디어의 주문형 미디어 스트리밍의 예입니다. 이 예의 목적에 따라 컨테이너 파일은 동일한 최종 사용자 프리젠테이션과 관련된 여러 연속 미디어 유형이 존재하는 저장 엔터티입니다. 실제로 컨테이너 파일은 RTSP로 제어되는 미디어 스트림인 각 구성 요소를 포함하는 RTSP 프레젠테이션을 나타냅니다. 컨테이너 파일은 이러한 프레젠테이션을 저장하는 데 널리 사용되는 수단입니다. 구성 요소는 독립적인 스트림으로 전송되지만 서버 측에서는 해당 스트림에 대한 공통 컨텍스트를 유지하는 것이 바람직합니다.
