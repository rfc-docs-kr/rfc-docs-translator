"hash": |-
  e639fc2013e2d1c40772ef672c688661248ab39e73acf3a38e0a67d38abf1175
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Decryption reverses this processing.  The MAC SHALL be evaluated
     before any further processing such as decryption is performed, and if
     the MAC verification fails, then processing SHALL terminate
     immediately.  For TLS, a fatal bad_record_mac MUST be generated [2].
     For DTLS, the record MUST be discarded, and a fatal bad_record_mac
     MAY be generated [4].  This immediate response to a bad MAC
     eliminates any timing channels that may be available through the use
     of manipulated packet data.
"fixed": |-
  Decryption reverses this processing.  The MAC SHALL be evaluated before any further processing such as decryption is performed, and if the MAC verification fails, then processing SHALL terminate immediately.  For TLS, a fatal bad_record_mac MUST be generated [2]. For DTLS, the record MUST be discarded, and a fatal bad_record_mac MAY be generated [4].  This immediate response to a bad MAC eliminates any timing channels that may be available through the use of manipulated packet data.
"ko": |-
  복호화는 이 처리를 역전합니다. 복호화와 같은 추가 처리가 수행되기 전에 MAC을 평가해야 하며, MAC 검증이 실패하면 처리가 즉시 종료되어야 합니다. TLS의 경우 치명적인 bad_record_mac을 생성해야 합니다[2]. DTLS의 경우 레코드를 삭제해야 하며 치명적인 bad_record_mac을 생성할 수 있습니다[4]. 잘못된 MAC에 대한 이 즉각적인 응답은 조작된 패킷 데이터를 사용하여 사용할 수 있는 모든 타이밍 채널을 제거합니다.
