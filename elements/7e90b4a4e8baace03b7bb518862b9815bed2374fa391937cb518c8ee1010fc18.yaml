"hash": |-
  7e90b4a4e8baace03b7bb518862b9815bed2374fa391937cb518c8ee1010fc18
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     For example, many implementations allow dotted forms of three
     numbers, wherein the last part is interpreted as a 16-bit quantity
     and placed in the right-most two bytes of the network address (e.g.,
     a Class B network).  Likewise, a dotted form of two numbers means
     that the last part is interpreted as a 24-bit quantity and placed in
     the right-most three bytes of the network address (Class A), and a
     single number (without dots) is interpreted as a 32-bit quantity and
     stored directly in the network address.  Adding further to the
     confusion, some implementations allow each dotted part to be
     interpreted as decimal, octal, or hexadecimal, as specified in the C
     language (i.e., a leading 0x or 0X implies hexadecimal; a leading 0
     implies octal; otherwise, the number is interpreted as decimal).
"fixed": |-
  For example, many implementations allow dotted forms of three numbers, wherein the last part is interpreted as a 16-bit quantity and placed in the right-most two bytes of the network address (e.g., a Class B network).  Likewise, a dotted form of two numbers means that the last part is interpreted as a 24-bit quantity and placed in the right-most three bytes of the network address (Class A), and a single number (without dots) is interpreted as a 32-bit quantity and stored directly in the network address.  Adding further to the confusion, some implementations allow each dotted part to be interpreted as decimal, octal, or hexadecimal, as specified in the C language (i.e., a leading 0x or 0X implies hexadecimal; a leading 0 implies octal; otherwise, the number is interpreted as decimal).
"ko": |-
  예를 들어, 많은 구현에서는 세 숫자의 점 형식을 허용합니다. 여기서 마지막 부분은 16비트 수량으로 해석되고 네트워크 주소(예: 클래스 B 네트워크)의 가장 오른쪽 2바이트에 배치됩니다. 마찬가지로 두 숫자의 점 형태는 마지막 부분이 24비트 수량으로 해석되어 네트워크 주소(클래스 A)의 가장 오른쪽 3바이트에 배치되고 단일 숫자(점 없음)는 다음과 같이 해석된다는 의미입니다. 32비트 수량이며 네트워크 주소에 직접 저장됩니다. 혼란을 더욱 가중시키는 것은 일부 구현에서는 C 언어에 지정된 대로 점으로 구분된 각 부분을 10진수, 8진수 또는 16진수로 해석하도록 허용합니다(즉, 앞에 오는 0x 또는 0X는 16진수를 의미하고 앞에 오는 0은 8진수를 의미하며 그렇지 않은 경우 숫자는 10진수로 해석됩니다.)
