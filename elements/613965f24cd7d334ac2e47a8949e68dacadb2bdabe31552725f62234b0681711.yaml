"hash": |-
  613965f24cd7d334ac2e47a8949e68dacadb2bdabe31552725f62234b0681711
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Implementers should be aware that cryptographic algorithms become
     weaker with time.  As new cryptoanalysis techniques are developed and
     computing performance improves, the work factor to break a particular
     cryptographic algorithm will decrease.  Therefore, cryptographic
     implementations should be modular, allowing new algorithms to be
     readily inserted.  That is, implementers should be prepared for the
     set of mandatory-to-implement algorithms for any particular use to
     change over time.  This is sometimes referred to as "algorithm
     agility" [RFC7696].
"fixed": |-
  Implementers should be aware that cryptographic algorithms become weaker with time.  As new cryptoanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will decrease.  Therefore, cryptographic implementations should be modular, allowing new algorithms to be readily inserted.  That is, implementers should be prepared for the set of mandatory-to-implement algorithms for any particular use to change over time.  This is sometimes referred to as "algorithm agility" [RFC7696].
"ko": |-
  구현자는 암호화 알고리즘이 시간이 지남에 따라 약해진다는 점을 인식해야 합니다. 새로운 암호화 분석 기술이 개발되고 컴퓨팅 성능이 향상됨에 따라 특정 암호화 알고리즘을 깨뜨리는 작업 요소가 감소합니다. 따라서 암호화 구현은 새로운 알고리즘을 쉽게 삽입할 수 있도록 모듈식이어야 합니다. 즉, 구현자는 특정 용도에 대한 필수 구현 알고리즘 세트가 시간이 지남에 따라 변경될 수 있도록 준비해야 합니다. 이를 "알고리즘 민첩성"[RFC7696]이라고도 합니다.
