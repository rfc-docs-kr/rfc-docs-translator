"hash": |-
  4f64aebdd2c629fc10f7d4d03d9d2b94b86a40c4b7c1db0764f01a3293e2b435
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Conversely, it is possible for records that are protected by the
     newly negotiated context to be received prior to the completion of a
     handshake.  For instance, the server may send its Finished message
     and then start transmitting data.  Implementations MAY either buffer
     or discard such packets, though when DTLS is used over reliable
     transports (e.g., SCTP), they SHOULD be buffered and processed once
     the handshake completes.  Note that TLS's restrictions on when
     packets may be sent still apply, and the receiver treats the packets
     as if they were sent in the right order.  In particular, it is still
     impermissible to send data prior to completion of the first
     handshake.
"fixed": |-
  Conversely, it is possible for records that are protected by the newly negotiated context to be received prior to the completion of a handshake.  For instance, the server may send its Finished message and then start transmitting data.  Implementations MAY either buffer or discard such packets, though when DTLS is used over reliable transports (e.g., SCTP), they SHOULD be buffered and processed once the handshake completes.  Note that TLS's restrictions on when packets may be sent still apply, and the receiver treats the packets as if they were sent in the right order.  In particular, it is still impermissible to send data prior to completion of the first handshake.
"ko": |-
  반대로, 새로 협상된 컨텍스트에 의해 보호되는 레코드가 핸드셰이크가 완료되기 전에 수신될 수도 있습니다. 예를 들어, 서버는 Finished 메시지를 보낸 다음 데이터 전송을 시작할 수 있습니다. 구현에서는 이러한 패킷을 버퍼링하거나 삭제할 수 있지만 DTLS가 안정적인 전송(예: SCTP)을 통해 사용되는 경우 핸드셰이크가 완료되면 버퍼링되고 처리되어야 합니다. 패킷 전송 시기에 대한 TLS의 제한 사항은 여전히 ​​적용되며 수신자는 패킷이 올바른 순서로 전송된 것처럼 처리합니다. 특히 첫 번째 핸드셰이크가 완료되기 전에 데이터를 보내는 것은 여전히 ​​허용되지 않습니다.
