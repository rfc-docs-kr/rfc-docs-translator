"hash": |-
  2dae74ae176f6518ba5a458cc32deea81d047fed6d4c03036ed8d0ad1e5046cb
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     TLS versions 1.1 and 1.0, and SSL 3.0 are very similar; thus,
     supporting both is easy.  TLS clients who wish to negotiate with such
     older servers SHOULD send client hello messages using the SSL 3.0
     record format and client hello structure, sending {3, 2} for the
     version field to note that they support TLS 1.1. If the server
     supports only TLS 1.0 or SSL 3.0, it will respond with a downrev 3.0
     server hello; if it supports TLS 1.1 it will respond with a TLS 1.1
     server hello.  The negotiation then proceeds as appropriate for the
     negotiated protocol.
"fixed": |-
  TLS versions 1.1 and 1.0, and SSL 3.0 are very similar; thus, supporting both is easy.  TLS clients who wish to negotiate with such older servers SHOULD send client hello messages using the SSL 3.0 record format and client hello structure, sending {3, 2} for the version field to note that they support TLS 1.1. If the server supports only TLS 1.0 or SSL 3.0, it will respond with a downrev 3.0 server hello; if it supports TLS 1.1 it will respond with a TLS 1.1 server hello.  The negotiation then proceeds as appropriate for the negotiated protocol.
"ko": |-
  TLS 버전 1.1과 1.0, SSL 3.0은 매우 유사합니다. 따라서 둘 다 지원하는 것은 쉽습니다. 이러한 이전 서버와 협상하려는 TLS 클라이언트는 SSL 3.0 레코드 형식과 클라이언트 Hello 구조를 사용하여 클라이언트 Hello 메시지를 보내야 하며, TLS 1.1을 지원한다는 점을 알리기 위해 버전 필드에 대해 {3, 2}를 보내야 합니다. 서버가 TLS 1.0 또는 SSL 3.0만 지원하는 경우 downrev 3.0 server hello로 응답합니다. TLS 1.1을 지원하는 경우 TLS 1.1 서버 hello로 응답합니다. 그런 다음 협상은 협상된 프로토콜에 따라 적절하게 진행됩니다.
