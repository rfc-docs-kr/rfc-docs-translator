"hash": |-
  d6fe3cebe7768651b1cf0f4d4d153d0cbd39fa9e545aea3be819543d5a0534c7
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The semantics of the RTSP OPTIONS method is similar to that of the
     HTTP OPTIONS method described in Section 4.3.7 of [RFC7231].
     However, in RTSP, OPTIONS is bidirectional in that a client can send
     the request to a server and vice versa.  A client MUST implement the
     capability to send an OPTIONS request and a server or a proxy MUST
     implement the capability to respond to an OPTIONS request.  In
     addition to this "MUST-implement" functionality, clients, servers and
     proxies MAY provide support both for sending OPTIONS requests and for
     generating responses to the requests.
"fixed": |-
  The semantics of the RTSP OPTIONS method is similar to that of the HTTP OPTIONS method described in Section 4.3.7 of [RFC7231]. However, in RTSP, OPTIONS is bidirectional in that a client can send the request to a server and vice versa.  A client MUST implement the capability to send an OPTIONS request and a server or a proxy MUST implement the capability to respond to an OPTIONS request.  In addition to this "MUST-implement" functionality, clients, servers and proxies MAY provide support both for sending OPTIONS requests and for generating responses to the requests.
"ko": |-
  RTSP OPTIONS 메서드의 의미는 [RFC7231]의 4.3.7절에 설명된 HTTP OPTIONS 메서드의 의미와 유사합니다. 그러나 RTSP에서 OPTIONS는 클라이언트가 서버에 요청을 보낼 수 있고 그 반대의 경우도 가능하다는 점에서 양방향입니다. 클라이언트는 OPTIONS 요청을 보내는 기능을 구현해야 하며, 서버 또는 프록시는 OPTIONS 요청에 응답하는 기능을 구현해야 합니다. 이 "반드시 구현해야 하는" 기능 외에도 클라이언트, 서버 및 프록시는 OPTIONS 요청 전송과 요청에 대한 응답 생성 모두에 대한 지원을 제공할 수 있습니다.
