"hash": |-
  2bf55cffdfe6652b381d927d8d0fbbde1210f5e50d30480a5eeffeb4c660501c
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     OAuth 2.0 allows deployment flexibility with respect to the style of
     access tokens.  The access tokens may be self-contained so that a
     resource server needs no further interaction with an authorization
     server issuing these tokens to perform an authorization decision of
     the client requesting access to a protected resource.  A system
     design may, however, instead use access tokens that are handles
     referring to authorization data stored at the authorization server.
     This consequently requires a resource server to issue a request to
     the respective authorization server to retrieve the content of the
     access token every time a client presents an access token.
"fixed": |-
  OAuth 2.0 allows deployment flexibility with respect to the style of access tokens.  The access tokens may be self-contained so that a resource server needs no further interaction with an authorization server issuing these tokens to perform an authorization decision of the client requesting access to a protected resource.  A system design may, however, instead use access tokens that are handles referring to authorization data stored at the authorization server. This consequently requires a resource server to issue a request to the respective authorization server to retrieve the content of the access token every time a client presents an access token.
"ko": |-
  OAuth 2.0은 액세스 토큰 스타일과 관련하여 배포 유연성을 허용합니다.  액세스 토큰은 자체 포함되어 리소스 서버가 보호된 리소스에 대한 액세스를 요청하는 클라이언트의 권한 부여 결정을 수행하기 위해 이러한 토큰을 발행하는 권한 부여 서버와 더 이상 상호 작용할 필요가 없도록 할 수 있습니다.  그러나 시스템 설계에서는 인증 서버에 저장된 인증 데이터를 참조하는 핸들인 액세스 토큰을 대신 사용할 수 있습니다. 결과적으로 클라이언트가 액세스 토큰을 제시할 때마다 리소스 서버가 해당 인증 서버에 요청을 발행하여 액세스 토큰의 콘텐츠를 검색해야 합니다.
