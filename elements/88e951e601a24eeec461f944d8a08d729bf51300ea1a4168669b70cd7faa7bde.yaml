"hash": |-
  88e951e601a24eeec461f944d8a08d729bf51300ea1a4168669b70cd7faa7bde
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Several examples of connection initiation follow.  Although these
     examples do not show connection synchronization using data-carrying
     segments, this is perfectly legitimate, so long as the receiving TCP
     endpoint doesn't deliver the data to the user until it is clear the
     data is valid (e.g., the data is buffered at the receiver until the
     connection reaches the ESTABLISHED state, given that the three-way
     handshake reduces the possibility of false connections).  It is a
     trade-off between memory and messages to provide information for this
     checking.
"fixed": |-
  Several examples of connection initiation follow.  Although these examples do not show connection synchronization using data-carrying segments, this is perfectly legitimate, so long as the receiving TCP endpoint doesn't deliver the data to the user until it is clear the data is valid (e.g., the data is buffered at the receiver until the connection reaches the ESTABLISHED state, given that the three-way handshake reduces the possibility of false connections).  It is a trade-off between memory and messages to provide information for this checking.
"ko": |-
  연결 시작의 몇 가지 예는 다음과 같습니다. 이러한 예에서는 데이터 전달 세그먼트를 사용한 연결 동기화를 보여주지 않지만 수신 TCP 끝점이 데이터가 유효하다는 것이 명확해질 때까지(예: 데이터가 버퍼링됨) 사용자에게 데이터를 전달하지 않는 한 이는 완전히 합법적입니다. 3방향 핸드셰이크가 잘못된 연결 가능성을 줄인다면 연결이 ESTABLISHED 상태에 도달할 때까지 수신기에서 수행됩니다. 이 검사에 대한 정보를 제공하는 것은 메모리와 메시지 사이의 균형입니다.
