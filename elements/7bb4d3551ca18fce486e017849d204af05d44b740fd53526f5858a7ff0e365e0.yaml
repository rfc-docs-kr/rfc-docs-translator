"hash": |-
  7bb4d3551ca18fce486e017849d204af05d44b740fd53526f5858a7ff0e365e0
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Note: Passwords tend to be shared for multiple purposes, and
     compromise of a server or database of stored plaintext passwords can
     be used, in that event, to mount multiple attacks.  The obfuscation
     step is merely to hide the password in the event of server compromise
     or compromise of the database of stored passwords.  Advances in
     distributed computing power have diminished the effectiveness of
     performing multiple prf iterations as a technique to prevent
     dictionary attacks, so no such behavior is proscribed here.  Mutually
     consenting implementations can agree to use a different password
     obfuscation method; the one described here is for interoperability
     purposes only.
"fixed": |-
  Note: Passwords tend to be shared for multiple purposes, and compromise of a server or database of stored plaintext passwords can be used, in that event, to mount multiple attacks.  The obfuscation step is merely to hide the password in the event of server compromise or compromise of the database of stored passwords.  Advances in distributed computing power have diminished the effectiveness of performing multiple prf iterations as a technique to prevent dictionary attacks, so no such behavior is proscribed here.  Mutually consenting implementations can agree to use a different password obfuscation method; the one described here is for interoperability purposes only.
"ko": |-
  참고: 비밀번호는 여러 목적으로 공유되는 경향이 있으며, 이 경우 저장된 일반 텍스트 비밀번호의 서버나 데이터베이스를 손상시켜 여러 공격을 가할 수 있습니다.  난독화 단계는 단순히 서버가 손상되거나 저장된 비밀번호의 데이터베이스가 손상되는 경우 비밀번호를 숨기는 것입니다.  분산 컴퓨팅 성능의 발전으로 인해 사전 공격을 방지하기 위한 기술로서 여러 prf 반복을 수행하는 효율성이 감소되었으므로 여기서는 그러한 동작을 금지합니다.  상호 동의하는 구현에서는 다른 비밀번호 난독화 방법을 사용하는 데 동의할 수 있습니다. 여기에 설명된 내용은 상호 운용성 목적으로만 사용됩니다.
