"hash": |-
  e483914b23808010bed7be1526dd744386ea2fa7705af8a25e61519f2f0859fc
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
        Asymmetric cryptography can be used to create algorithms for
        encryption, digital signature, and key agreement:
        -  In an asymmetric encryption algorithm (e.g., "RSA"), when Alice
           wants to ensure confidentiality for data she sends to Bob, she
           encrypts the data with a public key provided by Bob. Only Bob
           has the matching private key that is needed to decrypt the
           data. (Compare: seal.)
        -  In an asymmetric digital signature algorithm (e.g., "DSA"),
           when Alice wants to ensure data integrity or provide
           authentication for data she sends to Bob, she uses her private
           key to sign the data (i.e., create a digital signature based on
           the data). To verify the signature, Bob uses the matching
           public key that Alice has provided.
        -  In an asymmetric key-agreement algorithm (e.g., "Diffie-
           Hellman-Merkle"), Alice and Bob each send their own public key
           to the other party. Then each uses their own private key and
           the other's public key to compute the new key value.
"fixed": |-
  - Asymmetric cryptography can be used to create algorithms for encryption, digital signature, and key agreement: -  In an asymmetric encryption algorithm (e.g., "RSA"), when Alice wants to ensure confidentiality for data she sends to Bob, she encrypts the data with a public key provided by Bob. Only Bob has the matching private key that is needed to decrypt the data. (Compare: seal.) -  In an asymmetric digital signature algorithm (e.g., "DSA"), when Alice wants to ensure data integrity or provide authentication for data she sends to Bob, she uses her private key to sign the data (i.e., create a digital signature based on the data). To verify the signature, Bob uses the matching public key that Alice has provided. -  In an asymmetric key-agreement algorithm (e.g., "Diffie- Hellman-Merkle"), Alice and Bob each send their own public key to the other party. Then each uses their own private key and the other's public key to compute the new key value.
"ko": |-
  - 비대칭 암호화를 사용하여 암호화, 디지털 서명 및 키 계약을 위한 알고리즘을 만들 수 있습니다. - 비대칭 암호화 알고리즘(예: "RSA")에서 Alice는 Bob에게 보내는 데이터의 기밀성을 보장하려고 할 때 데이터를 암호화합니다. Bob이 제공한 공개 키를 사용합니다. Bob만이 데이터를 해독하는 데 필요한 일치하는 개인 키를 가지고 있습니다. (비교: 봉인.) - 비대칭 디지털 서명 알고리즘(예: "DSA")에서 Alice가 데이터 무결성을 보장하거나 Bob에게 보내는 데이터에 대한 인증을 제공하려는 경우 개인 키를 사용하여 데이터에 서명합니다(예: 데이터를 기반으로 디지털 서명을 생성합니다. 서명을 확인하기 위해 Bob은 Alice가 제공한 일치하는 공개 키를 사용합니다. - 비대칭 키 합의 알고리즘(예: "Diffie-Hellman-Merkle")에서 Alice와 Bob은 각자 자신의 공개 키를 상대방에게 보냅니다. 그런 다음 각각은 자신의 개인 키와 상대방의 공개 키를 사용하여 새 키 값을 계산합니다.
