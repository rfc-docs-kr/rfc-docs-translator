"hash": |-
  59409459ca3048508bdd48b87f28368c7865a73cac860ad4b85182e7712881cd
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     CoAP supports a limited subset of HTTP functionality, and thus cross-
     protocol proxying to HTTP is straightforward.  There might be several
     reasons for proxying between CoAP and HTTP, for example, when
     designing a web interface for use over either protocol or when
     realizing a CoAP-HTTP proxy.  Likewise, CoAP could equally be proxied
     to other protocols such as XMPP [RFC6120] or SIP [RFC3264]; the
     definition of these mechanisms is out of scope for this
     specification.
"fixed": |-
  CoAP supports a limited subset of HTTP functionality, and thus cross- protocol proxying to HTTP is straightforward.  There might be several reasons for proxying between CoAP and HTTP, for example, when designing a web interface for use over either protocol or when realizing a CoAP-HTTP proxy.  Likewise, CoAP could equally be proxied to other protocols such as XMPP [RFC6120] or SIP [RFC3264]; the definition of these mechanisms is out of scope for this specification.
"ko": |-
  CoAP는 HTTP 기능의 제한된 하위 집합을 지원하므로 HTTP에 대한 크로스 프로토콜 프록싱이 간단합니다. 예를 들어 두 프로토콜 중 하나를 통해 사용할 웹 인터페이스를 설계할 때 또는 CoAP-HTTP 프록시를 실현할 때 CoAP와 HTTP 간 프록싱을 수행하는 데는 여러 가지 이유가 있을 수 있습니다. 마찬가지로 CoAP는 XMPP [RFC6120] 또는 SIP [RFC3264]와 같은 다른 프로토콜에도 동일하게 프록시될 수 있습니다. 이러한 메커니즘의 정의는 이 사양의 범위를 벗어납니다.
