"hash": |-
  37fef00e221bf529def14786cd106479db3419a7d0871b5d82f9cfd048fcb333
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     The final issue is the DTLS handshake protocol.  From the perspective
     of the DTLS record layer, this is merely another upper layer
     protocol.  However, DTLS handshakes occur infrequently and involve
     only a few round trips; therefore, the handshake protocol PMTU
     handling places a premium on rapid completion over accurate PMTU
     discovery.  In order to allow connections under these circumstances,
     DTLS implementations SHOULD follow the following rules:
"fixed": |-
  The final issue is the DTLS handshake protocol.  From the perspective of the DTLS record layer, this is merely another upper layer protocol.  However, DTLS handshakes occur infrequently and involve only a few round trips; therefore, the handshake protocol PMTU handling places a premium on rapid completion over accurate PMTU discovery.  In order to allow connections under these circumstances, DTLS implementations SHOULD follow the following rules:
"ko": |-
  마지막 문제는 DTLS 핸드셰이크 프로토콜입니다. DTLS 레코드 계층의 관점에서 보면 이는 또 다른 상위 계층 프로토콜일 뿐입니다. 그러나 DTLS 핸드셰이크는 자주 발생하지 않으며 몇 번의 왕복만 포함됩니다. 따라서 핸드셰이크 프로토콜 PMTU 처리는 정확한 PMTU 검색보다 빠른 완료에 더 중점을 둡니다. 이러한 상황에서 연결을 허용하려면 DTLS 구현은 다음 규칙을 따라야 합니다.
