"hash": |-
  4e08a6afb23de0d23c834a0845a7f695b513c13eaea115a886f8149cefa328d0
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Implementation Note:  Several implementation strategies can be
        employed for generating Message IDs.  In the simplest case, a CoAP
        endpoint generates Message IDs by keeping a single Message ID
        variable, which is changed each time a new Confirmable or Non-
        confirmable message is sent, regardless of the destination address
        or port.  Endpoints dealing with large numbers of transactions
        could keep multiple Message ID variables, for example, per prefix
        or destination address.  (Note that some receiving endpoints may
        not be able to distinguish unicast and multicast packets addressed
        to it, so endpoints generating Message IDs need to make sure these
        do not overlap.)  It is strongly recommended that the initial
        value of the variable (e.g., on startup) be randomized, in order
        to make successful off-path attacks on the protocol less likely.
"fixed": |-
  Implementation Note:  Several implementation strategies can be employed for generating Message IDs.  In the simplest case, a CoAP endpoint generates Message IDs by keeping a single Message ID variable, which is changed each time a new Confirmable or Non- confirmable message is sent, regardless of the destination address or port.  Endpoints dealing with large numbers of transactions could keep multiple Message ID variables, for example, per prefix or destination address.  (Note that some receiving endpoints may not be able to distinguish unicast and multicast packets addressed to it, so endpoints generating Message IDs need to make sure these do not overlap.)  It is strongly recommended that the initial value of the variable (e.g., on startup) be randomized, in order to make successful off-path attacks on the protocol less likely.
"ko": |-
  구현 참고 사항: 메시지 ID 생성을 위해 여러 구현 전략을 사용할 수 있습니다. 가장 간단한 경우, CoAP 엔드포인트는 대상 주소나 포트에 관계없이 새로운 확인 가능 또는 확인 불가능 메시지가 전송될 때마다 변경되는 단일 메시지 ID 변수를 유지하여 메시지 ID를 생성합니다. 많은 수의 트랜잭션을 처리하는 엔드포인트는 예를 들어 접두사 또는 대상 주소별로 여러 메시지 ID 변수를 유지할 수 있습니다. (일부 수신 엔드포인트는 자신에게 전달된 유니캐스트 패킷과 멀티캐스트 패킷을 구별하지 못할 수 있으므로 메시지 ID를 생성하는 엔드포인트는 이러한 패킷이 겹치지 않도록 해야 합니다.) 변수의 초기 값(예: 시작)을 무작위로 지정하여 프로토콜에 대한 경로를 벗어난 공격이 성공할 가능성을 줄입니다.
