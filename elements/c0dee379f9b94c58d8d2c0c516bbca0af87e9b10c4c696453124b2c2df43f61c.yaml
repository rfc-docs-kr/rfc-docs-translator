"hash": |-
  c0dee379f9b94c58d8d2c0c516bbca0af87e9b10c4c696453124b2c2df43f61c
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Validating the authenticity of a message involves a bitwise
     comparison of the calculated tag with the received tag.  In most use
     cases, nonces and AAD contents are not "used up" until a valid
     message is received.  This allows an attacker to send multiple
     identical messages with different tags until one passes the tag
     comparison.  This is hard if the attacker has to try all 2^128
     possible tags one by one.  However, if the timing of the tag
     comparison operation reveals how long a prefix of the calculated and
     received tags is identical, the number of messages can be reduced
     significantly.  For this reason, with online protocols,
     implementation MUST use a constant-time comparison function rather
     than relying on optimized but insecure library functions such as the
     C language's memcmp().
"fixed": |-
  Validating the authenticity of a message involves a bitwise comparison of the calculated tag with the received tag.  In most use cases, nonces and AAD contents are not "used up" until a valid message is received.  This allows an attacker to send multiple identical messages with different tags until one passes the tag comparison.  This is hard if the attacker has to try all 2^128 possible tags one by one.  However, if the timing of the tag comparison operation reveals how long a prefix of the calculated and received tags is identical, the number of messages can be reduced significantly.  For this reason, with online protocols, implementation MUST use a constant-time comparison function rather than relying on optimized but insecure library functions such as the C language's memcmp().
"ko": |-
  메시지의 신뢰성을 검증하려면 계산된 태그와 수신된 태그를 비트 단위로 비교해야 합니다. 대부분의 사용 사례에서 nonce와 AAD 콘텐츠는 유효한 메시지가 수신될 때까지 "사용"되지 않습니다. 이를 통해 공격자는 태그 비교를 통과할 때까지 서로 다른 태그를 사용하여 여러 개의 동일한 메시지를 보낼 수 있습니다. 공격자가 2^128개의 가능한 모든 태그를 하나씩 시도해야 한다면 이는 어렵습니다. 그러나 태그 비교 동작의 타이밍을 통해 계산된 태그와 수신된 태그의 프리픽스가 얼마나 동일한지 알 수 있다면 메시지 수를 크게 줄일 수 있다. 이러한 이유로 온라인 프로토콜의 구현에서는 C 언어의 memcmp()와 같이 최적화되었지만 안전하지 않은 라이브러리 기능에 의존하기보다는 상수 시간 비교 기능을 사용해야 합니다.
