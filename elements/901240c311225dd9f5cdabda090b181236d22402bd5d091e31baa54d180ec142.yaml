"hash": |-
  901240c311225dd9f5cdabda090b181236d22402bd5d091e31baa54d180ec142
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Assume that two user processes A and B are communicating with one
     another when a failure or reboot occurs causing loss of memory to A's
     TCP implementation.  Depending on the operating system supporting A's
     TCP implementation, it is likely that some error recovery mechanism
     exists.  When the TCP endpoint is up again, A is likely to start
     again from the beginning or from a recovery point.  As a result, A
     will probably try to OPEN the connection again or try to SEND on the
     connection it believes open.  In the latter case, it receives the
     error message "connection not open" from the local (A's) TCP
     implementation.  In an attempt to establish the connection, A's TCP
     implementation will send a segment containing SYN.  This scenario
     leads to the example shown in Figure 9.  After TCP Peer A reboots,
     the user attempts to reopen the connection.  TCP Peer B, in the
     meantime, thinks the connection is open.
"fixed": |-
  Assume that two user processes A and B are communicating with one another when a failure or reboot occurs causing loss of memory to A's TCP implementation.  Depending on the operating system supporting A's TCP implementation, it is likely that some error recovery mechanism exists.  When the TCP endpoint is up again, A is likely to start again from the beginning or from a recovery point.  As a result, A will probably try to OPEN the connection again or try to SEND on the connection it believes open.  In the latter case, it receives the error message "connection not open" from the local (A's) TCP implementation.  In an attempt to establish the connection, A's TCP implementation will send a segment containing SYN.  This scenario leads to the example shown in Figure 9.  After TCP Peer A reboots, the user attempts to reopen the connection.  TCP Peer B, in the meantime, thinks the connection is open.
"ko": |-
  오류나 재부팅이 발생하여 A의 TCP 구현에 메모리가 손실될 때 두 사용자 프로세스 A와 B가 서로 통신하고 있다고 가정합니다. A의 TCP 구현을 지원하는 운영 체제에 따라 일부 오류 복구 메커니즘이 존재할 수 있습니다. TCP 엔드포인트가 다시 작동되면 A는 처음부터 또는 복구 지점에서 다시 시작할 가능성이 높습니다. 결과적으로 A는 연결을 다시 OPEN하려고 시도하거나 열려 있다고 생각되는 연결에 대해 SEND를 시도할 것입니다. 후자의 경우 로컬(A의) TCP 구현으로부터 "연결이 열리지 않음"이라는 오류 메시지를 받습니다. 연결을 설정하려는 시도에서 A의 TCP 구현은 SYN이 포함된 세그먼트를 보냅니다. 이 시나리오는 그림 9에 표시된 예제로 이어집니다. TCP 피어 A가 재부팅된 후 사용자는 연결을 다시 열려고 시도합니다. 그 동안 TCP 피어 B는 연결이 열려 있다고 생각합니다.
