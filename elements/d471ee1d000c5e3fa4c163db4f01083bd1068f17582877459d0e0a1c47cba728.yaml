"hash": |-
  d471ee1d000c5e3fa4c163db4f01083bd1068f17582877459d0e0a1c47cba728
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     unexpected failure.  One simple way to provide a high assurance that
     a nonce value will not be used repeatedly is to wait until the
     encryption process receives confirmation from the storage process
     indicating that the succeeding nonce value has already been stored.
     Because this method may add significant latency, it may be desirable
     to store a nonce value that is several values ahead in the sequence.
     As an example, the nonce 100 could be stored, after which the nonces
     1 through 99 could be used for encryption.  The nonce value 200 could
     be stored at the same time that nonces 1 through 99 are being used,
     and so on.
"fixed": |-
  unexpected failure.  One simple way to provide a high assurance that a nonce value will not be used repeatedly is to wait until the encryption process receives confirmation from the storage process indicating that the succeeding nonce value has already been stored. Because this method may add significant latency, it may be desirable to store a nonce value that is several values ahead in the sequence. As an example, the nonce 100 could be stored, after which the nonces 1 through 99 could be used for encryption.  The nonce value 200 could be stored at the same time that nonces 1 through 99 are being used, and so on.
"ko": |-
  예상치 못한 실패. nonce 값이 반복적으로 사용되지 않는다는 높은 보증을 제공하는 간단한 방법 중 하나는 암호화 프로세스가 저장 프로세스로부터 다음 nonce 값이 이미 저장되었음을 나타내는 확인을 받을 때까지 기다리는 것입니다. 이 방법은 상당한 대기 시간을 추가할 수 있으므로 시퀀스에서 여러 값 앞에 있는 nonce 값을 저장하는 것이 바람직할 수 있습니다. 예를 들어, nonce 100을 저장한 후 nonce 1부터 99까지를 암호화에 사용할 수 있습니다. Nonce 값 200은 Nonce 1부터 99까지 사용되는 것과 동시에 저장될 수 있습니다.
