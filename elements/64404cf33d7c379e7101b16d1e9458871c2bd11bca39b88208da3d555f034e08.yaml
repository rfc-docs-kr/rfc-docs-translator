"hash": |-
  64404cf33d7c379e7101b16d1e9458871c2bd11bca39b88208da3d555f034e08
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Note that because DTLS records may be reordered, a record from epoch
     1 may be received after epoch 2 has begun.  In general,
     implementations SHOULD discard packets from earlier epochs, but if
     packet loss causes noticeable problems they MAY choose to retain
     keying material from previous epochs for up to the default MSL
     specified for TCP [TCP] to allow for packet reordering.  (Note that
     the intention here is that implementors use the current guidance from
     the IETF for MSL, not that they attempt to interrogate the MSL that
     the system TCP stack is using.)  Until the handshake has completed,
     implementations MUST accept packets from the old epoch.
"fixed": |-
  Note that because DTLS records may be reordered, a record from epoch 1 may be received after epoch 2 has begun.  In general, implementations SHOULD discard packets from earlier epochs, but if packet loss causes noticeable problems they MAY choose to retain keying material from previous epochs for up to the default MSL specified for TCP [TCP] to allow for packet reordering.  (Note that the intention here is that implementors use the current guidance from the IETF for MSL, not that they attempt to interrogate the MSL that the system TCP stack is using.)  Until the handshake has completed, implementations MUST accept packets from the old epoch.
"ko": |-
  DTLS 레코드는 재정렬될 수 있으므로 에포크 2가 시작된 후에 에포크 1의 레코드가 수신될 수 있습니다. 일반적으로 구현은 이전 시대의 패킷을 폐기해야 하지만, 패킷 손실로 인해 눈에 띄는 문제가 발생하는 경우 패킷 재정렬을 허용하기 위해 TCP[TCP]에 대해 지정된 기본 MSL까지 이전 시대의 키 자료를 유지하도록 선택할 수 있습니다. (여기서의 의도는 구현자가 MSL에 대한 IETF의 현재 지침을 사용하는 것이지 시스템 TCP 스택이 사용하는 MSL을 조사하려는 것이 아닙니다.) 핸드셰이크가 완료될 때까지 구현은 이전 시대의 패킷을 수락해야 합니다. .
