"hash": |-
  574dc12cb1c627a7a49d115d2517e07958b65e2c717dcb4cf01a4c7fa46a3db4
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
     Finally, once Peer B has obtained the number of chunks in the
     content, it can determine the exact file size as follows.  Given that
     all chunks except the last are of a fixed size, Peer B just needs to
     know the size of the last chunk.  Knowing the number of chunks, Peer
     B can calculate the node ID of the last chunk and download it.  As
     always, Peer B verifies the integrity of this chunk against the
     trusted root hash.  As there is only one chunk of data that leads to
     a successful verification, the size of this chunk must be correct.
     Peer B can then determine the exact file size as:
"fixed": |-
  Finally, once Peer B has obtained the number of chunks in the content, it can determine the exact file size as follows.  Given that all chunks except the last are of a fixed size, Peer B just needs to know the size of the last chunk.  Knowing the number of chunks, Peer B can calculate the node ID of the last chunk and download it.  As always, Peer B verifies the integrity of this chunk against the trusted root hash.  As there is only one chunk of data that leads to a successful verification, the size of this chunk must be correct. Peer B can then determine the exact file size as:
"ko": |-
  마지막으로 피어 B가 콘텐츠의 청크 수를 얻은 후에는 다음과 같이 정확한 파일 크기를 결정할 수 있습니다. 마지막 청크를 제외한 모든 청크의 크기가 고정되어 있으므로 피어 B는 마지막 청크의 크기만 알면 됩니다. 청크 수를 알면 피어 B는 마지막 청크의 노드 ID를 계산하여 다운로드할 수 있습니다. 항상 그렇듯이 피어 B는 신뢰할 수 있는 루트 해시에 대해 이 청크의 무결성을 확인합니다. 성공적인 검증으로 이어지는 데이터 청크는 하나뿐이므로 이 청크의 크기가 정확해야 합니다. 그러면 피어 B는 다음과 같이 정확한 파일 크기를 결정할 수 있습니다.
