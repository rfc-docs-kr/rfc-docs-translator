"hash": |-
  7ab3693376169fc61774469cd03db084cb441aace418f7e585efded94683c8f5
"type": |-
  Content
"comment": !!null |-
  null
"original": |2-
           UDP is almost a null protocol; the only services it provides
           over IP are checksumming of data and multiplexing by port
           number.  Therefore, an application program running over UDP
           must deal directly with end-to-end communication problems that
           a connection-oriented protocol would have handled -- e.g.,
           retransmission for reliable delivery, packetization and
           reassembly, flow control, congestion avoidance, etc., when
           these are required.  The fairly complex coupling between IP and
           TCP will be mirrored in the coupling between UDP and many
           applications using UDP.
"fixed": |-
  - UDP is almost a null protocol; the only services it provides over IP are checksumming of data and multiplexing by port number.  Therefore, an application program running over UDP must deal directly with end-to-end communication problems that a connection-oriented protocol would have handled -- e.g., retransmission for reliable delivery, packetization and reassembly, flow control, congestion avoidance, etc., when these are required.  The fairly complex coupling between IP and TCP will be mirrored in the coupling between UDP and many applications using UDP.
"ko": |-
  - UDP는 거의 널(null) 프로토콜입니다. IP를 통해 제공되는 유일한 서비스는 데이터 체크섬과 포트 번호별 다중화입니다. 따라서 UDP를 통해 실행되는 응용 프로그램은 연결 지향 프로토콜이 처리했을 엔드투엔드 통신 문제(예: 안정적인 전달을 위한 재전송, 패킷화 및 재조립, 흐름 제어, 혼잡 회피 등)를 직접 처리해야 합니다. 이것이 필요할 때. IP와 TCP 간의 상당히 복잡한 결합은 UDP와 UDP를 사용하는 많은 애플리케이션 간의 결합에 반영됩니다.
