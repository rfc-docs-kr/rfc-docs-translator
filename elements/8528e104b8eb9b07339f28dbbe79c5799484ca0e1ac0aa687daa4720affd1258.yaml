"hash": |-
  8528e104b8eb9b07339f28dbbe79c5799484ca0e1ac0aa687daa4720affd1258
"type": |-
  RawContent
"comment": !!null |-
  null
"original": |-
  /*
   * Print the results and PASS/FAIL.
   */
  void printResult(uint8_t *Message_Digest, int hashsize,
      const char *hashname, const char *testtype, const char *testname,
      const char *resultarray, int printResults, int printPassFail)
  {
    int i, k;
    if (printResults == PRINTTEXT) {
      printf("\nhashsize=%d\n", hashsize);
      putchar('\t');
      for (i = 0; i < hashsize; ++i) {
        putchar(hexdigits[(Message_Digest[i] >> 4) & 0xF]);
        putchar(hexdigits[Message_Digest[i] & 0xF]);
        putchar(' ');
      }
      putchar('\n');
    } else if (printResults == PRINTRAW) {
      fwrite(Message_Digest, 1, hashsize, stdout);
    } else if (printResults == PRINTHEX) {
      for (i = 0; i < hashsize; ++i) {
        putchar(hexdigits[(Message_Digest[i] >> 4) & 0xF]);
        putchar(hexdigits[Message_Digest[i] & 0xF]);
      }
      putchar('\n');
    } else if (printResults == PRINTBASE64) {
      unsigned char b;
      char *sm = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                 "0123456789+/";
      for (i = 0; i < hashsize; i += 3) {
        putchar(sm[Message_Digest[i] >> 2]);
        b = (Message_Digest[i] & 0x03) << 4;
        if (i+1 < hashsize) b |= Message_Digest[i+1] >> 4;
        putchar(sm[b]);
        if (i+1 < hashsize) {
          b = (Message_Digest[i+1] & 0x0f) << 2;
          if (i+2 < hashsize) b |= Message_Digest[i+2] >> 6;
          putchar(sm[b]);
        } else putchar('=');
        if (i+2 < hashsize) putchar(sm[Message_Digest[i+2] & 0x3f]);
        else putchar('=');
"fixed": !!null |-
  null
"ko": !!null |-
  null
