"hash": |-
  1c6ac9004b6807d3daae4457d495aa6fe0e5a1ed878a1a61a0e51374a0fde1b4
"type": |-
  Content
"comment": !!null |-
  null
"original": |-
  /*
   * SHA1PadMessage
   *
   * Description:
   *   According to the standard, the message must be padded to the next
   *   even multiple of 512 bits.  The first padding bit must be a '1'.
   *   The last 64 bits represent the length of the original message.
   *   All bits in between should be 0.  This helper function will pad
   *   the message according to those rules by filling the Message_Block
   *   array accordingly.  When it returns, it can be assumed that the
   *   message digest has been computed.
   *
   * Parameters:
   *   context: [in/out]
   *     The context to pad.
   *   Pad_Byte: [in]
   *     The last byte to add to the message block before the 0-padding
   *     and length.  This will contain the last bits of the message
   *     followed by another single bit.  If the message was an
   *     exact multiple of 8-bits long, Pad_Byte will be 0x80.
   *
   * Returns:
   *   Nothing.
   */
  static void SHA1PadMessage(SHA1Context *context, uint8_t Pad_Byte)
  {
    /*
     * Check to see if the current message block is too small to hold
     * the initial padding bits and length.  If so, we will pad the
     * block, process it, and then continue padding into a second
     * block.
     */
    if (context->Message_Block_Index >= (SHA1_Message_Block_Size - 8)) {
      context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
      while (context->Message_Block_Index < SHA1_Message_Block_Size)
        context->Message_Block[context->Message_Block_Index++] = 0;
"fixed": |-
  /* * SHA1PadMessage * * Description: *   According to the standard, the message must be padded to the next *   even multiple of 512 bits.  The first padding bit must be a '1'. *   The last 64 bits represent the length of the original message. *   All bits in between should be 0.  This helper function will pad *   the message according to those rules by filling the Message_Block *   array accordingly.  When it returns, it can be assumed that the *   message digest has been computed. * * Parameters: *   context: [in/out] *     The context to pad. *   Pad_Byte: [in] *     The last byte to add to the message block before the 0-padding *     and length.  This will contain the last bits of the message *     followed by another single bit.  If the message was an *     exact multiple of 8-bits long, Pad_Byte will be 0x80. * * Returns: *   Nothing. */ static void SHA1PadMessage(SHA1Context *context, uint8_t Pad_Byte) { /* * Check to see if the current message block is too small to hold * the initial padding bits and length.  If so, we will pad the * block, process it, and then continue padding into a second * block. */ if (context->Message_Block_Index >= (SHA1_Message_Block_Size - 8)) { context->Message_Block[context->Message_Block_Index++] = Pad_Byte; while (context->Message_Block_Index < SHA1_Message_Block_Size) context->Message_Block[context->Message_Block_Index++] = 0;
"ko": |-
  /* * SHA1PadMessage * * 설명: * 표준에 따라 메시지는 512비트의 다음 * 짝수 배수로 채워져야 합니다. 첫 번째 패딩 비트는 '1'이어야 합니다. * 마지막 64비트는 원본 메시지의 길이를 나타냅니다. * 그 사이의 모든 비트는 0이어야 합니다. 이 도우미 함수는 * Message_Block 배열을 적절하게 채워 해당 규칙에 따라 메시지를 채웁니다. 반환되면 * 메시지 다이제스트가 계산되었다고 가정할 수 있습니다. * * 매개변수: * context: [in/out] * 채울 컨텍스트. * Pad_Byte: [in] * 0-padding * 및 길이 이전에 메시지 블록에 추가할 마지막 바이트입니다. 여기에는 메시지의 마지막 비트 *와 그 뒤에 또 다른 단일 비트가 포함됩니다. * 메시지가 8비트 길이의 정확한 배수인 경우 Pad_Byte는 0x80이 됩니다. * * 반환: * 아무것도 없습니다. */ static void SHA1PadMessage(SHA1Context *context, uint8_t Pad_Byte) { /* * 현재 메시지 블록이 초기 패딩 비트와 길이를 담기에 * 너무 작은지 확인하십시오. 그렇다면 * 블록을 채우고 처리한 다음 두 번째 * 블록에 계속 패딩합니다. */ if (context->Message_Block_Index >= (SHA1_Message_Block_Size - 8)) { context->Message_Block[context->Message_Block_Index++] = Pad_Byte; while (context->Message_Block_Index < SHA1_Message_Block_Size) 컨텍스트->Message_Block[context->Message_Block_Index++] = 0;
