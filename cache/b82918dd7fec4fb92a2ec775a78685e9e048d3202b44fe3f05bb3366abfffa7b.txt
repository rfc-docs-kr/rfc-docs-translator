   올바르게 사용하면 이러한 보다 완전한 기능을 갖춘 전송 프로토콜은 자주 주장되는 것처럼 "무거운" 전송 프로토콜이 아닙니다. 예를 들어, TCP 알고리즘은 수십 년 동안 지속적으로 개선되어 사용자 정의 애플리케이션 계층 메커니즘이 쉽게 복제하기 힘든 효율성과 정확성 수준에 도달했습니다. 또한 많은 TCP 구현에서는 애플리케이션이 해당 목적에 맞게 연결을 조정할 수 있습니다. 예를 들어, TCP의 "Nagle" 알고리즘[RFC1122]을 비활성화하여 패킷 전송을 더 자주 하지만 여전히 혼잡을 제어하여 통신 대기 시간을 개선할 수 있습니다. 또 다른 예는 많은 플랫폼에서 사용할 수 있는 TCP SYN 쿠키 메커니즘 [RFC4987]입니다. SYN 쿠키를 사용하는 TCP에서는 연결이 설정될 때까지 서버가 연결별 상태를 유지할 필요가 없습니다. 또한 TCP는 한 연결 인스턴스의 지연된 세그먼트가 이후 연결 인스턴스를 방해하지 않도록 하는 TIME-WAIT 상태를 유지하기 위해 연결을 닫는 끝이 필요합니다. 이 동작을 인식하고 설계한 애플리케이션은 TCP 연결을 닫는 쪽을 제어하여 TIME-WAIT 상태 유지 관리를 전환하여 리소스를 절약할 수 있습니다[FABER]. 마지막으로, TCP의 내장된 용량 검색 및 경로(PMTU)에서 지원하는 최대 전송 단위에 대한 인식을 통해 여러 세그먼트를 교환하는 전송의 경우 초기 연결 설정 지연을 신속하게 보상하는 효율적인 데이터 전송이 가능합니다. .