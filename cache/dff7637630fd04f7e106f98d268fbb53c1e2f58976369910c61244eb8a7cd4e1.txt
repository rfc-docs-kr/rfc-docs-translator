   에이전트 L, R 및 Z를 고려하십시오. L 및 R은 10.0.0.0/8을 사용하는 민간 기업 1 내에 있습니다. Z는 역시 10.0.0.0/8을 사용하는 민간 기업 2 내에 있습니다. 알고 보니 R과 Z 모두 IP 주소가 10.0.1.1입니다. L은 Z에게 제안을 보냅니다. Z는 이에 대한 답변으로 L에게 호스트 후보를 제공합니다. 이 경우 해당 후보는 10.0.1.1:8866 및 10.0.1.1:8877입니다. 알고 보니 R은 동시에 세션에 있고 10.0.1.1:8866 및 10.0.1.1:8877을 호스트 후보로 사용하고 있습니다. 이는 R이 Z와 마찬가지로 해당 포트에서 STUN 메시지를 수락할 준비가 되어 있음을 의미합니다. L은 10.0.1.1:8866에 STUN 요청을 보내고 10.0.1.1:8877에 또 다른 STUN 요청을 보냅니다. 그러나 예상대로 Z로 이동하지 않습니다. 대신에 그들은 R로 갑니다! R이 방금 응답했다면 L은 Z에 연결되어 있다고 믿을 것입니다. 그러나 실제로는 완전히 다른 사용자인 R에 연결되어 있습니다. 이 문제를 해결하기 위해 STUN 단기 자격 증명 메커니즘이 사용됩니다. 사용자 이름 조각은 충분히 무작위적이어서 R이 Z와 동일한 값을 사용할 가능성이 거의 없습니다. 결과적으로 자격 증명이 유효하지 않기 때문에 R은 STUN 요청을 거부합니다. 본질적으로 STUN 사용자 이름 조각은 특정 제안/응답 세션에 바인딩된 임시 호스트 식별자의 형태를 제공합니다.