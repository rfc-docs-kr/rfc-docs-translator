/* * SHA1PadMessage * * 설명: * 표준에 따라 메시지는 512비트의 다음 * 짝수 배수로 채워져야 합니다. 첫 번째 패딩 비트는 '1'이어야 합니다. * 마지막 64비트는 원본 메시지의 길이를 나타냅니다. * 그 사이의 모든 비트는 0이어야 합니다. 이 도우미 함수는 * Message_Block 배열을 적절하게 채워 해당 규칙에 따라 메시지를 채웁니다. 반환되면 * 메시지 다이제스트가 계산되었다고 가정할 수 있습니다. * * 매개변수: * context: [in/out] * 채울 컨텍스트. * Pad_Byte: [in] * 0-padding * 및 길이 이전에 메시지 블록에 추가할 마지막 바이트입니다. 여기에는 메시지의 마지막 비트 *와 그 뒤에 또 다른 단일 비트가 포함됩니다. * 메시지가 8비트 길이의 정확한 배수인 경우 Pad_Byte는 0x80이 됩니다. * * 반환: * 아무것도 없습니다. */ static void SHA1PadMessage(SHA1Context *context, uint8_t Pad_Byte) { /* * 현재 메시지 블록이 초기 패딩 비트와 길이를 담기에 * 너무 작은지 확인하십시오. 그렇다면 * 블록을 채우고 처리한 다음 두 번째 * 블록에 계속 패딩합니다. */ if (context->Message_Block_Index >= (SHA1_Message_Block_Size - 8)) { context->Message_Block[context->Message_Block_Index++] = Pad_Byte; while (context->Message_Block_Index < SHA1_Message_Block_Size) 컨텍스트->Message_Block[context->Message_Block_Index++] = 0;