     통신 서브넷과의 통신과 서로 통신에서 호스트가 해석하는 "프로토콜"이 됩니다. 호스트(실행 중인 프로그램)의 활성 엔터티는 컴퓨터 과학에서 "프로세스"로 널리 언급되었기 때문에 리소스 공유의 기계화에는 프로세스 간 통신이 포함되어야 한다는 것이 분명해 보였습니다. 프로세스 간 통신을 활성화하고 사용하는 프로토콜은 거의 자명하게 목표를 향한 길이 되었습니다. 아마도 단순한 원격 액세스의 한계가 초기에 인식되었기 때문일 수도 있고, 물리적 테이프 드라이브와 시스템 입력 스트림 또는 시스템 출력 스트림과 같이 기존에 정의된 기능과 관련된 테이프 드라이브를 구별하는 것과 관련하여 유사한 사용법을 단순히 비유했기 때문일 수도 있습니다. 배치 운영 체제에서 원하는 프로세스 간 통신 메커니즘을 통해 식별 가능한 통신 경로(또는 "채널")는 "논리적 연결"로 알려졌습니다. 이 용어의 의도는 물리적 경로가 중요하지 않고 지정자( 번호)은 논리적 테이프 드라이브 번호와 마찬가지로 할당된 의미를 가질 수 있습니다. 당시 컴퓨터 과학에서는 "모듈성"이 중요한 문제였고 호스트와 IMP(인터페이스 메시지 프로세서)의 분리가 당연했기 때문에 NWG는 자신이 설계한 프로토콜이 다음과 같은 의미에서 "계층화"되어야 한다는 것을 깨달았습니다. 주어진 관련 기능 세트(예: 호스트 간 프로토콜에서 구현되는 프로세스 간 통신 메커니즘 또는 "기본 요소")는 다른 관련 기능 세트(예: 호스트-통신 서브넷 프로세서 프로토콜에서 구현되는 통신 서브넷 연결 메커니즘), 실제로 프로토콜은 계층 구조에 존재하는 것으로 볼 수 있습니다.