   HyStart++에서 TCP 발신자는 표준 느린 시작을 사용한 다음 지연 증가 알고리즘을 사용하여 느린 시작에서 종료하도록 트리거합니다. 그러나 느린 시작에서 혼잡 회피로 곧바로 이동하는 대신 발신자는 느린 시작에서 조기 종료되었는지 여부를 확인하기 위해 보수적 느린 시작(CSS) 단계에서 많은 RTT를 소비합니다. CSS 동안 정체 기간은 일반적인 느린 시작과 유사한 방식으로 기하급수적으로 증가하지만 기하급수적 기반이 더 작아 공격적인 증가가 덜합니다. CSS 중에 RTT가 감소하면 RTT 스파이크는 이상적인 전송 속도보다 빠른 속도로 전송하는 연결로 인해 발생하는 혼잡과 관련이 없으며 연결이 느린 시작으로 다시 시작된다는 결론을 내립니다. RTT 인플레이션이 CSS 전체에서 지속되면 연결이 혼잡 회피 상태가 됩니다.